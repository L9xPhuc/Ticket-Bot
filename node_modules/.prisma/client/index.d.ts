
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model ArchivedChannel
 * 
 */
export type ArchivedChannel = $Result.DefaultSelection<Prisma.$ArchivedChannelPayload>
/**
 * Model ArchivedMessage
 * 
 */
export type ArchivedMessage = $Result.DefaultSelection<Prisma.$ArchivedMessagePayload>
/**
 * Model ArchivedRole
 * 
 */
export type ArchivedRole = $Result.DefaultSelection<Prisma.$ArchivedRolePayload>
/**
 * Model ArchivedUser
 * 
 */
export type ArchivedUser = $Result.DefaultSelection<Prisma.$ArchivedUserPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>
/**
 * Model Guild
 * 
 */
export type Guild = $Result.DefaultSelection<Prisma.$GuildPayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>
/**
 * Model QuestionAnswer
 * 
 */
export type QuestionAnswer = $Result.DefaultSelection<Prisma.$QuestionAnswerPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model Ticket
 * 
 */
export type Ticket = $Result.DefaultSelection<Prisma.$TicketPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const QuestionType: {
  MENU: 'MENU',
  TEXT: 'TEXT'
};

export type QuestionType = (typeof QuestionType)[keyof typeof QuestionType]


export const TicketPriority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

export type TicketPriority = (typeof TicketPriority)[keyof typeof TicketPriority]

}

export type QuestionType = $Enums.QuestionType

export const QuestionType: typeof $Enums.QuestionType

export type TicketPriority = $Enums.TicketPriority

export const TicketPriority: typeof $Enums.TicketPriority

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ArchivedChannels
 * const archivedChannels = await prisma.archivedChannel.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ArchivedChannels
   * const archivedChannels = await prisma.archivedChannel.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.archivedChannel`: Exposes CRUD operations for the **ArchivedChannel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArchivedChannels
    * const archivedChannels = await prisma.archivedChannel.findMany()
    * ```
    */
  get archivedChannel(): Prisma.ArchivedChannelDelegate<ExtArgs>;

  /**
   * `prisma.archivedMessage`: Exposes CRUD operations for the **ArchivedMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArchivedMessages
    * const archivedMessages = await prisma.archivedMessage.findMany()
    * ```
    */
  get archivedMessage(): Prisma.ArchivedMessageDelegate<ExtArgs>;

  /**
   * `prisma.archivedRole`: Exposes CRUD operations for the **ArchivedRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArchivedRoles
    * const archivedRoles = await prisma.archivedRole.findMany()
    * ```
    */
  get archivedRole(): Prisma.ArchivedRoleDelegate<ExtArgs>;

  /**
   * `prisma.archivedUser`: Exposes CRUD operations for the **ArchivedUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArchivedUsers
    * const archivedUsers = await prisma.archivedUser.findMany()
    * ```
    */
  get archivedUser(): Prisma.ArchivedUserDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs>;

  /**
   * `prisma.guild`: Exposes CRUD operations for the **Guild** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Guilds
    * const guilds = await prisma.guild.findMany()
    * ```
    */
  get guild(): Prisma.GuildDelegate<ExtArgs>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs>;

  /**
   * `prisma.questionAnswer`: Exposes CRUD operations for the **QuestionAnswer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionAnswers
    * const questionAnswers = await prisma.questionAnswer.findMany()
    * ```
    */
  get questionAnswer(): Prisma.QuestionAnswerDelegate<ExtArgs>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs>;

  /**
   * `prisma.ticket`: Exposes CRUD operations for the **Ticket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tickets
    * const tickets = await prisma.ticket.findMany()
    * ```
    */
  get ticket(): Prisma.TicketDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ArchivedChannel: 'ArchivedChannel',
    ArchivedMessage: 'ArchivedMessage',
    ArchivedRole: 'ArchivedRole',
    ArchivedUser: 'ArchivedUser',
    Category: 'Category',
    Feedback: 'Feedback',
    Guild: 'Guild',
    Question: 'Question',
    QuestionAnswer: 'QuestionAnswer',
    Tag: 'Tag',
    Ticket: 'Ticket',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "archivedChannel" | "archivedMessage" | "archivedRole" | "archivedUser" | "category" | "feedback" | "guild" | "question" | "questionAnswer" | "tag" | "ticket" | "user"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      ArchivedChannel: {
        payload: Prisma.$ArchivedChannelPayload<ExtArgs>
        fields: Prisma.ArchivedChannelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArchivedChannelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedChannelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArchivedChannelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedChannelPayload>
          }
          findFirst: {
            args: Prisma.ArchivedChannelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedChannelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArchivedChannelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedChannelPayload>
          }
          findMany: {
            args: Prisma.ArchivedChannelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedChannelPayload>[]
          }
          create: {
            args: Prisma.ArchivedChannelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedChannelPayload>
          }
          createMany: {
            args: Prisma.ArchivedChannelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ArchivedChannelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedChannelPayload>
          }
          update: {
            args: Prisma.ArchivedChannelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedChannelPayload>
          }
          deleteMany: {
            args: Prisma.ArchivedChannelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArchivedChannelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArchivedChannelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedChannelPayload>
          }
          aggregate: {
            args: Prisma.ArchivedChannelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArchivedChannel>
          }
          groupBy: {
            args: Prisma.ArchivedChannelGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArchivedChannelGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArchivedChannelCountArgs<ExtArgs>
            result: $Utils.Optional<ArchivedChannelCountAggregateOutputType> | number
          }
        }
      }
      ArchivedMessage: {
        payload: Prisma.$ArchivedMessagePayload<ExtArgs>
        fields: Prisma.ArchivedMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArchivedMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArchivedMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedMessagePayload>
          }
          findFirst: {
            args: Prisma.ArchivedMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArchivedMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedMessagePayload>
          }
          findMany: {
            args: Prisma.ArchivedMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedMessagePayload>[]
          }
          create: {
            args: Prisma.ArchivedMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedMessagePayload>
          }
          createMany: {
            args: Prisma.ArchivedMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ArchivedMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedMessagePayload>
          }
          update: {
            args: Prisma.ArchivedMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedMessagePayload>
          }
          deleteMany: {
            args: Prisma.ArchivedMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArchivedMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArchivedMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedMessagePayload>
          }
          aggregate: {
            args: Prisma.ArchivedMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArchivedMessage>
          }
          groupBy: {
            args: Prisma.ArchivedMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArchivedMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArchivedMessageCountArgs<ExtArgs>
            result: $Utils.Optional<ArchivedMessageCountAggregateOutputType> | number
          }
        }
      }
      ArchivedRole: {
        payload: Prisma.$ArchivedRolePayload<ExtArgs>
        fields: Prisma.ArchivedRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArchivedRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArchivedRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedRolePayload>
          }
          findFirst: {
            args: Prisma.ArchivedRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArchivedRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedRolePayload>
          }
          findMany: {
            args: Prisma.ArchivedRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedRolePayload>[]
          }
          create: {
            args: Prisma.ArchivedRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedRolePayload>
          }
          createMany: {
            args: Prisma.ArchivedRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ArchivedRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedRolePayload>
          }
          update: {
            args: Prisma.ArchivedRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedRolePayload>
          }
          deleteMany: {
            args: Prisma.ArchivedRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArchivedRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArchivedRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedRolePayload>
          }
          aggregate: {
            args: Prisma.ArchivedRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArchivedRole>
          }
          groupBy: {
            args: Prisma.ArchivedRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArchivedRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArchivedRoleCountArgs<ExtArgs>
            result: $Utils.Optional<ArchivedRoleCountAggregateOutputType> | number
          }
        }
      }
      ArchivedUser: {
        payload: Prisma.$ArchivedUserPayload<ExtArgs>
        fields: Prisma.ArchivedUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArchivedUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArchivedUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedUserPayload>
          }
          findFirst: {
            args: Prisma.ArchivedUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArchivedUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedUserPayload>
          }
          findMany: {
            args: Prisma.ArchivedUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedUserPayload>[]
          }
          create: {
            args: Prisma.ArchivedUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedUserPayload>
          }
          createMany: {
            args: Prisma.ArchivedUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ArchivedUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedUserPayload>
          }
          update: {
            args: Prisma.ArchivedUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedUserPayload>
          }
          deleteMany: {
            args: Prisma.ArchivedUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArchivedUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArchivedUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedUserPayload>
          }
          aggregate: {
            args: Prisma.ArchivedUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArchivedUser>
          }
          groupBy: {
            args: Prisma.ArchivedUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArchivedUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArchivedUserCountArgs<ExtArgs>
            result: $Utils.Optional<ArchivedUserCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
      Guild: {
        payload: Prisma.$GuildPayload<ExtArgs>
        fields: Prisma.GuildFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GuildFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GuildFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildPayload>
          }
          findFirst: {
            args: Prisma.GuildFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GuildFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildPayload>
          }
          findMany: {
            args: Prisma.GuildFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildPayload>[]
          }
          create: {
            args: Prisma.GuildCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildPayload>
          }
          createMany: {
            args: Prisma.GuildCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GuildDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildPayload>
          }
          update: {
            args: Prisma.GuildUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildPayload>
          }
          deleteMany: {
            args: Prisma.GuildDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GuildUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GuildUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildPayload>
          }
          aggregate: {
            args: Prisma.GuildAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGuild>
          }
          groupBy: {
            args: Prisma.GuildGroupByArgs<ExtArgs>
            result: $Utils.Optional<GuildGroupByOutputType>[]
          }
          count: {
            args: Prisma.GuildCountArgs<ExtArgs>
            result: $Utils.Optional<GuildCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      QuestionAnswer: {
        payload: Prisma.$QuestionAnswerPayload<ExtArgs>
        fields: Prisma.QuestionAnswerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionAnswerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionAnswerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload>
          }
          findFirst: {
            args: Prisma.QuestionAnswerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionAnswerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload>
          }
          findMany: {
            args: Prisma.QuestionAnswerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload>[]
          }
          create: {
            args: Prisma.QuestionAnswerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload>
          }
          createMany: {
            args: Prisma.QuestionAnswerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.QuestionAnswerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload>
          }
          update: {
            args: Prisma.QuestionAnswerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload>
          }
          deleteMany: {
            args: Prisma.QuestionAnswerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionAnswerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QuestionAnswerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload>
          }
          aggregate: {
            args: Prisma.QuestionAnswerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionAnswer>
          }
          groupBy: {
            args: Prisma.QuestionAnswerGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionAnswerGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionAnswerCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionAnswerCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      Ticket: {
        payload: Prisma.$TicketPayload<ExtArgs>
        fields: Prisma.TicketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TicketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TicketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          findFirst: {
            args: Prisma.TicketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TicketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          findMany: {
            args: Prisma.TicketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>[]
          }
          create: {
            args: Prisma.TicketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          createMany: {
            args: Prisma.TicketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TicketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          update: {
            args: Prisma.TicketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          deleteMany: {
            args: Prisma.TicketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TicketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TicketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          aggregate: {
            args: Prisma.TicketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicket>
          }
          groupBy: {
            args: Prisma.TicketGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketGroupByOutputType>[]
          }
          count: {
            args: Prisma.TicketCountArgs<ExtArgs>
            result: $Utils.Optional<TicketCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ArchivedRoleCountOutputType
   */

  export type ArchivedRoleCountOutputType = {
    archivedUsers: number
  }

  export type ArchivedRoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    archivedUsers?: boolean | ArchivedRoleCountOutputTypeCountArchivedUsersArgs
  }

  // Custom InputTypes
  /**
   * ArchivedRoleCountOutputType without action
   */
  export type ArchivedRoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedRoleCountOutputType
     */
    select?: ArchivedRoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArchivedRoleCountOutputType without action
   */
  export type ArchivedRoleCountOutputTypeCountArchivedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArchivedUserWhereInput
  }


  /**
   * Count Type ArchivedUserCountOutputType
   */

  export type ArchivedUserCountOutputType = {
    archivedMessages: number
  }

  export type ArchivedUserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    archivedMessages?: boolean | ArchivedUserCountOutputTypeCountArchivedMessagesArgs
  }

  // Custom InputTypes
  /**
   * ArchivedUserCountOutputType without action
   */
  export type ArchivedUserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedUserCountOutputType
     */
    select?: ArchivedUserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArchivedUserCountOutputType without action
   */
  export type ArchivedUserCountOutputTypeCountArchivedMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArchivedMessageWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    questions: number
    tickets: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | CategoryCountOutputTypeCountQuestionsArgs
    tickets?: boolean | CategoryCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
  }


  /**
   * Count Type GuildCountOutputType
   */

  export type GuildCountOutputType = {
    categories: number
    feedback: number
    tags: number
    tickets: number
  }

  export type GuildCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | GuildCountOutputTypeCountCategoriesArgs
    feedback?: boolean | GuildCountOutputTypeCountFeedbackArgs
    tags?: boolean | GuildCountOutputTypeCountTagsArgs
    tickets?: boolean | GuildCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * GuildCountOutputType without action
   */
  export type GuildCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildCountOutputType
     */
    select?: GuildCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GuildCountOutputType without action
   */
  export type GuildCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * GuildCountOutputType without action
   */
  export type GuildCountOutputTypeCountFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * GuildCountOutputType without action
   */
  export type GuildCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
  }

  /**
   * GuildCountOutputType without action
   */
  export type GuildCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
  }


  /**
   * Count Type QuestionCountOutputType
   */

  export type QuestionCountOutputType = {
    answers: number
  }

  export type QuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answers?: boolean | QuestionCountOutputTypeCountAnswersArgs
  }

  // Custom InputTypes
  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCountOutputType
     */
    select?: QuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionAnswerWhereInput
  }


  /**
   * Count Type TicketCountOutputType
   */

  export type TicketCountOutputType = {
    archivedChannels: number
    archivedMessages: number
    archivedRoles: number
    archivedUsers: number
    referencedBy: number
    questionAnswers: number
  }

  export type TicketCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    archivedChannels?: boolean | TicketCountOutputTypeCountArchivedChannelsArgs
    archivedMessages?: boolean | TicketCountOutputTypeCountArchivedMessagesArgs
    archivedRoles?: boolean | TicketCountOutputTypeCountArchivedRolesArgs
    archivedUsers?: boolean | TicketCountOutputTypeCountArchivedUsersArgs
    referencedBy?: boolean | TicketCountOutputTypeCountReferencedByArgs
    questionAnswers?: boolean | TicketCountOutputTypeCountQuestionAnswersArgs
  }

  // Custom InputTypes
  /**
   * TicketCountOutputType without action
   */
  export type TicketCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketCountOutputType
     */
    select?: TicketCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TicketCountOutputType without action
   */
  export type TicketCountOutputTypeCountArchivedChannelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArchivedChannelWhereInput
  }

  /**
   * TicketCountOutputType without action
   */
  export type TicketCountOutputTypeCountArchivedMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArchivedMessageWhereInput
  }

  /**
   * TicketCountOutputType without action
   */
  export type TicketCountOutputTypeCountArchivedRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArchivedRoleWhereInput
  }

  /**
   * TicketCountOutputType without action
   */
  export type TicketCountOutputTypeCountArchivedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArchivedUserWhereInput
  }

  /**
   * TicketCountOutputType without action
   */
  export type TicketCountOutputTypeCountReferencedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
  }

  /**
   * TicketCountOutputType without action
   */
  export type TicketCountOutputTypeCountQuestionAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionAnswerWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    feedback: number
    ticketsCreated: number
    ticketsClosed: number
    ticketsClaimed: number
    questionAnswers: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedback?: boolean | UserCountOutputTypeCountFeedbackArgs
    ticketsCreated?: boolean | UserCountOutputTypeCountTicketsCreatedArgs
    ticketsClosed?: boolean | UserCountOutputTypeCountTicketsClosedArgs
    ticketsClaimed?: boolean | UserCountOutputTypeCountTicketsClaimedArgs
    questionAnswers?: boolean | UserCountOutputTypeCountQuestionAnswersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTicketsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTicketsClosedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTicketsClaimedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQuestionAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionAnswerWhereInput
  }


  /**
   * Models
   */

  /**
   * Model ArchivedChannel
   */

  export type AggregateArchivedChannel = {
    _count: ArchivedChannelCountAggregateOutputType | null
    _min: ArchivedChannelMinAggregateOutputType | null
    _max: ArchivedChannelMaxAggregateOutputType | null
  }

  export type ArchivedChannelMinAggregateOutputType = {
    channelId: string | null
    createdAt: Date | null
    name: string | null
    ticketId: string | null
  }

  export type ArchivedChannelMaxAggregateOutputType = {
    channelId: string | null
    createdAt: Date | null
    name: string | null
    ticketId: string | null
  }

  export type ArchivedChannelCountAggregateOutputType = {
    channelId: number
    createdAt: number
    name: number
    ticketId: number
    _all: number
  }


  export type ArchivedChannelMinAggregateInputType = {
    channelId?: true
    createdAt?: true
    name?: true
    ticketId?: true
  }

  export type ArchivedChannelMaxAggregateInputType = {
    channelId?: true
    createdAt?: true
    name?: true
    ticketId?: true
  }

  export type ArchivedChannelCountAggregateInputType = {
    channelId?: true
    createdAt?: true
    name?: true
    ticketId?: true
    _all?: true
  }

  export type ArchivedChannelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArchivedChannel to aggregate.
     */
    where?: ArchivedChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedChannels to fetch.
     */
    orderBy?: ArchivedChannelOrderByWithRelationInput | ArchivedChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArchivedChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedChannels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ArchivedChannels
    **/
    _count?: true | ArchivedChannelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArchivedChannelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArchivedChannelMaxAggregateInputType
  }

  export type GetArchivedChannelAggregateType<T extends ArchivedChannelAggregateArgs> = {
        [P in keyof T & keyof AggregateArchivedChannel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArchivedChannel[P]>
      : GetScalarType<T[P], AggregateArchivedChannel[P]>
  }




  export type ArchivedChannelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArchivedChannelWhereInput
    orderBy?: ArchivedChannelOrderByWithAggregationInput | ArchivedChannelOrderByWithAggregationInput[]
    by: ArchivedChannelScalarFieldEnum[] | ArchivedChannelScalarFieldEnum
    having?: ArchivedChannelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArchivedChannelCountAggregateInputType | true
    _min?: ArchivedChannelMinAggregateInputType
    _max?: ArchivedChannelMaxAggregateInputType
  }

  export type ArchivedChannelGroupByOutputType = {
    channelId: string
    createdAt: Date
    name: string
    ticketId: string
    _count: ArchivedChannelCountAggregateOutputType | null
    _min: ArchivedChannelMinAggregateOutputType | null
    _max: ArchivedChannelMaxAggregateOutputType | null
  }

  type GetArchivedChannelGroupByPayload<T extends ArchivedChannelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArchivedChannelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArchivedChannelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArchivedChannelGroupByOutputType[P]>
            : GetScalarType<T[P], ArchivedChannelGroupByOutputType[P]>
        }
      >
    >


  export type ArchivedChannelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    channelId?: boolean
    createdAt?: boolean
    name?: boolean
    ticketId?: boolean
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["archivedChannel"]>


  export type ArchivedChannelSelectScalar = {
    channelId?: boolean
    createdAt?: boolean
    name?: boolean
    ticketId?: boolean
  }

  export type ArchivedChannelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }

  export type $ArchivedChannelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ArchivedChannel"
    objects: {
      ticket: Prisma.$TicketPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      channelId: string
      createdAt: Date
      name: string
      ticketId: string
    }, ExtArgs["result"]["archivedChannel"]>
    composites: {}
  }

  type ArchivedChannelGetPayload<S extends boolean | null | undefined | ArchivedChannelDefaultArgs> = $Result.GetResult<Prisma.$ArchivedChannelPayload, S>

  type ArchivedChannelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ArchivedChannelFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ArchivedChannelCountAggregateInputType | true
    }

  export interface ArchivedChannelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ArchivedChannel'], meta: { name: 'ArchivedChannel' } }
    /**
     * Find zero or one ArchivedChannel that matches the filter.
     * @param {ArchivedChannelFindUniqueArgs} args - Arguments to find a ArchivedChannel
     * @example
     * // Get one ArchivedChannel
     * const archivedChannel = await prisma.archivedChannel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArchivedChannelFindUniqueArgs>(args: SelectSubset<T, ArchivedChannelFindUniqueArgs<ExtArgs>>): Prisma__ArchivedChannelClient<$Result.GetResult<Prisma.$ArchivedChannelPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ArchivedChannel that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ArchivedChannelFindUniqueOrThrowArgs} args - Arguments to find a ArchivedChannel
     * @example
     * // Get one ArchivedChannel
     * const archivedChannel = await prisma.archivedChannel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArchivedChannelFindUniqueOrThrowArgs>(args: SelectSubset<T, ArchivedChannelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArchivedChannelClient<$Result.GetResult<Prisma.$ArchivedChannelPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ArchivedChannel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedChannelFindFirstArgs} args - Arguments to find a ArchivedChannel
     * @example
     * // Get one ArchivedChannel
     * const archivedChannel = await prisma.archivedChannel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArchivedChannelFindFirstArgs>(args?: SelectSubset<T, ArchivedChannelFindFirstArgs<ExtArgs>>): Prisma__ArchivedChannelClient<$Result.GetResult<Prisma.$ArchivedChannelPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ArchivedChannel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedChannelFindFirstOrThrowArgs} args - Arguments to find a ArchivedChannel
     * @example
     * // Get one ArchivedChannel
     * const archivedChannel = await prisma.archivedChannel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArchivedChannelFindFirstOrThrowArgs>(args?: SelectSubset<T, ArchivedChannelFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArchivedChannelClient<$Result.GetResult<Prisma.$ArchivedChannelPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ArchivedChannels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedChannelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArchivedChannels
     * const archivedChannels = await prisma.archivedChannel.findMany()
     * 
     * // Get first 10 ArchivedChannels
     * const archivedChannels = await prisma.archivedChannel.findMany({ take: 10 })
     * 
     * // Only select the `channelId`
     * const archivedChannelWithChannelIdOnly = await prisma.archivedChannel.findMany({ select: { channelId: true } })
     * 
     */
    findMany<T extends ArchivedChannelFindManyArgs>(args?: SelectSubset<T, ArchivedChannelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchivedChannelPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ArchivedChannel.
     * @param {ArchivedChannelCreateArgs} args - Arguments to create a ArchivedChannel.
     * @example
     * // Create one ArchivedChannel
     * const ArchivedChannel = await prisma.archivedChannel.create({
     *   data: {
     *     // ... data to create a ArchivedChannel
     *   }
     * })
     * 
     */
    create<T extends ArchivedChannelCreateArgs>(args: SelectSubset<T, ArchivedChannelCreateArgs<ExtArgs>>): Prisma__ArchivedChannelClient<$Result.GetResult<Prisma.$ArchivedChannelPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ArchivedChannels.
     * @param {ArchivedChannelCreateManyArgs} args - Arguments to create many ArchivedChannels.
     * @example
     * // Create many ArchivedChannels
     * const archivedChannel = await prisma.archivedChannel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArchivedChannelCreateManyArgs>(args?: SelectSubset<T, ArchivedChannelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ArchivedChannel.
     * @param {ArchivedChannelDeleteArgs} args - Arguments to delete one ArchivedChannel.
     * @example
     * // Delete one ArchivedChannel
     * const ArchivedChannel = await prisma.archivedChannel.delete({
     *   where: {
     *     // ... filter to delete one ArchivedChannel
     *   }
     * })
     * 
     */
    delete<T extends ArchivedChannelDeleteArgs>(args: SelectSubset<T, ArchivedChannelDeleteArgs<ExtArgs>>): Prisma__ArchivedChannelClient<$Result.GetResult<Prisma.$ArchivedChannelPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ArchivedChannel.
     * @param {ArchivedChannelUpdateArgs} args - Arguments to update one ArchivedChannel.
     * @example
     * // Update one ArchivedChannel
     * const archivedChannel = await prisma.archivedChannel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArchivedChannelUpdateArgs>(args: SelectSubset<T, ArchivedChannelUpdateArgs<ExtArgs>>): Prisma__ArchivedChannelClient<$Result.GetResult<Prisma.$ArchivedChannelPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ArchivedChannels.
     * @param {ArchivedChannelDeleteManyArgs} args - Arguments to filter ArchivedChannels to delete.
     * @example
     * // Delete a few ArchivedChannels
     * const { count } = await prisma.archivedChannel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArchivedChannelDeleteManyArgs>(args?: SelectSubset<T, ArchivedChannelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArchivedChannels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedChannelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArchivedChannels
     * const archivedChannel = await prisma.archivedChannel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArchivedChannelUpdateManyArgs>(args: SelectSubset<T, ArchivedChannelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ArchivedChannel.
     * @param {ArchivedChannelUpsertArgs} args - Arguments to update or create a ArchivedChannel.
     * @example
     * // Update or create a ArchivedChannel
     * const archivedChannel = await prisma.archivedChannel.upsert({
     *   create: {
     *     // ... data to create a ArchivedChannel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArchivedChannel we want to update
     *   }
     * })
     */
    upsert<T extends ArchivedChannelUpsertArgs>(args: SelectSubset<T, ArchivedChannelUpsertArgs<ExtArgs>>): Prisma__ArchivedChannelClient<$Result.GetResult<Prisma.$ArchivedChannelPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ArchivedChannels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedChannelCountArgs} args - Arguments to filter ArchivedChannels to count.
     * @example
     * // Count the number of ArchivedChannels
     * const count = await prisma.archivedChannel.count({
     *   where: {
     *     // ... the filter for the ArchivedChannels we want to count
     *   }
     * })
    **/
    count<T extends ArchivedChannelCountArgs>(
      args?: Subset<T, ArchivedChannelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArchivedChannelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArchivedChannel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedChannelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArchivedChannelAggregateArgs>(args: Subset<T, ArchivedChannelAggregateArgs>): Prisma.PrismaPromise<GetArchivedChannelAggregateType<T>>

    /**
     * Group by ArchivedChannel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedChannelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArchivedChannelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArchivedChannelGroupByArgs['orderBy'] }
        : { orderBy?: ArchivedChannelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArchivedChannelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArchivedChannelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ArchivedChannel model
   */
  readonly fields: ArchivedChannelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ArchivedChannel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArchivedChannelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ticket<T extends TicketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketDefaultArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ArchivedChannel model
   */ 
  interface ArchivedChannelFieldRefs {
    readonly channelId: FieldRef<"ArchivedChannel", 'String'>
    readonly createdAt: FieldRef<"ArchivedChannel", 'DateTime'>
    readonly name: FieldRef<"ArchivedChannel", 'String'>
    readonly ticketId: FieldRef<"ArchivedChannel", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ArchivedChannel findUnique
   */
  export type ArchivedChannelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedChannel
     */
    select?: ArchivedChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedChannelInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedChannel to fetch.
     */
    where: ArchivedChannelWhereUniqueInput
  }

  /**
   * ArchivedChannel findUniqueOrThrow
   */
  export type ArchivedChannelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedChannel
     */
    select?: ArchivedChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedChannelInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedChannel to fetch.
     */
    where: ArchivedChannelWhereUniqueInput
  }

  /**
   * ArchivedChannel findFirst
   */
  export type ArchivedChannelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedChannel
     */
    select?: ArchivedChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedChannelInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedChannel to fetch.
     */
    where?: ArchivedChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedChannels to fetch.
     */
    orderBy?: ArchivedChannelOrderByWithRelationInput | ArchivedChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArchivedChannels.
     */
    cursor?: ArchivedChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedChannels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArchivedChannels.
     */
    distinct?: ArchivedChannelScalarFieldEnum | ArchivedChannelScalarFieldEnum[]
  }

  /**
   * ArchivedChannel findFirstOrThrow
   */
  export type ArchivedChannelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedChannel
     */
    select?: ArchivedChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedChannelInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedChannel to fetch.
     */
    where?: ArchivedChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedChannels to fetch.
     */
    orderBy?: ArchivedChannelOrderByWithRelationInput | ArchivedChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArchivedChannels.
     */
    cursor?: ArchivedChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedChannels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArchivedChannels.
     */
    distinct?: ArchivedChannelScalarFieldEnum | ArchivedChannelScalarFieldEnum[]
  }

  /**
   * ArchivedChannel findMany
   */
  export type ArchivedChannelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedChannel
     */
    select?: ArchivedChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedChannelInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedChannels to fetch.
     */
    where?: ArchivedChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedChannels to fetch.
     */
    orderBy?: ArchivedChannelOrderByWithRelationInput | ArchivedChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ArchivedChannels.
     */
    cursor?: ArchivedChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedChannels.
     */
    skip?: number
    distinct?: ArchivedChannelScalarFieldEnum | ArchivedChannelScalarFieldEnum[]
  }

  /**
   * ArchivedChannel create
   */
  export type ArchivedChannelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedChannel
     */
    select?: ArchivedChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedChannelInclude<ExtArgs> | null
    /**
     * The data needed to create a ArchivedChannel.
     */
    data: XOR<ArchivedChannelCreateInput, ArchivedChannelUncheckedCreateInput>
  }

  /**
   * ArchivedChannel createMany
   */
  export type ArchivedChannelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ArchivedChannels.
     */
    data: ArchivedChannelCreateManyInput | ArchivedChannelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ArchivedChannel update
   */
  export type ArchivedChannelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedChannel
     */
    select?: ArchivedChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedChannelInclude<ExtArgs> | null
    /**
     * The data needed to update a ArchivedChannel.
     */
    data: XOR<ArchivedChannelUpdateInput, ArchivedChannelUncheckedUpdateInput>
    /**
     * Choose, which ArchivedChannel to update.
     */
    where: ArchivedChannelWhereUniqueInput
  }

  /**
   * ArchivedChannel updateMany
   */
  export type ArchivedChannelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ArchivedChannels.
     */
    data: XOR<ArchivedChannelUpdateManyMutationInput, ArchivedChannelUncheckedUpdateManyInput>
    /**
     * Filter which ArchivedChannels to update
     */
    where?: ArchivedChannelWhereInput
  }

  /**
   * ArchivedChannel upsert
   */
  export type ArchivedChannelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedChannel
     */
    select?: ArchivedChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedChannelInclude<ExtArgs> | null
    /**
     * The filter to search for the ArchivedChannel to update in case it exists.
     */
    where: ArchivedChannelWhereUniqueInput
    /**
     * In case the ArchivedChannel found by the `where` argument doesn't exist, create a new ArchivedChannel with this data.
     */
    create: XOR<ArchivedChannelCreateInput, ArchivedChannelUncheckedCreateInput>
    /**
     * In case the ArchivedChannel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArchivedChannelUpdateInput, ArchivedChannelUncheckedUpdateInput>
  }

  /**
   * ArchivedChannel delete
   */
  export type ArchivedChannelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedChannel
     */
    select?: ArchivedChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedChannelInclude<ExtArgs> | null
    /**
     * Filter which ArchivedChannel to delete.
     */
    where: ArchivedChannelWhereUniqueInput
  }

  /**
   * ArchivedChannel deleteMany
   */
  export type ArchivedChannelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArchivedChannels to delete
     */
    where?: ArchivedChannelWhereInput
  }

  /**
   * ArchivedChannel without action
   */
  export type ArchivedChannelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedChannel
     */
    select?: ArchivedChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedChannelInclude<ExtArgs> | null
  }


  /**
   * Model ArchivedMessage
   */

  export type AggregateArchivedMessage = {
    _count: ArchivedMessageCountAggregateOutputType | null
    _min: ArchivedMessageMinAggregateOutputType | null
    _max: ArchivedMessageMaxAggregateOutputType | null
  }

  export type ArchivedMessageMinAggregateOutputType = {
    authorId: string | null
    content: string | null
    createdAt: Date | null
    deleted: boolean | null
    edited: boolean | null
    external: boolean | null
    id: string | null
    ticketId: string | null
  }

  export type ArchivedMessageMaxAggregateOutputType = {
    authorId: string | null
    content: string | null
    createdAt: Date | null
    deleted: boolean | null
    edited: boolean | null
    external: boolean | null
    id: string | null
    ticketId: string | null
  }

  export type ArchivedMessageCountAggregateOutputType = {
    authorId: number
    content: number
    createdAt: number
    deleted: number
    edited: number
    external: number
    id: number
    ticketId: number
    _all: number
  }


  export type ArchivedMessageMinAggregateInputType = {
    authorId?: true
    content?: true
    createdAt?: true
    deleted?: true
    edited?: true
    external?: true
    id?: true
    ticketId?: true
  }

  export type ArchivedMessageMaxAggregateInputType = {
    authorId?: true
    content?: true
    createdAt?: true
    deleted?: true
    edited?: true
    external?: true
    id?: true
    ticketId?: true
  }

  export type ArchivedMessageCountAggregateInputType = {
    authorId?: true
    content?: true
    createdAt?: true
    deleted?: true
    edited?: true
    external?: true
    id?: true
    ticketId?: true
    _all?: true
  }

  export type ArchivedMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArchivedMessage to aggregate.
     */
    where?: ArchivedMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedMessages to fetch.
     */
    orderBy?: ArchivedMessageOrderByWithRelationInput | ArchivedMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArchivedMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ArchivedMessages
    **/
    _count?: true | ArchivedMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArchivedMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArchivedMessageMaxAggregateInputType
  }

  export type GetArchivedMessageAggregateType<T extends ArchivedMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateArchivedMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArchivedMessage[P]>
      : GetScalarType<T[P], AggregateArchivedMessage[P]>
  }




  export type ArchivedMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArchivedMessageWhereInput
    orderBy?: ArchivedMessageOrderByWithAggregationInput | ArchivedMessageOrderByWithAggregationInput[]
    by: ArchivedMessageScalarFieldEnum[] | ArchivedMessageScalarFieldEnum
    having?: ArchivedMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArchivedMessageCountAggregateInputType | true
    _min?: ArchivedMessageMinAggregateInputType
    _max?: ArchivedMessageMaxAggregateInputType
  }

  export type ArchivedMessageGroupByOutputType = {
    authorId: string
    content: string
    createdAt: Date
    deleted: boolean
    edited: boolean
    external: boolean
    id: string
    ticketId: string
    _count: ArchivedMessageCountAggregateOutputType | null
    _min: ArchivedMessageMinAggregateOutputType | null
    _max: ArchivedMessageMaxAggregateOutputType | null
  }

  type GetArchivedMessageGroupByPayload<T extends ArchivedMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArchivedMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArchivedMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArchivedMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ArchivedMessageGroupByOutputType[P]>
        }
      >
    >


  export type ArchivedMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    authorId?: boolean
    content?: boolean
    createdAt?: boolean
    deleted?: boolean
    edited?: boolean
    external?: boolean
    id?: boolean
    ticketId?: boolean
    author?: boolean | ArchivedUserDefaultArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["archivedMessage"]>


  export type ArchivedMessageSelectScalar = {
    authorId?: boolean
    content?: boolean
    createdAt?: boolean
    deleted?: boolean
    edited?: boolean
    external?: boolean
    id?: boolean
    ticketId?: boolean
  }

  export type ArchivedMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | ArchivedUserDefaultArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }

  export type $ArchivedMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ArchivedMessage"
    objects: {
      author: Prisma.$ArchivedUserPayload<ExtArgs>
      ticket: Prisma.$TicketPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      authorId: string
      content: string
      createdAt: Date
      deleted: boolean
      edited: boolean
      external: boolean
      id: string
      ticketId: string
    }, ExtArgs["result"]["archivedMessage"]>
    composites: {}
  }

  type ArchivedMessageGetPayload<S extends boolean | null | undefined | ArchivedMessageDefaultArgs> = $Result.GetResult<Prisma.$ArchivedMessagePayload, S>

  type ArchivedMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ArchivedMessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ArchivedMessageCountAggregateInputType | true
    }

  export interface ArchivedMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ArchivedMessage'], meta: { name: 'ArchivedMessage' } }
    /**
     * Find zero or one ArchivedMessage that matches the filter.
     * @param {ArchivedMessageFindUniqueArgs} args - Arguments to find a ArchivedMessage
     * @example
     * // Get one ArchivedMessage
     * const archivedMessage = await prisma.archivedMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArchivedMessageFindUniqueArgs>(args: SelectSubset<T, ArchivedMessageFindUniqueArgs<ExtArgs>>): Prisma__ArchivedMessageClient<$Result.GetResult<Prisma.$ArchivedMessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ArchivedMessage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ArchivedMessageFindUniqueOrThrowArgs} args - Arguments to find a ArchivedMessage
     * @example
     * // Get one ArchivedMessage
     * const archivedMessage = await prisma.archivedMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArchivedMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, ArchivedMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArchivedMessageClient<$Result.GetResult<Prisma.$ArchivedMessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ArchivedMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedMessageFindFirstArgs} args - Arguments to find a ArchivedMessage
     * @example
     * // Get one ArchivedMessage
     * const archivedMessage = await prisma.archivedMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArchivedMessageFindFirstArgs>(args?: SelectSubset<T, ArchivedMessageFindFirstArgs<ExtArgs>>): Prisma__ArchivedMessageClient<$Result.GetResult<Prisma.$ArchivedMessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ArchivedMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedMessageFindFirstOrThrowArgs} args - Arguments to find a ArchivedMessage
     * @example
     * // Get one ArchivedMessage
     * const archivedMessage = await prisma.archivedMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArchivedMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, ArchivedMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArchivedMessageClient<$Result.GetResult<Prisma.$ArchivedMessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ArchivedMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArchivedMessages
     * const archivedMessages = await prisma.archivedMessage.findMany()
     * 
     * // Get first 10 ArchivedMessages
     * const archivedMessages = await prisma.archivedMessage.findMany({ take: 10 })
     * 
     * // Only select the `authorId`
     * const archivedMessageWithAuthorIdOnly = await prisma.archivedMessage.findMany({ select: { authorId: true } })
     * 
     */
    findMany<T extends ArchivedMessageFindManyArgs>(args?: SelectSubset<T, ArchivedMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchivedMessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ArchivedMessage.
     * @param {ArchivedMessageCreateArgs} args - Arguments to create a ArchivedMessage.
     * @example
     * // Create one ArchivedMessage
     * const ArchivedMessage = await prisma.archivedMessage.create({
     *   data: {
     *     // ... data to create a ArchivedMessage
     *   }
     * })
     * 
     */
    create<T extends ArchivedMessageCreateArgs>(args: SelectSubset<T, ArchivedMessageCreateArgs<ExtArgs>>): Prisma__ArchivedMessageClient<$Result.GetResult<Prisma.$ArchivedMessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ArchivedMessages.
     * @param {ArchivedMessageCreateManyArgs} args - Arguments to create many ArchivedMessages.
     * @example
     * // Create many ArchivedMessages
     * const archivedMessage = await prisma.archivedMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArchivedMessageCreateManyArgs>(args?: SelectSubset<T, ArchivedMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ArchivedMessage.
     * @param {ArchivedMessageDeleteArgs} args - Arguments to delete one ArchivedMessage.
     * @example
     * // Delete one ArchivedMessage
     * const ArchivedMessage = await prisma.archivedMessage.delete({
     *   where: {
     *     // ... filter to delete one ArchivedMessage
     *   }
     * })
     * 
     */
    delete<T extends ArchivedMessageDeleteArgs>(args: SelectSubset<T, ArchivedMessageDeleteArgs<ExtArgs>>): Prisma__ArchivedMessageClient<$Result.GetResult<Prisma.$ArchivedMessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ArchivedMessage.
     * @param {ArchivedMessageUpdateArgs} args - Arguments to update one ArchivedMessage.
     * @example
     * // Update one ArchivedMessage
     * const archivedMessage = await prisma.archivedMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArchivedMessageUpdateArgs>(args: SelectSubset<T, ArchivedMessageUpdateArgs<ExtArgs>>): Prisma__ArchivedMessageClient<$Result.GetResult<Prisma.$ArchivedMessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ArchivedMessages.
     * @param {ArchivedMessageDeleteManyArgs} args - Arguments to filter ArchivedMessages to delete.
     * @example
     * // Delete a few ArchivedMessages
     * const { count } = await prisma.archivedMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArchivedMessageDeleteManyArgs>(args?: SelectSubset<T, ArchivedMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArchivedMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArchivedMessages
     * const archivedMessage = await prisma.archivedMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArchivedMessageUpdateManyArgs>(args: SelectSubset<T, ArchivedMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ArchivedMessage.
     * @param {ArchivedMessageUpsertArgs} args - Arguments to update or create a ArchivedMessage.
     * @example
     * // Update or create a ArchivedMessage
     * const archivedMessage = await prisma.archivedMessage.upsert({
     *   create: {
     *     // ... data to create a ArchivedMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArchivedMessage we want to update
     *   }
     * })
     */
    upsert<T extends ArchivedMessageUpsertArgs>(args: SelectSubset<T, ArchivedMessageUpsertArgs<ExtArgs>>): Prisma__ArchivedMessageClient<$Result.GetResult<Prisma.$ArchivedMessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ArchivedMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedMessageCountArgs} args - Arguments to filter ArchivedMessages to count.
     * @example
     * // Count the number of ArchivedMessages
     * const count = await prisma.archivedMessage.count({
     *   where: {
     *     // ... the filter for the ArchivedMessages we want to count
     *   }
     * })
    **/
    count<T extends ArchivedMessageCountArgs>(
      args?: Subset<T, ArchivedMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArchivedMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArchivedMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArchivedMessageAggregateArgs>(args: Subset<T, ArchivedMessageAggregateArgs>): Prisma.PrismaPromise<GetArchivedMessageAggregateType<T>>

    /**
     * Group by ArchivedMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArchivedMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArchivedMessageGroupByArgs['orderBy'] }
        : { orderBy?: ArchivedMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArchivedMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArchivedMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ArchivedMessage model
   */
  readonly fields: ArchivedMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ArchivedMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArchivedMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends ArchivedUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ArchivedUserDefaultArgs<ExtArgs>>): Prisma__ArchivedUserClient<$Result.GetResult<Prisma.$ArchivedUserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    ticket<T extends TicketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketDefaultArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ArchivedMessage model
   */ 
  interface ArchivedMessageFieldRefs {
    readonly authorId: FieldRef<"ArchivedMessage", 'String'>
    readonly content: FieldRef<"ArchivedMessage", 'String'>
    readonly createdAt: FieldRef<"ArchivedMessage", 'DateTime'>
    readonly deleted: FieldRef<"ArchivedMessage", 'Boolean'>
    readonly edited: FieldRef<"ArchivedMessage", 'Boolean'>
    readonly external: FieldRef<"ArchivedMessage", 'Boolean'>
    readonly id: FieldRef<"ArchivedMessage", 'String'>
    readonly ticketId: FieldRef<"ArchivedMessage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ArchivedMessage findUnique
   */
  export type ArchivedMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedMessage
     */
    select?: ArchivedMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedMessageInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedMessage to fetch.
     */
    where: ArchivedMessageWhereUniqueInput
  }

  /**
   * ArchivedMessage findUniqueOrThrow
   */
  export type ArchivedMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedMessage
     */
    select?: ArchivedMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedMessageInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedMessage to fetch.
     */
    where: ArchivedMessageWhereUniqueInput
  }

  /**
   * ArchivedMessage findFirst
   */
  export type ArchivedMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedMessage
     */
    select?: ArchivedMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedMessageInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedMessage to fetch.
     */
    where?: ArchivedMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedMessages to fetch.
     */
    orderBy?: ArchivedMessageOrderByWithRelationInput | ArchivedMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArchivedMessages.
     */
    cursor?: ArchivedMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArchivedMessages.
     */
    distinct?: ArchivedMessageScalarFieldEnum | ArchivedMessageScalarFieldEnum[]
  }

  /**
   * ArchivedMessage findFirstOrThrow
   */
  export type ArchivedMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedMessage
     */
    select?: ArchivedMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedMessageInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedMessage to fetch.
     */
    where?: ArchivedMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedMessages to fetch.
     */
    orderBy?: ArchivedMessageOrderByWithRelationInput | ArchivedMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArchivedMessages.
     */
    cursor?: ArchivedMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArchivedMessages.
     */
    distinct?: ArchivedMessageScalarFieldEnum | ArchivedMessageScalarFieldEnum[]
  }

  /**
   * ArchivedMessage findMany
   */
  export type ArchivedMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedMessage
     */
    select?: ArchivedMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedMessageInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedMessages to fetch.
     */
    where?: ArchivedMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedMessages to fetch.
     */
    orderBy?: ArchivedMessageOrderByWithRelationInput | ArchivedMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ArchivedMessages.
     */
    cursor?: ArchivedMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedMessages.
     */
    skip?: number
    distinct?: ArchivedMessageScalarFieldEnum | ArchivedMessageScalarFieldEnum[]
  }

  /**
   * ArchivedMessage create
   */
  export type ArchivedMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedMessage
     */
    select?: ArchivedMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a ArchivedMessage.
     */
    data: XOR<ArchivedMessageCreateInput, ArchivedMessageUncheckedCreateInput>
  }

  /**
   * ArchivedMessage createMany
   */
  export type ArchivedMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ArchivedMessages.
     */
    data: ArchivedMessageCreateManyInput | ArchivedMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ArchivedMessage update
   */
  export type ArchivedMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedMessage
     */
    select?: ArchivedMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a ArchivedMessage.
     */
    data: XOR<ArchivedMessageUpdateInput, ArchivedMessageUncheckedUpdateInput>
    /**
     * Choose, which ArchivedMessage to update.
     */
    where: ArchivedMessageWhereUniqueInput
  }

  /**
   * ArchivedMessage updateMany
   */
  export type ArchivedMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ArchivedMessages.
     */
    data: XOR<ArchivedMessageUpdateManyMutationInput, ArchivedMessageUncheckedUpdateManyInput>
    /**
     * Filter which ArchivedMessages to update
     */
    where?: ArchivedMessageWhereInput
  }

  /**
   * ArchivedMessage upsert
   */
  export type ArchivedMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedMessage
     */
    select?: ArchivedMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the ArchivedMessage to update in case it exists.
     */
    where: ArchivedMessageWhereUniqueInput
    /**
     * In case the ArchivedMessage found by the `where` argument doesn't exist, create a new ArchivedMessage with this data.
     */
    create: XOR<ArchivedMessageCreateInput, ArchivedMessageUncheckedCreateInput>
    /**
     * In case the ArchivedMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArchivedMessageUpdateInput, ArchivedMessageUncheckedUpdateInput>
  }

  /**
   * ArchivedMessage delete
   */
  export type ArchivedMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedMessage
     */
    select?: ArchivedMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedMessageInclude<ExtArgs> | null
    /**
     * Filter which ArchivedMessage to delete.
     */
    where: ArchivedMessageWhereUniqueInput
  }

  /**
   * ArchivedMessage deleteMany
   */
  export type ArchivedMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArchivedMessages to delete
     */
    where?: ArchivedMessageWhereInput
  }

  /**
   * ArchivedMessage without action
   */
  export type ArchivedMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedMessage
     */
    select?: ArchivedMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedMessageInclude<ExtArgs> | null
  }


  /**
   * Model ArchivedRole
   */

  export type AggregateArchivedRole = {
    _count: ArchivedRoleCountAggregateOutputType | null
    _min: ArchivedRoleMinAggregateOutputType | null
    _max: ArchivedRoleMaxAggregateOutputType | null
  }

  export type ArchivedRoleMinAggregateOutputType = {
    colour: string | null
    createdAt: Date | null
    name: string | null
    roleId: string | null
    ticketId: string | null
  }

  export type ArchivedRoleMaxAggregateOutputType = {
    colour: string | null
    createdAt: Date | null
    name: string | null
    roleId: string | null
    ticketId: string | null
  }

  export type ArchivedRoleCountAggregateOutputType = {
    colour: number
    createdAt: number
    name: number
    roleId: number
    ticketId: number
    _all: number
  }


  export type ArchivedRoleMinAggregateInputType = {
    colour?: true
    createdAt?: true
    name?: true
    roleId?: true
    ticketId?: true
  }

  export type ArchivedRoleMaxAggregateInputType = {
    colour?: true
    createdAt?: true
    name?: true
    roleId?: true
    ticketId?: true
  }

  export type ArchivedRoleCountAggregateInputType = {
    colour?: true
    createdAt?: true
    name?: true
    roleId?: true
    ticketId?: true
    _all?: true
  }

  export type ArchivedRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArchivedRole to aggregate.
     */
    where?: ArchivedRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedRoles to fetch.
     */
    orderBy?: ArchivedRoleOrderByWithRelationInput | ArchivedRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArchivedRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ArchivedRoles
    **/
    _count?: true | ArchivedRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArchivedRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArchivedRoleMaxAggregateInputType
  }

  export type GetArchivedRoleAggregateType<T extends ArchivedRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateArchivedRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArchivedRole[P]>
      : GetScalarType<T[P], AggregateArchivedRole[P]>
  }




  export type ArchivedRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArchivedRoleWhereInput
    orderBy?: ArchivedRoleOrderByWithAggregationInput | ArchivedRoleOrderByWithAggregationInput[]
    by: ArchivedRoleScalarFieldEnum[] | ArchivedRoleScalarFieldEnum
    having?: ArchivedRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArchivedRoleCountAggregateInputType | true
    _min?: ArchivedRoleMinAggregateInputType
    _max?: ArchivedRoleMaxAggregateInputType
  }

  export type ArchivedRoleGroupByOutputType = {
    colour: string
    createdAt: Date
    name: string
    roleId: string
    ticketId: string
    _count: ArchivedRoleCountAggregateOutputType | null
    _min: ArchivedRoleMinAggregateOutputType | null
    _max: ArchivedRoleMaxAggregateOutputType | null
  }

  type GetArchivedRoleGroupByPayload<T extends ArchivedRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArchivedRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArchivedRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArchivedRoleGroupByOutputType[P]>
            : GetScalarType<T[P], ArchivedRoleGroupByOutputType[P]>
        }
      >
    >


  export type ArchivedRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    colour?: boolean
    createdAt?: boolean
    name?: boolean
    roleId?: boolean
    ticketId?: boolean
    archivedUsers?: boolean | ArchivedRole$archivedUsersArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    _count?: boolean | ArchivedRoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["archivedRole"]>


  export type ArchivedRoleSelectScalar = {
    colour?: boolean
    createdAt?: boolean
    name?: boolean
    roleId?: boolean
    ticketId?: boolean
  }

  export type ArchivedRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    archivedUsers?: boolean | ArchivedRole$archivedUsersArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    _count?: boolean | ArchivedRoleCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ArchivedRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ArchivedRole"
    objects: {
      archivedUsers: Prisma.$ArchivedUserPayload<ExtArgs>[]
      ticket: Prisma.$TicketPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      colour: string
      createdAt: Date
      name: string
      roleId: string
      ticketId: string
    }, ExtArgs["result"]["archivedRole"]>
    composites: {}
  }

  type ArchivedRoleGetPayload<S extends boolean | null | undefined | ArchivedRoleDefaultArgs> = $Result.GetResult<Prisma.$ArchivedRolePayload, S>

  type ArchivedRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ArchivedRoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ArchivedRoleCountAggregateInputType | true
    }

  export interface ArchivedRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ArchivedRole'], meta: { name: 'ArchivedRole' } }
    /**
     * Find zero or one ArchivedRole that matches the filter.
     * @param {ArchivedRoleFindUniqueArgs} args - Arguments to find a ArchivedRole
     * @example
     * // Get one ArchivedRole
     * const archivedRole = await prisma.archivedRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArchivedRoleFindUniqueArgs>(args: SelectSubset<T, ArchivedRoleFindUniqueArgs<ExtArgs>>): Prisma__ArchivedRoleClient<$Result.GetResult<Prisma.$ArchivedRolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ArchivedRole that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ArchivedRoleFindUniqueOrThrowArgs} args - Arguments to find a ArchivedRole
     * @example
     * // Get one ArchivedRole
     * const archivedRole = await prisma.archivedRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArchivedRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, ArchivedRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArchivedRoleClient<$Result.GetResult<Prisma.$ArchivedRolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ArchivedRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedRoleFindFirstArgs} args - Arguments to find a ArchivedRole
     * @example
     * // Get one ArchivedRole
     * const archivedRole = await prisma.archivedRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArchivedRoleFindFirstArgs>(args?: SelectSubset<T, ArchivedRoleFindFirstArgs<ExtArgs>>): Prisma__ArchivedRoleClient<$Result.GetResult<Prisma.$ArchivedRolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ArchivedRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedRoleFindFirstOrThrowArgs} args - Arguments to find a ArchivedRole
     * @example
     * // Get one ArchivedRole
     * const archivedRole = await prisma.archivedRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArchivedRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, ArchivedRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArchivedRoleClient<$Result.GetResult<Prisma.$ArchivedRolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ArchivedRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArchivedRoles
     * const archivedRoles = await prisma.archivedRole.findMany()
     * 
     * // Get first 10 ArchivedRoles
     * const archivedRoles = await prisma.archivedRole.findMany({ take: 10 })
     * 
     * // Only select the `colour`
     * const archivedRoleWithColourOnly = await prisma.archivedRole.findMany({ select: { colour: true } })
     * 
     */
    findMany<T extends ArchivedRoleFindManyArgs>(args?: SelectSubset<T, ArchivedRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchivedRolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ArchivedRole.
     * @param {ArchivedRoleCreateArgs} args - Arguments to create a ArchivedRole.
     * @example
     * // Create one ArchivedRole
     * const ArchivedRole = await prisma.archivedRole.create({
     *   data: {
     *     // ... data to create a ArchivedRole
     *   }
     * })
     * 
     */
    create<T extends ArchivedRoleCreateArgs>(args: SelectSubset<T, ArchivedRoleCreateArgs<ExtArgs>>): Prisma__ArchivedRoleClient<$Result.GetResult<Prisma.$ArchivedRolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ArchivedRoles.
     * @param {ArchivedRoleCreateManyArgs} args - Arguments to create many ArchivedRoles.
     * @example
     * // Create many ArchivedRoles
     * const archivedRole = await prisma.archivedRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArchivedRoleCreateManyArgs>(args?: SelectSubset<T, ArchivedRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ArchivedRole.
     * @param {ArchivedRoleDeleteArgs} args - Arguments to delete one ArchivedRole.
     * @example
     * // Delete one ArchivedRole
     * const ArchivedRole = await prisma.archivedRole.delete({
     *   where: {
     *     // ... filter to delete one ArchivedRole
     *   }
     * })
     * 
     */
    delete<T extends ArchivedRoleDeleteArgs>(args: SelectSubset<T, ArchivedRoleDeleteArgs<ExtArgs>>): Prisma__ArchivedRoleClient<$Result.GetResult<Prisma.$ArchivedRolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ArchivedRole.
     * @param {ArchivedRoleUpdateArgs} args - Arguments to update one ArchivedRole.
     * @example
     * // Update one ArchivedRole
     * const archivedRole = await prisma.archivedRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArchivedRoleUpdateArgs>(args: SelectSubset<T, ArchivedRoleUpdateArgs<ExtArgs>>): Prisma__ArchivedRoleClient<$Result.GetResult<Prisma.$ArchivedRolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ArchivedRoles.
     * @param {ArchivedRoleDeleteManyArgs} args - Arguments to filter ArchivedRoles to delete.
     * @example
     * // Delete a few ArchivedRoles
     * const { count } = await prisma.archivedRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArchivedRoleDeleteManyArgs>(args?: SelectSubset<T, ArchivedRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArchivedRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArchivedRoles
     * const archivedRole = await prisma.archivedRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArchivedRoleUpdateManyArgs>(args: SelectSubset<T, ArchivedRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ArchivedRole.
     * @param {ArchivedRoleUpsertArgs} args - Arguments to update or create a ArchivedRole.
     * @example
     * // Update or create a ArchivedRole
     * const archivedRole = await prisma.archivedRole.upsert({
     *   create: {
     *     // ... data to create a ArchivedRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArchivedRole we want to update
     *   }
     * })
     */
    upsert<T extends ArchivedRoleUpsertArgs>(args: SelectSubset<T, ArchivedRoleUpsertArgs<ExtArgs>>): Prisma__ArchivedRoleClient<$Result.GetResult<Prisma.$ArchivedRolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ArchivedRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedRoleCountArgs} args - Arguments to filter ArchivedRoles to count.
     * @example
     * // Count the number of ArchivedRoles
     * const count = await prisma.archivedRole.count({
     *   where: {
     *     // ... the filter for the ArchivedRoles we want to count
     *   }
     * })
    **/
    count<T extends ArchivedRoleCountArgs>(
      args?: Subset<T, ArchivedRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArchivedRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArchivedRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArchivedRoleAggregateArgs>(args: Subset<T, ArchivedRoleAggregateArgs>): Prisma.PrismaPromise<GetArchivedRoleAggregateType<T>>

    /**
     * Group by ArchivedRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArchivedRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArchivedRoleGroupByArgs['orderBy'] }
        : { orderBy?: ArchivedRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArchivedRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArchivedRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ArchivedRole model
   */
  readonly fields: ArchivedRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ArchivedRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArchivedRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    archivedUsers<T extends ArchivedRole$archivedUsersArgs<ExtArgs> = {}>(args?: Subset<T, ArchivedRole$archivedUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchivedUserPayload<ExtArgs>, T, "findMany"> | Null>
    ticket<T extends TicketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketDefaultArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ArchivedRole model
   */ 
  interface ArchivedRoleFieldRefs {
    readonly colour: FieldRef<"ArchivedRole", 'String'>
    readonly createdAt: FieldRef<"ArchivedRole", 'DateTime'>
    readonly name: FieldRef<"ArchivedRole", 'String'>
    readonly roleId: FieldRef<"ArchivedRole", 'String'>
    readonly ticketId: FieldRef<"ArchivedRole", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ArchivedRole findUnique
   */
  export type ArchivedRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedRole
     */
    select?: ArchivedRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedRoleInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedRole to fetch.
     */
    where: ArchivedRoleWhereUniqueInput
  }

  /**
   * ArchivedRole findUniqueOrThrow
   */
  export type ArchivedRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedRole
     */
    select?: ArchivedRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedRoleInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedRole to fetch.
     */
    where: ArchivedRoleWhereUniqueInput
  }

  /**
   * ArchivedRole findFirst
   */
  export type ArchivedRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedRole
     */
    select?: ArchivedRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedRoleInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedRole to fetch.
     */
    where?: ArchivedRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedRoles to fetch.
     */
    orderBy?: ArchivedRoleOrderByWithRelationInput | ArchivedRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArchivedRoles.
     */
    cursor?: ArchivedRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArchivedRoles.
     */
    distinct?: ArchivedRoleScalarFieldEnum | ArchivedRoleScalarFieldEnum[]
  }

  /**
   * ArchivedRole findFirstOrThrow
   */
  export type ArchivedRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedRole
     */
    select?: ArchivedRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedRoleInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedRole to fetch.
     */
    where?: ArchivedRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedRoles to fetch.
     */
    orderBy?: ArchivedRoleOrderByWithRelationInput | ArchivedRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArchivedRoles.
     */
    cursor?: ArchivedRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArchivedRoles.
     */
    distinct?: ArchivedRoleScalarFieldEnum | ArchivedRoleScalarFieldEnum[]
  }

  /**
   * ArchivedRole findMany
   */
  export type ArchivedRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedRole
     */
    select?: ArchivedRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedRoleInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedRoles to fetch.
     */
    where?: ArchivedRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedRoles to fetch.
     */
    orderBy?: ArchivedRoleOrderByWithRelationInput | ArchivedRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ArchivedRoles.
     */
    cursor?: ArchivedRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedRoles.
     */
    skip?: number
    distinct?: ArchivedRoleScalarFieldEnum | ArchivedRoleScalarFieldEnum[]
  }

  /**
   * ArchivedRole create
   */
  export type ArchivedRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedRole
     */
    select?: ArchivedRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a ArchivedRole.
     */
    data: XOR<ArchivedRoleCreateInput, ArchivedRoleUncheckedCreateInput>
  }

  /**
   * ArchivedRole createMany
   */
  export type ArchivedRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ArchivedRoles.
     */
    data: ArchivedRoleCreateManyInput | ArchivedRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ArchivedRole update
   */
  export type ArchivedRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedRole
     */
    select?: ArchivedRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a ArchivedRole.
     */
    data: XOR<ArchivedRoleUpdateInput, ArchivedRoleUncheckedUpdateInput>
    /**
     * Choose, which ArchivedRole to update.
     */
    where: ArchivedRoleWhereUniqueInput
  }

  /**
   * ArchivedRole updateMany
   */
  export type ArchivedRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ArchivedRoles.
     */
    data: XOR<ArchivedRoleUpdateManyMutationInput, ArchivedRoleUncheckedUpdateManyInput>
    /**
     * Filter which ArchivedRoles to update
     */
    where?: ArchivedRoleWhereInput
  }

  /**
   * ArchivedRole upsert
   */
  export type ArchivedRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedRole
     */
    select?: ArchivedRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the ArchivedRole to update in case it exists.
     */
    where: ArchivedRoleWhereUniqueInput
    /**
     * In case the ArchivedRole found by the `where` argument doesn't exist, create a new ArchivedRole with this data.
     */
    create: XOR<ArchivedRoleCreateInput, ArchivedRoleUncheckedCreateInput>
    /**
     * In case the ArchivedRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArchivedRoleUpdateInput, ArchivedRoleUncheckedUpdateInput>
  }

  /**
   * ArchivedRole delete
   */
  export type ArchivedRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedRole
     */
    select?: ArchivedRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedRoleInclude<ExtArgs> | null
    /**
     * Filter which ArchivedRole to delete.
     */
    where: ArchivedRoleWhereUniqueInput
  }

  /**
   * ArchivedRole deleteMany
   */
  export type ArchivedRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArchivedRoles to delete
     */
    where?: ArchivedRoleWhereInput
  }

  /**
   * ArchivedRole.archivedUsers
   */
  export type ArchivedRole$archivedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedUser
     */
    select?: ArchivedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedUserInclude<ExtArgs> | null
    where?: ArchivedUserWhereInput
    orderBy?: ArchivedUserOrderByWithRelationInput | ArchivedUserOrderByWithRelationInput[]
    cursor?: ArchivedUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArchivedUserScalarFieldEnum | ArchivedUserScalarFieldEnum[]
  }

  /**
   * ArchivedRole without action
   */
  export type ArchivedRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedRole
     */
    select?: ArchivedRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedRoleInclude<ExtArgs> | null
  }


  /**
   * Model ArchivedUser
   */

  export type AggregateArchivedUser = {
    _count: ArchivedUserCountAggregateOutputType | null
    _min: ArchivedUserMinAggregateOutputType | null
    _max: ArchivedUserMaxAggregateOutputType | null
  }

  export type ArchivedUserMinAggregateOutputType = {
    avatar: string | null
    bot: boolean | null
    createdAt: Date | null
    discriminator: string | null
    displayName: string | null
    roleId: string | null
    ticketId: string | null
    userId: string | null
    username: string | null
  }

  export type ArchivedUserMaxAggregateOutputType = {
    avatar: string | null
    bot: boolean | null
    createdAt: Date | null
    discriminator: string | null
    displayName: string | null
    roleId: string | null
    ticketId: string | null
    userId: string | null
    username: string | null
  }

  export type ArchivedUserCountAggregateOutputType = {
    avatar: number
    bot: number
    createdAt: number
    discriminator: number
    displayName: number
    roleId: number
    ticketId: number
    userId: number
    username: number
    _all: number
  }


  export type ArchivedUserMinAggregateInputType = {
    avatar?: true
    bot?: true
    createdAt?: true
    discriminator?: true
    displayName?: true
    roleId?: true
    ticketId?: true
    userId?: true
    username?: true
  }

  export type ArchivedUserMaxAggregateInputType = {
    avatar?: true
    bot?: true
    createdAt?: true
    discriminator?: true
    displayName?: true
    roleId?: true
    ticketId?: true
    userId?: true
    username?: true
  }

  export type ArchivedUserCountAggregateInputType = {
    avatar?: true
    bot?: true
    createdAt?: true
    discriminator?: true
    displayName?: true
    roleId?: true
    ticketId?: true
    userId?: true
    username?: true
    _all?: true
  }

  export type ArchivedUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArchivedUser to aggregate.
     */
    where?: ArchivedUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedUsers to fetch.
     */
    orderBy?: ArchivedUserOrderByWithRelationInput | ArchivedUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArchivedUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ArchivedUsers
    **/
    _count?: true | ArchivedUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArchivedUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArchivedUserMaxAggregateInputType
  }

  export type GetArchivedUserAggregateType<T extends ArchivedUserAggregateArgs> = {
        [P in keyof T & keyof AggregateArchivedUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArchivedUser[P]>
      : GetScalarType<T[P], AggregateArchivedUser[P]>
  }




  export type ArchivedUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArchivedUserWhereInput
    orderBy?: ArchivedUserOrderByWithAggregationInput | ArchivedUserOrderByWithAggregationInput[]
    by: ArchivedUserScalarFieldEnum[] | ArchivedUserScalarFieldEnum
    having?: ArchivedUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArchivedUserCountAggregateInputType | true
    _min?: ArchivedUserMinAggregateInputType
    _max?: ArchivedUserMaxAggregateInputType
  }

  export type ArchivedUserGroupByOutputType = {
    avatar: string | null
    bot: boolean
    createdAt: Date
    discriminator: string | null
    displayName: string | null
    roleId: string | null
    ticketId: string
    userId: string
    username: string | null
    _count: ArchivedUserCountAggregateOutputType | null
    _min: ArchivedUserMinAggregateOutputType | null
    _max: ArchivedUserMaxAggregateOutputType | null
  }

  type GetArchivedUserGroupByPayload<T extends ArchivedUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArchivedUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArchivedUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArchivedUserGroupByOutputType[P]>
            : GetScalarType<T[P], ArchivedUserGroupByOutputType[P]>
        }
      >
    >


  export type ArchivedUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    avatar?: boolean
    bot?: boolean
    createdAt?: boolean
    discriminator?: boolean
    displayName?: boolean
    roleId?: boolean
    ticketId?: boolean
    userId?: boolean
    username?: boolean
    archivedMessages?: boolean | ArchivedUser$archivedMessagesArgs<ExtArgs>
    role?: boolean | ArchivedUser$roleArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    _count?: boolean | ArchivedUserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["archivedUser"]>


  export type ArchivedUserSelectScalar = {
    avatar?: boolean
    bot?: boolean
    createdAt?: boolean
    discriminator?: boolean
    displayName?: boolean
    roleId?: boolean
    ticketId?: boolean
    userId?: boolean
    username?: boolean
  }

  export type ArchivedUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    archivedMessages?: boolean | ArchivedUser$archivedMessagesArgs<ExtArgs>
    role?: boolean | ArchivedUser$roleArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    _count?: boolean | ArchivedUserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ArchivedUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ArchivedUser"
    objects: {
      archivedMessages: Prisma.$ArchivedMessagePayload<ExtArgs>[]
      role: Prisma.$ArchivedRolePayload<ExtArgs> | null
      ticket: Prisma.$TicketPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      avatar: string | null
      bot: boolean
      createdAt: Date
      discriminator: string | null
      displayName: string | null
      roleId: string | null
      ticketId: string
      userId: string
      username: string | null
    }, ExtArgs["result"]["archivedUser"]>
    composites: {}
  }

  type ArchivedUserGetPayload<S extends boolean | null | undefined | ArchivedUserDefaultArgs> = $Result.GetResult<Prisma.$ArchivedUserPayload, S>

  type ArchivedUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ArchivedUserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ArchivedUserCountAggregateInputType | true
    }

  export interface ArchivedUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ArchivedUser'], meta: { name: 'ArchivedUser' } }
    /**
     * Find zero or one ArchivedUser that matches the filter.
     * @param {ArchivedUserFindUniqueArgs} args - Arguments to find a ArchivedUser
     * @example
     * // Get one ArchivedUser
     * const archivedUser = await prisma.archivedUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArchivedUserFindUniqueArgs>(args: SelectSubset<T, ArchivedUserFindUniqueArgs<ExtArgs>>): Prisma__ArchivedUserClient<$Result.GetResult<Prisma.$ArchivedUserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ArchivedUser that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ArchivedUserFindUniqueOrThrowArgs} args - Arguments to find a ArchivedUser
     * @example
     * // Get one ArchivedUser
     * const archivedUser = await prisma.archivedUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArchivedUserFindUniqueOrThrowArgs>(args: SelectSubset<T, ArchivedUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArchivedUserClient<$Result.GetResult<Prisma.$ArchivedUserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ArchivedUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedUserFindFirstArgs} args - Arguments to find a ArchivedUser
     * @example
     * // Get one ArchivedUser
     * const archivedUser = await prisma.archivedUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArchivedUserFindFirstArgs>(args?: SelectSubset<T, ArchivedUserFindFirstArgs<ExtArgs>>): Prisma__ArchivedUserClient<$Result.GetResult<Prisma.$ArchivedUserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ArchivedUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedUserFindFirstOrThrowArgs} args - Arguments to find a ArchivedUser
     * @example
     * // Get one ArchivedUser
     * const archivedUser = await prisma.archivedUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArchivedUserFindFirstOrThrowArgs>(args?: SelectSubset<T, ArchivedUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArchivedUserClient<$Result.GetResult<Prisma.$ArchivedUserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ArchivedUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArchivedUsers
     * const archivedUsers = await prisma.archivedUser.findMany()
     * 
     * // Get first 10 ArchivedUsers
     * const archivedUsers = await prisma.archivedUser.findMany({ take: 10 })
     * 
     * // Only select the `avatar`
     * const archivedUserWithAvatarOnly = await prisma.archivedUser.findMany({ select: { avatar: true } })
     * 
     */
    findMany<T extends ArchivedUserFindManyArgs>(args?: SelectSubset<T, ArchivedUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchivedUserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ArchivedUser.
     * @param {ArchivedUserCreateArgs} args - Arguments to create a ArchivedUser.
     * @example
     * // Create one ArchivedUser
     * const ArchivedUser = await prisma.archivedUser.create({
     *   data: {
     *     // ... data to create a ArchivedUser
     *   }
     * })
     * 
     */
    create<T extends ArchivedUserCreateArgs>(args: SelectSubset<T, ArchivedUserCreateArgs<ExtArgs>>): Prisma__ArchivedUserClient<$Result.GetResult<Prisma.$ArchivedUserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ArchivedUsers.
     * @param {ArchivedUserCreateManyArgs} args - Arguments to create many ArchivedUsers.
     * @example
     * // Create many ArchivedUsers
     * const archivedUser = await prisma.archivedUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArchivedUserCreateManyArgs>(args?: SelectSubset<T, ArchivedUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ArchivedUser.
     * @param {ArchivedUserDeleteArgs} args - Arguments to delete one ArchivedUser.
     * @example
     * // Delete one ArchivedUser
     * const ArchivedUser = await prisma.archivedUser.delete({
     *   where: {
     *     // ... filter to delete one ArchivedUser
     *   }
     * })
     * 
     */
    delete<T extends ArchivedUserDeleteArgs>(args: SelectSubset<T, ArchivedUserDeleteArgs<ExtArgs>>): Prisma__ArchivedUserClient<$Result.GetResult<Prisma.$ArchivedUserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ArchivedUser.
     * @param {ArchivedUserUpdateArgs} args - Arguments to update one ArchivedUser.
     * @example
     * // Update one ArchivedUser
     * const archivedUser = await prisma.archivedUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArchivedUserUpdateArgs>(args: SelectSubset<T, ArchivedUserUpdateArgs<ExtArgs>>): Prisma__ArchivedUserClient<$Result.GetResult<Prisma.$ArchivedUserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ArchivedUsers.
     * @param {ArchivedUserDeleteManyArgs} args - Arguments to filter ArchivedUsers to delete.
     * @example
     * // Delete a few ArchivedUsers
     * const { count } = await prisma.archivedUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArchivedUserDeleteManyArgs>(args?: SelectSubset<T, ArchivedUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArchivedUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArchivedUsers
     * const archivedUser = await prisma.archivedUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArchivedUserUpdateManyArgs>(args: SelectSubset<T, ArchivedUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ArchivedUser.
     * @param {ArchivedUserUpsertArgs} args - Arguments to update or create a ArchivedUser.
     * @example
     * // Update or create a ArchivedUser
     * const archivedUser = await prisma.archivedUser.upsert({
     *   create: {
     *     // ... data to create a ArchivedUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArchivedUser we want to update
     *   }
     * })
     */
    upsert<T extends ArchivedUserUpsertArgs>(args: SelectSubset<T, ArchivedUserUpsertArgs<ExtArgs>>): Prisma__ArchivedUserClient<$Result.GetResult<Prisma.$ArchivedUserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ArchivedUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedUserCountArgs} args - Arguments to filter ArchivedUsers to count.
     * @example
     * // Count the number of ArchivedUsers
     * const count = await prisma.archivedUser.count({
     *   where: {
     *     // ... the filter for the ArchivedUsers we want to count
     *   }
     * })
    **/
    count<T extends ArchivedUserCountArgs>(
      args?: Subset<T, ArchivedUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArchivedUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArchivedUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArchivedUserAggregateArgs>(args: Subset<T, ArchivedUserAggregateArgs>): Prisma.PrismaPromise<GetArchivedUserAggregateType<T>>

    /**
     * Group by ArchivedUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArchivedUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArchivedUserGroupByArgs['orderBy'] }
        : { orderBy?: ArchivedUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArchivedUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArchivedUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ArchivedUser model
   */
  readonly fields: ArchivedUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ArchivedUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArchivedUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    archivedMessages<T extends ArchivedUser$archivedMessagesArgs<ExtArgs> = {}>(args?: Subset<T, ArchivedUser$archivedMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchivedMessagePayload<ExtArgs>, T, "findMany"> | Null>
    role<T extends ArchivedUser$roleArgs<ExtArgs> = {}>(args?: Subset<T, ArchivedUser$roleArgs<ExtArgs>>): Prisma__ArchivedRoleClient<$Result.GetResult<Prisma.$ArchivedRolePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    ticket<T extends TicketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketDefaultArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ArchivedUser model
   */ 
  interface ArchivedUserFieldRefs {
    readonly avatar: FieldRef<"ArchivedUser", 'String'>
    readonly bot: FieldRef<"ArchivedUser", 'Boolean'>
    readonly createdAt: FieldRef<"ArchivedUser", 'DateTime'>
    readonly discriminator: FieldRef<"ArchivedUser", 'String'>
    readonly displayName: FieldRef<"ArchivedUser", 'String'>
    readonly roleId: FieldRef<"ArchivedUser", 'String'>
    readonly ticketId: FieldRef<"ArchivedUser", 'String'>
    readonly userId: FieldRef<"ArchivedUser", 'String'>
    readonly username: FieldRef<"ArchivedUser", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ArchivedUser findUnique
   */
  export type ArchivedUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedUser
     */
    select?: ArchivedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedUserInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedUser to fetch.
     */
    where: ArchivedUserWhereUniqueInput
  }

  /**
   * ArchivedUser findUniqueOrThrow
   */
  export type ArchivedUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedUser
     */
    select?: ArchivedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedUserInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedUser to fetch.
     */
    where: ArchivedUserWhereUniqueInput
  }

  /**
   * ArchivedUser findFirst
   */
  export type ArchivedUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedUser
     */
    select?: ArchivedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedUserInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedUser to fetch.
     */
    where?: ArchivedUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedUsers to fetch.
     */
    orderBy?: ArchivedUserOrderByWithRelationInput | ArchivedUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArchivedUsers.
     */
    cursor?: ArchivedUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArchivedUsers.
     */
    distinct?: ArchivedUserScalarFieldEnum | ArchivedUserScalarFieldEnum[]
  }

  /**
   * ArchivedUser findFirstOrThrow
   */
  export type ArchivedUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedUser
     */
    select?: ArchivedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedUserInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedUser to fetch.
     */
    where?: ArchivedUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedUsers to fetch.
     */
    orderBy?: ArchivedUserOrderByWithRelationInput | ArchivedUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArchivedUsers.
     */
    cursor?: ArchivedUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArchivedUsers.
     */
    distinct?: ArchivedUserScalarFieldEnum | ArchivedUserScalarFieldEnum[]
  }

  /**
   * ArchivedUser findMany
   */
  export type ArchivedUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedUser
     */
    select?: ArchivedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedUserInclude<ExtArgs> | null
    /**
     * Filter, which ArchivedUsers to fetch.
     */
    where?: ArchivedUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedUsers to fetch.
     */
    orderBy?: ArchivedUserOrderByWithRelationInput | ArchivedUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ArchivedUsers.
     */
    cursor?: ArchivedUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedUsers.
     */
    skip?: number
    distinct?: ArchivedUserScalarFieldEnum | ArchivedUserScalarFieldEnum[]
  }

  /**
   * ArchivedUser create
   */
  export type ArchivedUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedUser
     */
    select?: ArchivedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedUserInclude<ExtArgs> | null
    /**
     * The data needed to create a ArchivedUser.
     */
    data: XOR<ArchivedUserCreateInput, ArchivedUserUncheckedCreateInput>
  }

  /**
   * ArchivedUser createMany
   */
  export type ArchivedUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ArchivedUsers.
     */
    data: ArchivedUserCreateManyInput | ArchivedUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ArchivedUser update
   */
  export type ArchivedUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedUser
     */
    select?: ArchivedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedUserInclude<ExtArgs> | null
    /**
     * The data needed to update a ArchivedUser.
     */
    data: XOR<ArchivedUserUpdateInput, ArchivedUserUncheckedUpdateInput>
    /**
     * Choose, which ArchivedUser to update.
     */
    where: ArchivedUserWhereUniqueInput
  }

  /**
   * ArchivedUser updateMany
   */
  export type ArchivedUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ArchivedUsers.
     */
    data: XOR<ArchivedUserUpdateManyMutationInput, ArchivedUserUncheckedUpdateManyInput>
    /**
     * Filter which ArchivedUsers to update
     */
    where?: ArchivedUserWhereInput
  }

  /**
   * ArchivedUser upsert
   */
  export type ArchivedUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedUser
     */
    select?: ArchivedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedUserInclude<ExtArgs> | null
    /**
     * The filter to search for the ArchivedUser to update in case it exists.
     */
    where: ArchivedUserWhereUniqueInput
    /**
     * In case the ArchivedUser found by the `where` argument doesn't exist, create a new ArchivedUser with this data.
     */
    create: XOR<ArchivedUserCreateInput, ArchivedUserUncheckedCreateInput>
    /**
     * In case the ArchivedUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArchivedUserUpdateInput, ArchivedUserUncheckedUpdateInput>
  }

  /**
   * ArchivedUser delete
   */
  export type ArchivedUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedUser
     */
    select?: ArchivedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedUserInclude<ExtArgs> | null
    /**
     * Filter which ArchivedUser to delete.
     */
    where: ArchivedUserWhereUniqueInput
  }

  /**
   * ArchivedUser deleteMany
   */
  export type ArchivedUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArchivedUsers to delete
     */
    where?: ArchivedUserWhereInput
  }

  /**
   * ArchivedUser.archivedMessages
   */
  export type ArchivedUser$archivedMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedMessage
     */
    select?: ArchivedMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedMessageInclude<ExtArgs> | null
    where?: ArchivedMessageWhereInput
    orderBy?: ArchivedMessageOrderByWithRelationInput | ArchivedMessageOrderByWithRelationInput[]
    cursor?: ArchivedMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArchivedMessageScalarFieldEnum | ArchivedMessageScalarFieldEnum[]
  }

  /**
   * ArchivedUser.role
   */
  export type ArchivedUser$roleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedRole
     */
    select?: ArchivedRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedRoleInclude<ExtArgs> | null
    where?: ArchivedRoleWhereInput
  }

  /**
   * ArchivedUser without action
   */
  export type ArchivedUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedUser
     */
    select?: ArchivedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedUserInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    cooldown: number | null
    id: number | null
    memberLimit: number | null
    ratelimit: number | null
    totalLimit: number | null
  }

  export type CategorySumAggregateOutputType = {
    cooldown: number | null
    id: number | null
    memberLimit: number | null
    ratelimit: number | null
    totalLimit: number | null
  }

  export type CategoryMinAggregateOutputType = {
    channelName: string | null
    claiming: boolean | null
    createdAt: Date | null
    cooldown: number | null
    customTopic: string | null
    description: string | null
    discordCategory: string | null
    emoji: string | null
    enableFeedback: boolean | null
    guildId: string | null
    id: number | null
    image: string | null
    memberLimit: number | null
    name: string | null
    openingMessage: string | null
    ratelimit: number | null
    requireTopic: boolean | null
    totalLimit: number | null
  }

  export type CategoryMaxAggregateOutputType = {
    channelName: string | null
    claiming: boolean | null
    createdAt: Date | null
    cooldown: number | null
    customTopic: string | null
    description: string | null
    discordCategory: string | null
    emoji: string | null
    enableFeedback: boolean | null
    guildId: string | null
    id: number | null
    image: string | null
    memberLimit: number | null
    name: string | null
    openingMessage: string | null
    ratelimit: number | null
    requireTopic: boolean | null
    totalLimit: number | null
  }

  export type CategoryCountAggregateOutputType = {
    channelName: number
    claiming: number
    createdAt: number
    cooldown: number
    customTopic: number
    description: number
    discordCategory: number
    emoji: number
    enableFeedback: number
    guildId: number
    id: number
    image: number
    memberLimit: number
    name: number
    openingMessage: number
    pingRoles: number
    ratelimit: number
    requiredRoles: number
    requireTopic: number
    staffRoles: number
    totalLimit: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    cooldown?: true
    id?: true
    memberLimit?: true
    ratelimit?: true
    totalLimit?: true
  }

  export type CategorySumAggregateInputType = {
    cooldown?: true
    id?: true
    memberLimit?: true
    ratelimit?: true
    totalLimit?: true
  }

  export type CategoryMinAggregateInputType = {
    channelName?: true
    claiming?: true
    createdAt?: true
    cooldown?: true
    customTopic?: true
    description?: true
    discordCategory?: true
    emoji?: true
    enableFeedback?: true
    guildId?: true
    id?: true
    image?: true
    memberLimit?: true
    name?: true
    openingMessage?: true
    ratelimit?: true
    requireTopic?: true
    totalLimit?: true
  }

  export type CategoryMaxAggregateInputType = {
    channelName?: true
    claiming?: true
    createdAt?: true
    cooldown?: true
    customTopic?: true
    description?: true
    discordCategory?: true
    emoji?: true
    enableFeedback?: true
    guildId?: true
    id?: true
    image?: true
    memberLimit?: true
    name?: true
    openingMessage?: true
    ratelimit?: true
    requireTopic?: true
    totalLimit?: true
  }

  export type CategoryCountAggregateInputType = {
    channelName?: true
    claiming?: true
    createdAt?: true
    cooldown?: true
    customTopic?: true
    description?: true
    discordCategory?: true
    emoji?: true
    enableFeedback?: true
    guildId?: true
    id?: true
    image?: true
    memberLimit?: true
    name?: true
    openingMessage?: true
    pingRoles?: true
    ratelimit?: true
    requiredRoles?: true
    requireTopic?: true
    staffRoles?: true
    totalLimit?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    channelName: string
    claiming: boolean
    createdAt: Date
    cooldown: number | null
    customTopic: string | null
    description: string
    discordCategory: string
    emoji: string
    enableFeedback: boolean
    guildId: string
    id: number
    image: string | null
    memberLimit: number
    name: string
    openingMessage: string
    pingRoles: JsonValue
    ratelimit: number | null
    requiredRoles: JsonValue
    requireTopic: boolean
    staffRoles: JsonValue
    totalLimit: number
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    channelName?: boolean
    claiming?: boolean
    createdAt?: boolean
    cooldown?: boolean
    customTopic?: boolean
    description?: boolean
    discordCategory?: boolean
    emoji?: boolean
    enableFeedback?: boolean
    guildId?: boolean
    id?: boolean
    image?: boolean
    memberLimit?: boolean
    name?: boolean
    openingMessage?: boolean
    pingRoles?: boolean
    ratelimit?: boolean
    requiredRoles?: boolean
    requireTopic?: boolean
    staffRoles?: boolean
    totalLimit?: boolean
    guild?: boolean | GuildDefaultArgs<ExtArgs>
    questions?: boolean | Category$questionsArgs<ExtArgs>
    tickets?: boolean | Category$ticketsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>


  export type CategorySelectScalar = {
    channelName?: boolean
    claiming?: boolean
    createdAt?: boolean
    cooldown?: boolean
    customTopic?: boolean
    description?: boolean
    discordCategory?: boolean
    emoji?: boolean
    enableFeedback?: boolean
    guildId?: boolean
    id?: boolean
    image?: boolean
    memberLimit?: boolean
    name?: boolean
    openingMessage?: boolean
    pingRoles?: boolean
    ratelimit?: boolean
    requiredRoles?: boolean
    requireTopic?: boolean
    staffRoles?: boolean
    totalLimit?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    guild?: boolean | GuildDefaultArgs<ExtArgs>
    questions?: boolean | Category$questionsArgs<ExtArgs>
    tickets?: boolean | Category$ticketsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      guild: Prisma.$GuildPayload<ExtArgs>
      questions: Prisma.$QuestionPayload<ExtArgs>[]
      tickets: Prisma.$TicketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      channelName: string
      claiming: boolean
      createdAt: Date
      cooldown: number | null
      customTopic: string | null
      description: string
      discordCategory: string
      emoji: string
      enableFeedback: boolean
      guildId: string
      id: number
      image: string | null
      memberLimit: number
      name: string
      openingMessage: string
      pingRoles: Prisma.JsonValue
      ratelimit: number | null
      requiredRoles: Prisma.JsonValue
      requireTopic: boolean
      staffRoles: Prisma.JsonValue
      totalLimit: number
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `channelName`
     * const categoryWithChannelNameOnly = await prisma.category.findMany({ select: { channelName: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    guild<T extends GuildDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GuildDefaultArgs<ExtArgs>>): Prisma__GuildClient<$Result.GetResult<Prisma.$GuildPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    questions<T extends Category$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Category$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany"> | Null>
    tickets<T extends Category$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, Category$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly channelName: FieldRef<"Category", 'String'>
    readonly claiming: FieldRef<"Category", 'Boolean'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly cooldown: FieldRef<"Category", 'Int'>
    readonly customTopic: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
    readonly discordCategory: FieldRef<"Category", 'String'>
    readonly emoji: FieldRef<"Category", 'String'>
    readonly enableFeedback: FieldRef<"Category", 'Boolean'>
    readonly guildId: FieldRef<"Category", 'String'>
    readonly id: FieldRef<"Category", 'Int'>
    readonly image: FieldRef<"Category", 'String'>
    readonly memberLimit: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
    readonly openingMessage: FieldRef<"Category", 'String'>
    readonly pingRoles: FieldRef<"Category", 'Json'>
    readonly ratelimit: FieldRef<"Category", 'Int'>
    readonly requiredRoles: FieldRef<"Category", 'Json'>
    readonly requireTopic: FieldRef<"Category", 'Boolean'>
    readonly staffRoles: FieldRef<"Category", 'Json'>
    readonly totalLimit: FieldRef<"Category", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.questions
   */
  export type Category$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Category.tickets
   */
  export type Category$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    cursor?: TicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    rating: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    rating: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    comment: string | null
    createdAt: Date | null
    guildId: string | null
    rating: number | null
    ticketId: string | null
    userId: string | null
  }

  export type FeedbackMaxAggregateOutputType = {
    comment: string | null
    createdAt: Date | null
    guildId: string | null
    rating: number | null
    ticketId: string | null
    userId: string | null
  }

  export type FeedbackCountAggregateOutputType = {
    comment: number
    createdAt: number
    guildId: number
    rating: number
    ticketId: number
    userId: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    rating?: true
  }

  export type FeedbackSumAggregateInputType = {
    rating?: true
  }

  export type FeedbackMinAggregateInputType = {
    comment?: true
    createdAt?: true
    guildId?: true
    rating?: true
    ticketId?: true
    userId?: true
  }

  export type FeedbackMaxAggregateInputType = {
    comment?: true
    createdAt?: true
    guildId?: true
    rating?: true
    ticketId?: true
    userId?: true
  }

  export type FeedbackCountAggregateInputType = {
    comment?: true
    createdAt?: true
    guildId?: true
    rating?: true
    ticketId?: true
    userId?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    comment: string | null
    createdAt: Date
    guildId: string
    rating: number
    ticketId: string
    userId: string | null
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    comment?: boolean
    createdAt?: boolean
    guildId?: boolean
    rating?: boolean
    ticketId?: boolean
    userId?: boolean
    guild?: boolean | GuildDefaultArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    user?: boolean | Feedback$userArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>


  export type FeedbackSelectScalar = {
    comment?: boolean
    createdAt?: boolean
    guildId?: boolean
    rating?: boolean
    ticketId?: boolean
    userId?: boolean
  }

  export type FeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    guild?: boolean | GuildDefaultArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    user?: boolean | Feedback$userArgs<ExtArgs>
  }

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      guild: Prisma.$GuildPayload<ExtArgs>
      ticket: Prisma.$TicketPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      comment: string | null
      createdAt: Date
      guildId: string
      rating: number
      ticketId: string
      userId: string | null
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `comment`
     * const feedbackWithCommentOnly = await prisma.feedback.findMany({ select: { comment: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    guild<T extends GuildDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GuildDefaultArgs<ExtArgs>>): Prisma__GuildClient<$Result.GetResult<Prisma.$GuildPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    ticket<T extends TicketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketDefaultArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends Feedback$userArgs<ExtArgs> = {}>(args?: Subset<T, Feedback$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */ 
  interface FeedbackFieldRefs {
    readonly comment: FieldRef<"Feedback", 'String'>
    readonly createdAt: FieldRef<"Feedback", 'DateTime'>
    readonly guildId: FieldRef<"Feedback", 'String'>
    readonly rating: FieldRef<"Feedback", 'Int'>
    readonly ticketId: FieldRef<"Feedback", 'String'>
    readonly userId: FieldRef<"Feedback", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
  }

  /**
   * Feedback.user
   */
  export type Feedback$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
  }


  /**
   * Model Guild
   */

  export type AggregateGuild = {
    _count: GuildCountAggregateOutputType | null
    _avg: GuildAvgAggregateOutputType | null
    _sum: GuildSumAggregateOutputType | null
    _min: GuildMinAggregateOutputType | null
    _max: GuildMaxAggregateOutputType | null
  }

  export type GuildAvgAggregateOutputType = {
    autoClose: number | null
    staleAfter: number | null
  }

  export type GuildSumAggregateOutputType = {
    autoClose: number | null
    staleAfter: number | null
  }

  export type GuildMinAggregateOutputType = {
    autoClose: number | null
    archive: boolean | null
    claimButton: boolean | null
    closeButton: boolean | null
    createdAt: Date | null
    errorColour: string | null
    footer: string | null
    id: string | null
    locale: string | null
    logChannel: string | null
    primaryColour: string | null
    staleAfter: number | null
    successColour: string | null
  }

  export type GuildMaxAggregateOutputType = {
    autoClose: number | null
    archive: boolean | null
    claimButton: boolean | null
    closeButton: boolean | null
    createdAt: Date | null
    errorColour: string | null
    footer: string | null
    id: string | null
    locale: string | null
    logChannel: string | null
    primaryColour: string | null
    staleAfter: number | null
    successColour: string | null
  }

  export type GuildCountAggregateOutputType = {
    autoClose: number
    autoTag: number
    archive: number
    blocklist: number
    claimButton: number
    closeButton: number
    createdAt: number
    errorColour: number
    footer: number
    id: number
    locale: number
    logChannel: number
    primaryColour: number
    staleAfter: number
    successColour: number
    workingHours: number
    _all: number
  }


  export type GuildAvgAggregateInputType = {
    autoClose?: true
    staleAfter?: true
  }

  export type GuildSumAggregateInputType = {
    autoClose?: true
    staleAfter?: true
  }

  export type GuildMinAggregateInputType = {
    autoClose?: true
    archive?: true
    claimButton?: true
    closeButton?: true
    createdAt?: true
    errorColour?: true
    footer?: true
    id?: true
    locale?: true
    logChannel?: true
    primaryColour?: true
    staleAfter?: true
    successColour?: true
  }

  export type GuildMaxAggregateInputType = {
    autoClose?: true
    archive?: true
    claimButton?: true
    closeButton?: true
    createdAt?: true
    errorColour?: true
    footer?: true
    id?: true
    locale?: true
    logChannel?: true
    primaryColour?: true
    staleAfter?: true
    successColour?: true
  }

  export type GuildCountAggregateInputType = {
    autoClose?: true
    autoTag?: true
    archive?: true
    blocklist?: true
    claimButton?: true
    closeButton?: true
    createdAt?: true
    errorColour?: true
    footer?: true
    id?: true
    locale?: true
    logChannel?: true
    primaryColour?: true
    staleAfter?: true
    successColour?: true
    workingHours?: true
    _all?: true
  }

  export type GuildAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Guild to aggregate.
     */
    where?: GuildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guilds to fetch.
     */
    orderBy?: GuildOrderByWithRelationInput | GuildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GuildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guilds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guilds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Guilds
    **/
    _count?: true | GuildCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GuildAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GuildSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuildMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuildMaxAggregateInputType
  }

  export type GetGuildAggregateType<T extends GuildAggregateArgs> = {
        [P in keyof T & keyof AggregateGuild]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuild[P]>
      : GetScalarType<T[P], AggregateGuild[P]>
  }




  export type GuildGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuildWhereInput
    orderBy?: GuildOrderByWithAggregationInput | GuildOrderByWithAggregationInput[]
    by: GuildScalarFieldEnum[] | GuildScalarFieldEnum
    having?: GuildScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuildCountAggregateInputType | true
    _avg?: GuildAvgAggregateInputType
    _sum?: GuildSumAggregateInputType
    _min?: GuildMinAggregateInputType
    _max?: GuildMaxAggregateInputType
  }

  export type GuildGroupByOutputType = {
    autoClose: number
    autoTag: JsonValue
    archive: boolean
    blocklist: JsonValue
    claimButton: boolean
    closeButton: boolean
    createdAt: Date
    errorColour: string
    footer: string | null
    id: string
    locale: string
    logChannel: string | null
    primaryColour: string
    staleAfter: number | null
    successColour: string
    workingHours: JsonValue
    _count: GuildCountAggregateOutputType | null
    _avg: GuildAvgAggregateOutputType | null
    _sum: GuildSumAggregateOutputType | null
    _min: GuildMinAggregateOutputType | null
    _max: GuildMaxAggregateOutputType | null
  }

  type GetGuildGroupByPayload<T extends GuildGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GuildGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GuildGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GuildGroupByOutputType[P]>
            : GetScalarType<T[P], GuildGroupByOutputType[P]>
        }
      >
    >


  export type GuildSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    autoClose?: boolean
    autoTag?: boolean
    archive?: boolean
    blocklist?: boolean
    claimButton?: boolean
    closeButton?: boolean
    createdAt?: boolean
    errorColour?: boolean
    footer?: boolean
    id?: boolean
    locale?: boolean
    logChannel?: boolean
    primaryColour?: boolean
    staleAfter?: boolean
    successColour?: boolean
    workingHours?: boolean
    categories?: boolean | Guild$categoriesArgs<ExtArgs>
    feedback?: boolean | Guild$feedbackArgs<ExtArgs>
    tags?: boolean | Guild$tagsArgs<ExtArgs>
    tickets?: boolean | Guild$ticketsArgs<ExtArgs>
    _count?: boolean | GuildCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["guild"]>


  export type GuildSelectScalar = {
    autoClose?: boolean
    autoTag?: boolean
    archive?: boolean
    blocklist?: boolean
    claimButton?: boolean
    closeButton?: boolean
    createdAt?: boolean
    errorColour?: boolean
    footer?: boolean
    id?: boolean
    locale?: boolean
    logChannel?: boolean
    primaryColour?: boolean
    staleAfter?: boolean
    successColour?: boolean
    workingHours?: boolean
  }

  export type GuildInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | Guild$categoriesArgs<ExtArgs>
    feedback?: boolean | Guild$feedbackArgs<ExtArgs>
    tags?: boolean | Guild$tagsArgs<ExtArgs>
    tickets?: boolean | Guild$ticketsArgs<ExtArgs>
    _count?: boolean | GuildCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $GuildPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Guild"
    objects: {
      categories: Prisma.$CategoryPayload<ExtArgs>[]
      feedback: Prisma.$FeedbackPayload<ExtArgs>[]
      tags: Prisma.$TagPayload<ExtArgs>[]
      tickets: Prisma.$TicketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      autoClose: number
      autoTag: Prisma.JsonValue
      archive: boolean
      blocklist: Prisma.JsonValue
      claimButton: boolean
      closeButton: boolean
      createdAt: Date
      errorColour: string
      footer: string | null
      id: string
      locale: string
      logChannel: string | null
      primaryColour: string
      staleAfter: number | null
      successColour: string
      workingHours: Prisma.JsonValue
    }, ExtArgs["result"]["guild"]>
    composites: {}
  }

  type GuildGetPayload<S extends boolean | null | undefined | GuildDefaultArgs> = $Result.GetResult<Prisma.$GuildPayload, S>

  type GuildCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GuildFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GuildCountAggregateInputType | true
    }

  export interface GuildDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Guild'], meta: { name: 'Guild' } }
    /**
     * Find zero or one Guild that matches the filter.
     * @param {GuildFindUniqueArgs} args - Arguments to find a Guild
     * @example
     * // Get one Guild
     * const guild = await prisma.guild.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GuildFindUniqueArgs>(args: SelectSubset<T, GuildFindUniqueArgs<ExtArgs>>): Prisma__GuildClient<$Result.GetResult<Prisma.$GuildPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Guild that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GuildFindUniqueOrThrowArgs} args - Arguments to find a Guild
     * @example
     * // Get one Guild
     * const guild = await prisma.guild.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GuildFindUniqueOrThrowArgs>(args: SelectSubset<T, GuildFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GuildClient<$Result.GetResult<Prisma.$GuildPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Guild that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildFindFirstArgs} args - Arguments to find a Guild
     * @example
     * // Get one Guild
     * const guild = await prisma.guild.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GuildFindFirstArgs>(args?: SelectSubset<T, GuildFindFirstArgs<ExtArgs>>): Prisma__GuildClient<$Result.GetResult<Prisma.$GuildPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Guild that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildFindFirstOrThrowArgs} args - Arguments to find a Guild
     * @example
     * // Get one Guild
     * const guild = await prisma.guild.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GuildFindFirstOrThrowArgs>(args?: SelectSubset<T, GuildFindFirstOrThrowArgs<ExtArgs>>): Prisma__GuildClient<$Result.GetResult<Prisma.$GuildPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Guilds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Guilds
     * const guilds = await prisma.guild.findMany()
     * 
     * // Get first 10 Guilds
     * const guilds = await prisma.guild.findMany({ take: 10 })
     * 
     * // Only select the `autoClose`
     * const guildWithAutoCloseOnly = await prisma.guild.findMany({ select: { autoClose: true } })
     * 
     */
    findMany<T extends GuildFindManyArgs>(args?: SelectSubset<T, GuildFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuildPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Guild.
     * @param {GuildCreateArgs} args - Arguments to create a Guild.
     * @example
     * // Create one Guild
     * const Guild = await prisma.guild.create({
     *   data: {
     *     // ... data to create a Guild
     *   }
     * })
     * 
     */
    create<T extends GuildCreateArgs>(args: SelectSubset<T, GuildCreateArgs<ExtArgs>>): Prisma__GuildClient<$Result.GetResult<Prisma.$GuildPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Guilds.
     * @param {GuildCreateManyArgs} args - Arguments to create many Guilds.
     * @example
     * // Create many Guilds
     * const guild = await prisma.guild.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GuildCreateManyArgs>(args?: SelectSubset<T, GuildCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Guild.
     * @param {GuildDeleteArgs} args - Arguments to delete one Guild.
     * @example
     * // Delete one Guild
     * const Guild = await prisma.guild.delete({
     *   where: {
     *     // ... filter to delete one Guild
     *   }
     * })
     * 
     */
    delete<T extends GuildDeleteArgs>(args: SelectSubset<T, GuildDeleteArgs<ExtArgs>>): Prisma__GuildClient<$Result.GetResult<Prisma.$GuildPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Guild.
     * @param {GuildUpdateArgs} args - Arguments to update one Guild.
     * @example
     * // Update one Guild
     * const guild = await prisma.guild.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GuildUpdateArgs>(args: SelectSubset<T, GuildUpdateArgs<ExtArgs>>): Prisma__GuildClient<$Result.GetResult<Prisma.$GuildPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Guilds.
     * @param {GuildDeleteManyArgs} args - Arguments to filter Guilds to delete.
     * @example
     * // Delete a few Guilds
     * const { count } = await prisma.guild.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GuildDeleteManyArgs>(args?: SelectSubset<T, GuildDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Guilds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Guilds
     * const guild = await prisma.guild.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GuildUpdateManyArgs>(args: SelectSubset<T, GuildUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Guild.
     * @param {GuildUpsertArgs} args - Arguments to update or create a Guild.
     * @example
     * // Update or create a Guild
     * const guild = await prisma.guild.upsert({
     *   create: {
     *     // ... data to create a Guild
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Guild we want to update
     *   }
     * })
     */
    upsert<T extends GuildUpsertArgs>(args: SelectSubset<T, GuildUpsertArgs<ExtArgs>>): Prisma__GuildClient<$Result.GetResult<Prisma.$GuildPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Guilds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildCountArgs} args - Arguments to filter Guilds to count.
     * @example
     * // Count the number of Guilds
     * const count = await prisma.guild.count({
     *   where: {
     *     // ... the filter for the Guilds we want to count
     *   }
     * })
    **/
    count<T extends GuildCountArgs>(
      args?: Subset<T, GuildCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuildCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Guild.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuildAggregateArgs>(args: Subset<T, GuildAggregateArgs>): Prisma.PrismaPromise<GetGuildAggregateType<T>>

    /**
     * Group by Guild.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GuildGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GuildGroupByArgs['orderBy'] }
        : { orderBy?: GuildGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GuildGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuildGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Guild model
   */
  readonly fields: GuildFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Guild.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GuildClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categories<T extends Guild$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Guild$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany"> | Null>
    feedback<T extends Guild$feedbackArgs<ExtArgs> = {}>(args?: Subset<T, Guild$feedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    tags<T extends Guild$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Guild$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany"> | Null>
    tickets<T extends Guild$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, Guild$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Guild model
   */ 
  interface GuildFieldRefs {
    readonly autoClose: FieldRef<"Guild", 'Int'>
    readonly autoTag: FieldRef<"Guild", 'Json'>
    readonly archive: FieldRef<"Guild", 'Boolean'>
    readonly blocklist: FieldRef<"Guild", 'Json'>
    readonly claimButton: FieldRef<"Guild", 'Boolean'>
    readonly closeButton: FieldRef<"Guild", 'Boolean'>
    readonly createdAt: FieldRef<"Guild", 'DateTime'>
    readonly errorColour: FieldRef<"Guild", 'String'>
    readonly footer: FieldRef<"Guild", 'String'>
    readonly id: FieldRef<"Guild", 'String'>
    readonly locale: FieldRef<"Guild", 'String'>
    readonly logChannel: FieldRef<"Guild", 'String'>
    readonly primaryColour: FieldRef<"Guild", 'String'>
    readonly staleAfter: FieldRef<"Guild", 'Int'>
    readonly successColour: FieldRef<"Guild", 'String'>
    readonly workingHours: FieldRef<"Guild", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Guild findUnique
   */
  export type GuildFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guild
     */
    select?: GuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuildInclude<ExtArgs> | null
    /**
     * Filter, which Guild to fetch.
     */
    where: GuildWhereUniqueInput
  }

  /**
   * Guild findUniqueOrThrow
   */
  export type GuildFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guild
     */
    select?: GuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuildInclude<ExtArgs> | null
    /**
     * Filter, which Guild to fetch.
     */
    where: GuildWhereUniqueInput
  }

  /**
   * Guild findFirst
   */
  export type GuildFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guild
     */
    select?: GuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuildInclude<ExtArgs> | null
    /**
     * Filter, which Guild to fetch.
     */
    where?: GuildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guilds to fetch.
     */
    orderBy?: GuildOrderByWithRelationInput | GuildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guilds.
     */
    cursor?: GuildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guilds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guilds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guilds.
     */
    distinct?: GuildScalarFieldEnum | GuildScalarFieldEnum[]
  }

  /**
   * Guild findFirstOrThrow
   */
  export type GuildFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guild
     */
    select?: GuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuildInclude<ExtArgs> | null
    /**
     * Filter, which Guild to fetch.
     */
    where?: GuildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guilds to fetch.
     */
    orderBy?: GuildOrderByWithRelationInput | GuildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guilds.
     */
    cursor?: GuildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guilds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guilds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guilds.
     */
    distinct?: GuildScalarFieldEnum | GuildScalarFieldEnum[]
  }

  /**
   * Guild findMany
   */
  export type GuildFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guild
     */
    select?: GuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuildInclude<ExtArgs> | null
    /**
     * Filter, which Guilds to fetch.
     */
    where?: GuildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guilds to fetch.
     */
    orderBy?: GuildOrderByWithRelationInput | GuildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Guilds.
     */
    cursor?: GuildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guilds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guilds.
     */
    skip?: number
    distinct?: GuildScalarFieldEnum | GuildScalarFieldEnum[]
  }

  /**
   * Guild create
   */
  export type GuildCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guild
     */
    select?: GuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuildInclude<ExtArgs> | null
    /**
     * The data needed to create a Guild.
     */
    data: XOR<GuildCreateInput, GuildUncheckedCreateInput>
  }

  /**
   * Guild createMany
   */
  export type GuildCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Guilds.
     */
    data: GuildCreateManyInput | GuildCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Guild update
   */
  export type GuildUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guild
     */
    select?: GuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuildInclude<ExtArgs> | null
    /**
     * The data needed to update a Guild.
     */
    data: XOR<GuildUpdateInput, GuildUncheckedUpdateInput>
    /**
     * Choose, which Guild to update.
     */
    where: GuildWhereUniqueInput
  }

  /**
   * Guild updateMany
   */
  export type GuildUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Guilds.
     */
    data: XOR<GuildUpdateManyMutationInput, GuildUncheckedUpdateManyInput>
    /**
     * Filter which Guilds to update
     */
    where?: GuildWhereInput
  }

  /**
   * Guild upsert
   */
  export type GuildUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guild
     */
    select?: GuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuildInclude<ExtArgs> | null
    /**
     * The filter to search for the Guild to update in case it exists.
     */
    where: GuildWhereUniqueInput
    /**
     * In case the Guild found by the `where` argument doesn't exist, create a new Guild with this data.
     */
    create: XOR<GuildCreateInput, GuildUncheckedCreateInput>
    /**
     * In case the Guild was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GuildUpdateInput, GuildUncheckedUpdateInput>
  }

  /**
   * Guild delete
   */
  export type GuildDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guild
     */
    select?: GuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuildInclude<ExtArgs> | null
    /**
     * Filter which Guild to delete.
     */
    where: GuildWhereUniqueInput
  }

  /**
   * Guild deleteMany
   */
  export type GuildDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Guilds to delete
     */
    where?: GuildWhereInput
  }

  /**
   * Guild.categories
   */
  export type Guild$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Guild.feedback
   */
  export type Guild$feedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Guild.tags
   */
  export type Guild$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    where?: TagWhereInput
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    cursor?: TagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Guild.tickets
   */
  export type Guild$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    cursor?: TicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Guild without action
   */
  export type GuildDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guild
     */
    select?: GuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuildInclude<ExtArgs> | null
  }


  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    categoryId: number | null
    maxLength: number | null
    minLength: number | null
    order: number | null
    style: number | null
  }

  export type QuestionSumAggregateOutputType = {
    categoryId: number | null
    maxLength: number | null
    minLength: number | null
    order: number | null
    style: number | null
  }

  export type QuestionMinAggregateOutputType = {
    createdAt: Date | null
    id: string | null
    categoryId: number | null
    label: string | null
    maxLength: number | null
    minLength: number | null
    order: number | null
    placeholder: string | null
    required: boolean | null
    style: number | null
    type: $Enums.QuestionType | null
    value: string | null
  }

  export type QuestionMaxAggregateOutputType = {
    createdAt: Date | null
    id: string | null
    categoryId: number | null
    label: string | null
    maxLength: number | null
    minLength: number | null
    order: number | null
    placeholder: string | null
    required: boolean | null
    style: number | null
    type: $Enums.QuestionType | null
    value: string | null
  }

  export type QuestionCountAggregateOutputType = {
    createdAt: number
    id: number
    categoryId: number
    label: number
    maxLength: number
    minLength: number
    options: number
    order: number
    placeholder: number
    required: number
    style: number
    type: number
    value: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    categoryId?: true
    maxLength?: true
    minLength?: true
    order?: true
    style?: true
  }

  export type QuestionSumAggregateInputType = {
    categoryId?: true
    maxLength?: true
    minLength?: true
    order?: true
    style?: true
  }

  export type QuestionMinAggregateInputType = {
    createdAt?: true
    id?: true
    categoryId?: true
    label?: true
    maxLength?: true
    minLength?: true
    order?: true
    placeholder?: true
    required?: true
    style?: true
    type?: true
    value?: true
  }

  export type QuestionMaxAggregateInputType = {
    createdAt?: true
    id?: true
    categoryId?: true
    label?: true
    maxLength?: true
    minLength?: true
    order?: true
    placeholder?: true
    required?: true
    style?: true
    type?: true
    value?: true
  }

  export type QuestionCountAggregateInputType = {
    createdAt?: true
    id?: true
    categoryId?: true
    label?: true
    maxLength?: true
    minLength?: true
    options?: true
    order?: true
    placeholder?: true
    required?: true
    style?: true
    type?: true
    value?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    createdAt: Date
    id: string
    categoryId: number
    label: string
    maxLength: number | null
    minLength: number | null
    options: JsonValue
    order: number
    placeholder: string | null
    required: boolean
    style: number
    type: $Enums.QuestionType
    value: string | null
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    id?: boolean
    categoryId?: boolean
    label?: boolean
    maxLength?: boolean
    minLength?: boolean
    options?: boolean
    order?: boolean
    placeholder?: boolean
    required?: boolean
    style?: boolean
    type?: boolean
    value?: boolean
    answers?: boolean | Question$answersArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>


  export type QuestionSelectScalar = {
    createdAt?: boolean
    id?: boolean
    categoryId?: boolean
    label?: boolean
    maxLength?: boolean
    minLength?: boolean
    options?: boolean
    order?: boolean
    placeholder?: boolean
    required?: boolean
    style?: boolean
    type?: boolean
    value?: boolean
  }

  export type QuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answers?: boolean | Question$answersArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {
      answers: Prisma.$QuestionAnswerPayload<ExtArgs>[]
      category: Prisma.$CategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      createdAt: Date
      id: string
      categoryId: number
      label: string
      maxLength: number | null
      minLength: number | null
      options: Prisma.JsonValue
      order: number
      placeholder: string | null
      required: boolean
      style: number
      type: $Enums.QuestionType
      value: string | null
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionFindUniqueArgs>(args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionFindFirstArgs>(args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const questionWithCreatedAtOnly = await prisma.question.findMany({ select: { createdAt: true } })
     * 
     */
    findMany<T extends QuestionFindManyArgs>(args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
     */
    create<T extends QuestionCreateArgs>(args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Questions.
     * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionCreateManyArgs>(args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
     */
    delete<T extends QuestionDeleteArgs>(args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionUpdateArgs>(args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionDeleteManyArgs>(args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionUpdateManyArgs>(args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
     */
    upsert<T extends QuestionUpsertArgs>(args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    answers<T extends Question$answersArgs<ExtArgs> = {}>(args?: Subset<T, Question$answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "findMany"> | Null>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Question model
   */ 
  interface QuestionFieldRefs {
    readonly createdAt: FieldRef<"Question", 'DateTime'>
    readonly id: FieldRef<"Question", 'String'>
    readonly categoryId: FieldRef<"Question", 'Int'>
    readonly label: FieldRef<"Question", 'String'>
    readonly maxLength: FieldRef<"Question", 'Int'>
    readonly minLength: FieldRef<"Question", 'Int'>
    readonly options: FieldRef<"Question", 'Json'>
    readonly order: FieldRef<"Question", 'Int'>
    readonly placeholder: FieldRef<"Question", 'String'>
    readonly required: FieldRef<"Question", 'Boolean'>
    readonly style: FieldRef<"Question", 'Int'>
    readonly type: FieldRef<"Question", 'QuestionType'>
    readonly value: FieldRef<"Question", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }

  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
  }

  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }

  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
  }

  /**
   * Question.answers
   */
  export type Question$answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    where?: QuestionAnswerWhereInput
    orderBy?: QuestionAnswerOrderByWithRelationInput | QuestionAnswerOrderByWithRelationInput[]
    cursor?: QuestionAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionAnswerScalarFieldEnum | QuestionAnswerScalarFieldEnum[]
  }

  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
  }


  /**
   * Model QuestionAnswer
   */

  export type AggregateQuestionAnswer = {
    _count: QuestionAnswerCountAggregateOutputType | null
    _avg: QuestionAnswerAvgAggregateOutputType | null
    _sum: QuestionAnswerSumAggregateOutputType | null
    _min: QuestionAnswerMinAggregateOutputType | null
    _max: QuestionAnswerMaxAggregateOutputType | null
  }

  export type QuestionAnswerAvgAggregateOutputType = {
    id: number | null
  }

  export type QuestionAnswerSumAggregateOutputType = {
    id: number | null
  }

  export type QuestionAnswerMinAggregateOutputType = {
    createdAt: Date | null
    id: number | null
    ticketId: string | null
    questionId: string | null
    userId: string | null
    value: string | null
  }

  export type QuestionAnswerMaxAggregateOutputType = {
    createdAt: Date | null
    id: number | null
    ticketId: string | null
    questionId: string | null
    userId: string | null
    value: string | null
  }

  export type QuestionAnswerCountAggregateOutputType = {
    createdAt: number
    id: number
    ticketId: number
    questionId: number
    userId: number
    value: number
    _all: number
  }


  export type QuestionAnswerAvgAggregateInputType = {
    id?: true
  }

  export type QuestionAnswerSumAggregateInputType = {
    id?: true
  }

  export type QuestionAnswerMinAggregateInputType = {
    createdAt?: true
    id?: true
    ticketId?: true
    questionId?: true
    userId?: true
    value?: true
  }

  export type QuestionAnswerMaxAggregateInputType = {
    createdAt?: true
    id?: true
    ticketId?: true
    questionId?: true
    userId?: true
    value?: true
  }

  export type QuestionAnswerCountAggregateInputType = {
    createdAt?: true
    id?: true
    ticketId?: true
    questionId?: true
    userId?: true
    value?: true
    _all?: true
  }

  export type QuestionAnswerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionAnswer to aggregate.
     */
    where?: QuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionAnswers to fetch.
     */
    orderBy?: QuestionAnswerOrderByWithRelationInput | QuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionAnswers
    **/
    _count?: true | QuestionAnswerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAnswerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionAnswerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionAnswerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionAnswerMaxAggregateInputType
  }

  export type GetQuestionAnswerAggregateType<T extends QuestionAnswerAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionAnswer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionAnswer[P]>
      : GetScalarType<T[P], AggregateQuestionAnswer[P]>
  }




  export type QuestionAnswerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionAnswerWhereInput
    orderBy?: QuestionAnswerOrderByWithAggregationInput | QuestionAnswerOrderByWithAggregationInput[]
    by: QuestionAnswerScalarFieldEnum[] | QuestionAnswerScalarFieldEnum
    having?: QuestionAnswerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionAnswerCountAggregateInputType | true
    _avg?: QuestionAnswerAvgAggregateInputType
    _sum?: QuestionAnswerSumAggregateInputType
    _min?: QuestionAnswerMinAggregateInputType
    _max?: QuestionAnswerMaxAggregateInputType
  }

  export type QuestionAnswerGroupByOutputType = {
    createdAt: Date
    id: number
    ticketId: string
    questionId: string
    userId: string
    value: string | null
    _count: QuestionAnswerCountAggregateOutputType | null
    _avg: QuestionAnswerAvgAggregateOutputType | null
    _sum: QuestionAnswerSumAggregateOutputType | null
    _min: QuestionAnswerMinAggregateOutputType | null
    _max: QuestionAnswerMaxAggregateOutputType | null
  }

  type GetQuestionAnswerGroupByPayload<T extends QuestionAnswerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionAnswerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionAnswerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionAnswerGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionAnswerGroupByOutputType[P]>
        }
      >
    >


  export type QuestionAnswerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    id?: boolean
    ticketId?: boolean
    questionId?: boolean
    userId?: boolean
    value?: boolean
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionAnswer"]>


  export type QuestionAnswerSelectScalar = {
    createdAt?: boolean
    id?: boolean
    ticketId?: boolean
    questionId?: boolean
    userId?: boolean
    value?: boolean
  }

  export type QuestionAnswerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $QuestionAnswerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionAnswer"
    objects: {
      ticket: Prisma.$TicketPayload<ExtArgs>
      question: Prisma.$QuestionPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      createdAt: Date
      id: number
      ticketId: string
      questionId: string
      userId: string
      value: string | null
    }, ExtArgs["result"]["questionAnswer"]>
    composites: {}
  }

  type QuestionAnswerGetPayload<S extends boolean | null | undefined | QuestionAnswerDefaultArgs> = $Result.GetResult<Prisma.$QuestionAnswerPayload, S>

  type QuestionAnswerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuestionAnswerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuestionAnswerCountAggregateInputType | true
    }

  export interface QuestionAnswerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionAnswer'], meta: { name: 'QuestionAnswer' } }
    /**
     * Find zero or one QuestionAnswer that matches the filter.
     * @param {QuestionAnswerFindUniqueArgs} args - Arguments to find a QuestionAnswer
     * @example
     * // Get one QuestionAnswer
     * const questionAnswer = await prisma.questionAnswer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionAnswerFindUniqueArgs>(args: SelectSubset<T, QuestionAnswerFindUniqueArgs<ExtArgs>>): Prisma__QuestionAnswerClient<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one QuestionAnswer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QuestionAnswerFindUniqueOrThrowArgs} args - Arguments to find a QuestionAnswer
     * @example
     * // Get one QuestionAnswer
     * const questionAnswer = await prisma.questionAnswer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionAnswerFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionAnswerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionAnswerClient<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first QuestionAnswer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAnswerFindFirstArgs} args - Arguments to find a QuestionAnswer
     * @example
     * // Get one QuestionAnswer
     * const questionAnswer = await prisma.questionAnswer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionAnswerFindFirstArgs>(args?: SelectSubset<T, QuestionAnswerFindFirstArgs<ExtArgs>>): Prisma__QuestionAnswerClient<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first QuestionAnswer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAnswerFindFirstOrThrowArgs} args - Arguments to find a QuestionAnswer
     * @example
     * // Get one QuestionAnswer
     * const questionAnswer = await prisma.questionAnswer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionAnswerFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionAnswerFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionAnswerClient<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more QuestionAnswers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAnswerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionAnswers
     * const questionAnswers = await prisma.questionAnswer.findMany()
     * 
     * // Get first 10 QuestionAnswers
     * const questionAnswers = await prisma.questionAnswer.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const questionAnswerWithCreatedAtOnly = await prisma.questionAnswer.findMany({ select: { createdAt: true } })
     * 
     */
    findMany<T extends QuestionAnswerFindManyArgs>(args?: SelectSubset<T, QuestionAnswerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a QuestionAnswer.
     * @param {QuestionAnswerCreateArgs} args - Arguments to create a QuestionAnswer.
     * @example
     * // Create one QuestionAnswer
     * const QuestionAnswer = await prisma.questionAnswer.create({
     *   data: {
     *     // ... data to create a QuestionAnswer
     *   }
     * })
     * 
     */
    create<T extends QuestionAnswerCreateArgs>(args: SelectSubset<T, QuestionAnswerCreateArgs<ExtArgs>>): Prisma__QuestionAnswerClient<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many QuestionAnswers.
     * @param {QuestionAnswerCreateManyArgs} args - Arguments to create many QuestionAnswers.
     * @example
     * // Create many QuestionAnswers
     * const questionAnswer = await prisma.questionAnswer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionAnswerCreateManyArgs>(args?: SelectSubset<T, QuestionAnswerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a QuestionAnswer.
     * @param {QuestionAnswerDeleteArgs} args - Arguments to delete one QuestionAnswer.
     * @example
     * // Delete one QuestionAnswer
     * const QuestionAnswer = await prisma.questionAnswer.delete({
     *   where: {
     *     // ... filter to delete one QuestionAnswer
     *   }
     * })
     * 
     */
    delete<T extends QuestionAnswerDeleteArgs>(args: SelectSubset<T, QuestionAnswerDeleteArgs<ExtArgs>>): Prisma__QuestionAnswerClient<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one QuestionAnswer.
     * @param {QuestionAnswerUpdateArgs} args - Arguments to update one QuestionAnswer.
     * @example
     * // Update one QuestionAnswer
     * const questionAnswer = await prisma.questionAnswer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionAnswerUpdateArgs>(args: SelectSubset<T, QuestionAnswerUpdateArgs<ExtArgs>>): Prisma__QuestionAnswerClient<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more QuestionAnswers.
     * @param {QuestionAnswerDeleteManyArgs} args - Arguments to filter QuestionAnswers to delete.
     * @example
     * // Delete a few QuestionAnswers
     * const { count } = await prisma.questionAnswer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionAnswerDeleteManyArgs>(args?: SelectSubset<T, QuestionAnswerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAnswerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionAnswers
     * const questionAnswer = await prisma.questionAnswer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionAnswerUpdateManyArgs>(args: SelectSubset<T, QuestionAnswerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one QuestionAnswer.
     * @param {QuestionAnswerUpsertArgs} args - Arguments to update or create a QuestionAnswer.
     * @example
     * // Update or create a QuestionAnswer
     * const questionAnswer = await prisma.questionAnswer.upsert({
     *   create: {
     *     // ... data to create a QuestionAnswer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionAnswer we want to update
     *   }
     * })
     */
    upsert<T extends QuestionAnswerUpsertArgs>(args: SelectSubset<T, QuestionAnswerUpsertArgs<ExtArgs>>): Prisma__QuestionAnswerClient<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of QuestionAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAnswerCountArgs} args - Arguments to filter QuestionAnswers to count.
     * @example
     * // Count the number of QuestionAnswers
     * const count = await prisma.questionAnswer.count({
     *   where: {
     *     // ... the filter for the QuestionAnswers we want to count
     *   }
     * })
    **/
    count<T extends QuestionAnswerCountArgs>(
      args?: Subset<T, QuestionAnswerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionAnswerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAnswerAggregateArgs>(args: Subset<T, QuestionAnswerAggregateArgs>): Prisma.PrismaPromise<GetQuestionAnswerAggregateType<T>>

    /**
     * Group by QuestionAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAnswerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionAnswerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionAnswerGroupByArgs['orderBy'] }
        : { orderBy?: QuestionAnswerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionAnswerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionAnswerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionAnswer model
   */
  readonly fields: QuestionAnswerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionAnswer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionAnswerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ticket<T extends TicketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketDefaultArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionAnswer model
   */ 
  interface QuestionAnswerFieldRefs {
    readonly createdAt: FieldRef<"QuestionAnswer", 'DateTime'>
    readonly id: FieldRef<"QuestionAnswer", 'Int'>
    readonly ticketId: FieldRef<"QuestionAnswer", 'String'>
    readonly questionId: FieldRef<"QuestionAnswer", 'String'>
    readonly userId: FieldRef<"QuestionAnswer", 'String'>
    readonly value: FieldRef<"QuestionAnswer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * QuestionAnswer findUnique
   */
  export type QuestionAnswerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAnswer to fetch.
     */
    where: QuestionAnswerWhereUniqueInput
  }

  /**
   * QuestionAnswer findUniqueOrThrow
   */
  export type QuestionAnswerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAnswer to fetch.
     */
    where: QuestionAnswerWhereUniqueInput
  }

  /**
   * QuestionAnswer findFirst
   */
  export type QuestionAnswerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAnswer to fetch.
     */
    where?: QuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionAnswers to fetch.
     */
    orderBy?: QuestionAnswerOrderByWithRelationInput | QuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionAnswers.
     */
    cursor?: QuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionAnswers.
     */
    distinct?: QuestionAnswerScalarFieldEnum | QuestionAnswerScalarFieldEnum[]
  }

  /**
   * QuestionAnswer findFirstOrThrow
   */
  export type QuestionAnswerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAnswer to fetch.
     */
    where?: QuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionAnswers to fetch.
     */
    orderBy?: QuestionAnswerOrderByWithRelationInput | QuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionAnswers.
     */
    cursor?: QuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionAnswers.
     */
    distinct?: QuestionAnswerScalarFieldEnum | QuestionAnswerScalarFieldEnum[]
  }

  /**
   * QuestionAnswer findMany
   */
  export type QuestionAnswerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAnswers to fetch.
     */
    where?: QuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionAnswers to fetch.
     */
    orderBy?: QuestionAnswerOrderByWithRelationInput | QuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionAnswers.
     */
    cursor?: QuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionAnswers.
     */
    skip?: number
    distinct?: QuestionAnswerScalarFieldEnum | QuestionAnswerScalarFieldEnum[]
  }

  /**
   * QuestionAnswer create
   */
  export type QuestionAnswerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionAnswer.
     */
    data: XOR<QuestionAnswerCreateInput, QuestionAnswerUncheckedCreateInput>
  }

  /**
   * QuestionAnswer createMany
   */
  export type QuestionAnswerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionAnswers.
     */
    data: QuestionAnswerCreateManyInput | QuestionAnswerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionAnswer update
   */
  export type QuestionAnswerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionAnswer.
     */
    data: XOR<QuestionAnswerUpdateInput, QuestionAnswerUncheckedUpdateInput>
    /**
     * Choose, which QuestionAnswer to update.
     */
    where: QuestionAnswerWhereUniqueInput
  }

  /**
   * QuestionAnswer updateMany
   */
  export type QuestionAnswerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionAnswers.
     */
    data: XOR<QuestionAnswerUpdateManyMutationInput, QuestionAnswerUncheckedUpdateManyInput>
    /**
     * Filter which QuestionAnswers to update
     */
    where?: QuestionAnswerWhereInput
  }

  /**
   * QuestionAnswer upsert
   */
  export type QuestionAnswerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionAnswer to update in case it exists.
     */
    where: QuestionAnswerWhereUniqueInput
    /**
     * In case the QuestionAnswer found by the `where` argument doesn't exist, create a new QuestionAnswer with this data.
     */
    create: XOR<QuestionAnswerCreateInput, QuestionAnswerUncheckedCreateInput>
    /**
     * In case the QuestionAnswer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionAnswerUpdateInput, QuestionAnswerUncheckedUpdateInput>
  }

  /**
   * QuestionAnswer delete
   */
  export type QuestionAnswerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter which QuestionAnswer to delete.
     */
    where: QuestionAnswerWhereUniqueInput
  }

  /**
   * QuestionAnswer deleteMany
   */
  export type QuestionAnswerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionAnswers to delete
     */
    where?: QuestionAnswerWhereInput
  }

  /**
   * QuestionAnswer without action
   */
  export type QuestionAnswerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagAvgAggregateOutputType = {
    id: number | null
  }

  export type TagSumAggregateOutputType = {
    id: number | null
  }

  export type TagMinAggregateOutputType = {
    content: string | null
    createdAt: Date | null
    guildId: string | null
    id: number | null
    name: string | null
    regex: string | null
  }

  export type TagMaxAggregateOutputType = {
    content: string | null
    createdAt: Date | null
    guildId: string | null
    id: number | null
    name: string | null
    regex: string | null
  }

  export type TagCountAggregateOutputType = {
    content: number
    createdAt: number
    guildId: number
    id: number
    name: number
    regex: number
    _all: number
  }


  export type TagAvgAggregateInputType = {
    id?: true
  }

  export type TagSumAggregateInputType = {
    id?: true
  }

  export type TagMinAggregateInputType = {
    content?: true
    createdAt?: true
    guildId?: true
    id?: true
    name?: true
    regex?: true
  }

  export type TagMaxAggregateInputType = {
    content?: true
    createdAt?: true
    guildId?: true
    id?: true
    name?: true
    regex?: true
  }

  export type TagCountAggregateInputType = {
    content?: true
    createdAt?: true
    guildId?: true
    id?: true
    name?: true
    regex?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _avg?: TagAvgAggregateInputType
    _sum?: TagSumAggregateInputType
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    content: string
    createdAt: Date
    guildId: string
    id: number
    name: string
    regex: string | null
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    content?: boolean
    createdAt?: boolean
    guildId?: boolean
    id?: boolean
    name?: boolean
    regex?: boolean
    guild?: boolean | GuildDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>


  export type TagSelectScalar = {
    content?: boolean
    createdAt?: boolean
    guildId?: boolean
    id?: boolean
    name?: boolean
    regex?: boolean
  }

  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    guild?: boolean | GuildDefaultArgs<ExtArgs>
  }

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      guild: Prisma.$GuildPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      content: string
      createdAt: Date
      guildId: string
      id: number
      name: string
      regex: string | null
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `content`
     * const tagWithContentOnly = await prisma.tag.findMany({ select: { content: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    guild<T extends GuildDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GuildDefaultArgs<ExtArgs>>): Prisma__GuildClient<$Result.GetResult<Prisma.$GuildPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */ 
  interface TagFieldRefs {
    readonly content: FieldRef<"Tag", 'String'>
    readonly createdAt: FieldRef<"Tag", 'DateTime'>
    readonly guildId: FieldRef<"Tag", 'String'>
    readonly id: FieldRef<"Tag", 'Int'>
    readonly name: FieldRef<"Tag", 'String'>
    readonly regex: FieldRef<"Tag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model Ticket
   */

  export type AggregateTicket = {
    _count: TicketCountAggregateOutputType | null
    _avg: TicketAvgAggregateOutputType | null
    _sum: TicketSumAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  export type TicketAvgAggregateOutputType = {
    categoryId: number | null
    messageCount: number | null
    number: number | null
  }

  export type TicketSumAggregateOutputType = {
    categoryId: number | null
    messageCount: number | null
    number: number | null
  }

  export type TicketMinAggregateOutputType = {
    categoryId: number | null
    claimedById: string | null
    closedAt: Date | null
    closedById: string | null
    closedReason: string | null
    createdAt: Date | null
    createdById: string | null
    deleted: boolean | null
    firstResponseAt: Date | null
    guildId: string | null
    id: string | null
    lastMessageAt: Date | null
    messageCount: number | null
    number: number | null
    open: boolean | null
    openingMessageId: string | null
    priority: $Enums.TicketPriority | null
    referencesMessageId: string | null
    referencesTicketId: string | null
    topic: string | null
  }

  export type TicketMaxAggregateOutputType = {
    categoryId: number | null
    claimedById: string | null
    closedAt: Date | null
    closedById: string | null
    closedReason: string | null
    createdAt: Date | null
    createdById: string | null
    deleted: boolean | null
    firstResponseAt: Date | null
    guildId: string | null
    id: string | null
    lastMessageAt: Date | null
    messageCount: number | null
    number: number | null
    open: boolean | null
    openingMessageId: string | null
    priority: $Enums.TicketPriority | null
    referencesMessageId: string | null
    referencesTicketId: string | null
    topic: string | null
  }

  export type TicketCountAggregateOutputType = {
    categoryId: number
    claimedById: number
    closedAt: number
    closedById: number
    closedReason: number
    createdAt: number
    createdById: number
    deleted: number
    firstResponseAt: number
    guildId: number
    id: number
    lastMessageAt: number
    messageCount: number
    number: number
    open: number
    openingMessageId: number
    pinnedMessageIds: number
    priority: number
    referencesMessageId: number
    referencesTicketId: number
    topic: number
    _all: number
  }


  export type TicketAvgAggregateInputType = {
    categoryId?: true
    messageCount?: true
    number?: true
  }

  export type TicketSumAggregateInputType = {
    categoryId?: true
    messageCount?: true
    number?: true
  }

  export type TicketMinAggregateInputType = {
    categoryId?: true
    claimedById?: true
    closedAt?: true
    closedById?: true
    closedReason?: true
    createdAt?: true
    createdById?: true
    deleted?: true
    firstResponseAt?: true
    guildId?: true
    id?: true
    lastMessageAt?: true
    messageCount?: true
    number?: true
    open?: true
    openingMessageId?: true
    priority?: true
    referencesMessageId?: true
    referencesTicketId?: true
    topic?: true
  }

  export type TicketMaxAggregateInputType = {
    categoryId?: true
    claimedById?: true
    closedAt?: true
    closedById?: true
    closedReason?: true
    createdAt?: true
    createdById?: true
    deleted?: true
    firstResponseAt?: true
    guildId?: true
    id?: true
    lastMessageAt?: true
    messageCount?: true
    number?: true
    open?: true
    openingMessageId?: true
    priority?: true
    referencesMessageId?: true
    referencesTicketId?: true
    topic?: true
  }

  export type TicketCountAggregateInputType = {
    categoryId?: true
    claimedById?: true
    closedAt?: true
    closedById?: true
    closedReason?: true
    createdAt?: true
    createdById?: true
    deleted?: true
    firstResponseAt?: true
    guildId?: true
    id?: true
    lastMessageAt?: true
    messageCount?: true
    number?: true
    open?: true
    openingMessageId?: true
    pinnedMessageIds?: true
    priority?: true
    referencesMessageId?: true
    referencesTicketId?: true
    topic?: true
    _all?: true
  }

  export type TicketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ticket to aggregate.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tickets
    **/
    _count?: true | TicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketMaxAggregateInputType
  }

  export type GetTicketAggregateType<T extends TicketAggregateArgs> = {
        [P in keyof T & keyof AggregateTicket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicket[P]>
      : GetScalarType<T[P], AggregateTicket[P]>
  }




  export type TicketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithAggregationInput | TicketOrderByWithAggregationInput[]
    by: TicketScalarFieldEnum[] | TicketScalarFieldEnum
    having?: TicketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketCountAggregateInputType | true
    _avg?: TicketAvgAggregateInputType
    _sum?: TicketSumAggregateInputType
    _min?: TicketMinAggregateInputType
    _max?: TicketMaxAggregateInputType
  }

  export type TicketGroupByOutputType = {
    categoryId: number | null
    claimedById: string | null
    closedAt: Date | null
    closedById: string | null
    closedReason: string | null
    createdAt: Date
    createdById: string
    deleted: boolean
    firstResponseAt: Date | null
    guildId: string
    id: string
    lastMessageAt: Date | null
    messageCount: number | null
    number: number
    open: boolean
    openingMessageId: string
    pinnedMessageIds: JsonValue
    priority: $Enums.TicketPriority | null
    referencesMessageId: string | null
    referencesTicketId: string | null
    topic: string | null
    _count: TicketCountAggregateOutputType | null
    _avg: TicketAvgAggregateOutputType | null
    _sum: TicketSumAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  type GetTicketGroupByPayload<T extends TicketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketGroupByOutputType[P]>
            : GetScalarType<T[P], TicketGroupByOutputType[P]>
        }
      >
    >


  export type TicketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    categoryId?: boolean
    claimedById?: boolean
    closedAt?: boolean
    closedById?: boolean
    closedReason?: boolean
    createdAt?: boolean
    createdById?: boolean
    deleted?: boolean
    firstResponseAt?: boolean
    guildId?: boolean
    id?: boolean
    lastMessageAt?: boolean
    messageCount?: boolean
    number?: boolean
    open?: boolean
    openingMessageId?: boolean
    pinnedMessageIds?: boolean
    priority?: boolean
    referencesMessageId?: boolean
    referencesTicketId?: boolean
    topic?: boolean
    archivedChannels?: boolean | Ticket$archivedChannelsArgs<ExtArgs>
    archivedMessages?: boolean | Ticket$archivedMessagesArgs<ExtArgs>
    archivedRoles?: boolean | Ticket$archivedRolesArgs<ExtArgs>
    archivedUsers?: boolean | Ticket$archivedUsersArgs<ExtArgs>
    category?: boolean | Ticket$categoryArgs<ExtArgs>
    claimedBy?: boolean | Ticket$claimedByArgs<ExtArgs>
    closedBy?: boolean | Ticket$closedByArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    feedback?: boolean | Ticket$feedbackArgs<ExtArgs>
    guild?: boolean | GuildDefaultArgs<ExtArgs>
    referencedBy?: boolean | Ticket$referencedByArgs<ExtArgs>
    referencesTicket?: boolean | Ticket$referencesTicketArgs<ExtArgs>
    questionAnswers?: boolean | Ticket$questionAnswersArgs<ExtArgs>
    _count?: boolean | TicketCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket"]>


  export type TicketSelectScalar = {
    categoryId?: boolean
    claimedById?: boolean
    closedAt?: boolean
    closedById?: boolean
    closedReason?: boolean
    createdAt?: boolean
    createdById?: boolean
    deleted?: boolean
    firstResponseAt?: boolean
    guildId?: boolean
    id?: boolean
    lastMessageAt?: boolean
    messageCount?: boolean
    number?: boolean
    open?: boolean
    openingMessageId?: boolean
    pinnedMessageIds?: boolean
    priority?: boolean
    referencesMessageId?: boolean
    referencesTicketId?: boolean
    topic?: boolean
  }

  export type TicketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    archivedChannels?: boolean | Ticket$archivedChannelsArgs<ExtArgs>
    archivedMessages?: boolean | Ticket$archivedMessagesArgs<ExtArgs>
    archivedRoles?: boolean | Ticket$archivedRolesArgs<ExtArgs>
    archivedUsers?: boolean | Ticket$archivedUsersArgs<ExtArgs>
    category?: boolean | Ticket$categoryArgs<ExtArgs>
    claimedBy?: boolean | Ticket$claimedByArgs<ExtArgs>
    closedBy?: boolean | Ticket$closedByArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    feedback?: boolean | Ticket$feedbackArgs<ExtArgs>
    guild?: boolean | GuildDefaultArgs<ExtArgs>
    referencedBy?: boolean | Ticket$referencedByArgs<ExtArgs>
    referencesTicket?: boolean | Ticket$referencesTicketArgs<ExtArgs>
    questionAnswers?: boolean | Ticket$questionAnswersArgs<ExtArgs>
    _count?: boolean | TicketCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TicketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ticket"
    objects: {
      archivedChannels: Prisma.$ArchivedChannelPayload<ExtArgs>[]
      archivedMessages: Prisma.$ArchivedMessagePayload<ExtArgs>[]
      archivedRoles: Prisma.$ArchivedRolePayload<ExtArgs>[]
      archivedUsers: Prisma.$ArchivedUserPayload<ExtArgs>[]
      category: Prisma.$CategoryPayload<ExtArgs> | null
      claimedBy: Prisma.$UserPayload<ExtArgs> | null
      closedBy: Prisma.$UserPayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs>
      feedback: Prisma.$FeedbackPayload<ExtArgs> | null
      guild: Prisma.$GuildPayload<ExtArgs>
      referencedBy: Prisma.$TicketPayload<ExtArgs>[]
      referencesTicket: Prisma.$TicketPayload<ExtArgs> | null
      questionAnswers: Prisma.$QuestionAnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      categoryId: number | null
      claimedById: string | null
      closedAt: Date | null
      closedById: string | null
      closedReason: string | null
      createdAt: Date
      createdById: string
      deleted: boolean
      firstResponseAt: Date | null
      guildId: string
      id: string
      lastMessageAt: Date | null
      messageCount: number | null
      number: number
      open: boolean
      openingMessageId: string
      pinnedMessageIds: Prisma.JsonValue
      priority: $Enums.TicketPriority | null
      referencesMessageId: string | null
      referencesTicketId: string | null
      topic: string | null
    }, ExtArgs["result"]["ticket"]>
    composites: {}
  }

  type TicketGetPayload<S extends boolean | null | undefined | TicketDefaultArgs> = $Result.GetResult<Prisma.$TicketPayload, S>

  type TicketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TicketFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TicketCountAggregateInputType | true
    }

  export interface TicketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ticket'], meta: { name: 'Ticket' } }
    /**
     * Find zero or one Ticket that matches the filter.
     * @param {TicketFindUniqueArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TicketFindUniqueArgs>(args: SelectSubset<T, TicketFindUniqueArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ticket that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TicketFindUniqueOrThrowArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TicketFindUniqueOrThrowArgs>(args: SelectSubset<T, TicketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ticket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindFirstArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TicketFindFirstArgs>(args?: SelectSubset<T, TicketFindFirstArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ticket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindFirstOrThrowArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TicketFindFirstOrThrowArgs>(args?: SelectSubset<T, TicketFindFirstOrThrowArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tickets
     * const tickets = await prisma.ticket.findMany()
     * 
     * // Get first 10 Tickets
     * const tickets = await prisma.ticket.findMany({ take: 10 })
     * 
     * // Only select the `categoryId`
     * const ticketWithCategoryIdOnly = await prisma.ticket.findMany({ select: { categoryId: true } })
     * 
     */
    findMany<T extends TicketFindManyArgs>(args?: SelectSubset<T, TicketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ticket.
     * @param {TicketCreateArgs} args - Arguments to create a Ticket.
     * @example
     * // Create one Ticket
     * const Ticket = await prisma.ticket.create({
     *   data: {
     *     // ... data to create a Ticket
     *   }
     * })
     * 
     */
    create<T extends TicketCreateArgs>(args: SelectSubset<T, TicketCreateArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tickets.
     * @param {TicketCreateManyArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const ticket = await prisma.ticket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TicketCreateManyArgs>(args?: SelectSubset<T, TicketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ticket.
     * @param {TicketDeleteArgs} args - Arguments to delete one Ticket.
     * @example
     * // Delete one Ticket
     * const Ticket = await prisma.ticket.delete({
     *   where: {
     *     // ... filter to delete one Ticket
     *   }
     * })
     * 
     */
    delete<T extends TicketDeleteArgs>(args: SelectSubset<T, TicketDeleteArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ticket.
     * @param {TicketUpdateArgs} args - Arguments to update one Ticket.
     * @example
     * // Update one Ticket
     * const ticket = await prisma.ticket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TicketUpdateArgs>(args: SelectSubset<T, TicketUpdateArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tickets.
     * @param {TicketDeleteManyArgs} args - Arguments to filter Tickets to delete.
     * @example
     * // Delete a few Tickets
     * const { count } = await prisma.ticket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TicketDeleteManyArgs>(args?: SelectSubset<T, TicketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tickets
     * const ticket = await prisma.ticket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TicketUpdateManyArgs>(args: SelectSubset<T, TicketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ticket.
     * @param {TicketUpsertArgs} args - Arguments to update or create a Ticket.
     * @example
     * // Update or create a Ticket
     * const ticket = await prisma.ticket.upsert({
     *   create: {
     *     // ... data to create a Ticket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticket we want to update
     *   }
     * })
     */
    upsert<T extends TicketUpsertArgs>(args: SelectSubset<T, TicketUpsertArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketCountArgs} args - Arguments to filter Tickets to count.
     * @example
     * // Count the number of Tickets
     * const count = await prisma.ticket.count({
     *   where: {
     *     // ... the filter for the Tickets we want to count
     *   }
     * })
    **/
    count<T extends TicketCountArgs>(
      args?: Subset<T, TicketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketAggregateArgs>(args: Subset<T, TicketAggregateArgs>): Prisma.PrismaPromise<GetTicketAggregateType<T>>

    /**
     * Group by Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketGroupByArgs['orderBy'] }
        : { orderBy?: TicketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ticket model
   */
  readonly fields: TicketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ticket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TicketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    archivedChannels<T extends Ticket$archivedChannelsArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$archivedChannelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchivedChannelPayload<ExtArgs>, T, "findMany"> | Null>
    archivedMessages<T extends Ticket$archivedMessagesArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$archivedMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchivedMessagePayload<ExtArgs>, T, "findMany"> | Null>
    archivedRoles<T extends Ticket$archivedRolesArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$archivedRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchivedRolePayload<ExtArgs>, T, "findMany"> | Null>
    archivedUsers<T extends Ticket$archivedUsersArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$archivedUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchivedUserPayload<ExtArgs>, T, "findMany"> | Null>
    category<T extends Ticket$categoryArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$categoryArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    claimedBy<T extends Ticket$claimedByArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$claimedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    closedBy<T extends Ticket$closedByArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$closedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    feedback<T extends Ticket$feedbackArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$feedbackArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    guild<T extends GuildDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GuildDefaultArgs<ExtArgs>>): Prisma__GuildClient<$Result.GetResult<Prisma.$GuildPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    referencedBy<T extends Ticket$referencedByArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$referencedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany"> | Null>
    referencesTicket<T extends Ticket$referencesTicketArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$referencesTicketArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    questionAnswers<T extends Ticket$questionAnswersArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$questionAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ticket model
   */ 
  interface TicketFieldRefs {
    readonly categoryId: FieldRef<"Ticket", 'Int'>
    readonly claimedById: FieldRef<"Ticket", 'String'>
    readonly closedAt: FieldRef<"Ticket", 'DateTime'>
    readonly closedById: FieldRef<"Ticket", 'String'>
    readonly closedReason: FieldRef<"Ticket", 'String'>
    readonly createdAt: FieldRef<"Ticket", 'DateTime'>
    readonly createdById: FieldRef<"Ticket", 'String'>
    readonly deleted: FieldRef<"Ticket", 'Boolean'>
    readonly firstResponseAt: FieldRef<"Ticket", 'DateTime'>
    readonly guildId: FieldRef<"Ticket", 'String'>
    readonly id: FieldRef<"Ticket", 'String'>
    readonly lastMessageAt: FieldRef<"Ticket", 'DateTime'>
    readonly messageCount: FieldRef<"Ticket", 'Int'>
    readonly number: FieldRef<"Ticket", 'Int'>
    readonly open: FieldRef<"Ticket", 'Boolean'>
    readonly openingMessageId: FieldRef<"Ticket", 'String'>
    readonly pinnedMessageIds: FieldRef<"Ticket", 'Json'>
    readonly priority: FieldRef<"Ticket", 'TicketPriority'>
    readonly referencesMessageId: FieldRef<"Ticket", 'String'>
    readonly referencesTicketId: FieldRef<"Ticket", 'String'>
    readonly topic: FieldRef<"Ticket", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Ticket findUnique
   */
  export type TicketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket findUniqueOrThrow
   */
  export type TicketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket findFirst
   */
  export type TicketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket findFirstOrThrow
   */
  export type TicketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket findMany
   */
  export type TicketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket create
   */
  export type TicketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The data needed to create a Ticket.
     */
    data: XOR<TicketCreateInput, TicketUncheckedCreateInput>
  }

  /**
   * Ticket createMany
   */
  export type TicketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tickets.
     */
    data: TicketCreateManyInput | TicketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ticket update
   */
  export type TicketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The data needed to update a Ticket.
     */
    data: XOR<TicketUpdateInput, TicketUncheckedUpdateInput>
    /**
     * Choose, which Ticket to update.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket updateMany
   */
  export type TicketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tickets.
     */
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyInput>
    /**
     * Filter which Tickets to update
     */
    where?: TicketWhereInput
  }

  /**
   * Ticket upsert
   */
  export type TicketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The filter to search for the Ticket to update in case it exists.
     */
    where: TicketWhereUniqueInput
    /**
     * In case the Ticket found by the `where` argument doesn't exist, create a new Ticket with this data.
     */
    create: XOR<TicketCreateInput, TicketUncheckedCreateInput>
    /**
     * In case the Ticket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TicketUpdateInput, TicketUncheckedUpdateInput>
  }

  /**
   * Ticket delete
   */
  export type TicketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter which Ticket to delete.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket deleteMany
   */
  export type TicketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tickets to delete
     */
    where?: TicketWhereInput
  }

  /**
   * Ticket.archivedChannels
   */
  export type Ticket$archivedChannelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedChannel
     */
    select?: ArchivedChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedChannelInclude<ExtArgs> | null
    where?: ArchivedChannelWhereInput
    orderBy?: ArchivedChannelOrderByWithRelationInput | ArchivedChannelOrderByWithRelationInput[]
    cursor?: ArchivedChannelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArchivedChannelScalarFieldEnum | ArchivedChannelScalarFieldEnum[]
  }

  /**
   * Ticket.archivedMessages
   */
  export type Ticket$archivedMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedMessage
     */
    select?: ArchivedMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedMessageInclude<ExtArgs> | null
    where?: ArchivedMessageWhereInput
    orderBy?: ArchivedMessageOrderByWithRelationInput | ArchivedMessageOrderByWithRelationInput[]
    cursor?: ArchivedMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArchivedMessageScalarFieldEnum | ArchivedMessageScalarFieldEnum[]
  }

  /**
   * Ticket.archivedRoles
   */
  export type Ticket$archivedRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedRole
     */
    select?: ArchivedRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedRoleInclude<ExtArgs> | null
    where?: ArchivedRoleWhereInput
    orderBy?: ArchivedRoleOrderByWithRelationInput | ArchivedRoleOrderByWithRelationInput[]
    cursor?: ArchivedRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArchivedRoleScalarFieldEnum | ArchivedRoleScalarFieldEnum[]
  }

  /**
   * Ticket.archivedUsers
   */
  export type Ticket$archivedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedUser
     */
    select?: ArchivedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArchivedUserInclude<ExtArgs> | null
    where?: ArchivedUserWhereInput
    orderBy?: ArchivedUserOrderByWithRelationInput | ArchivedUserOrderByWithRelationInput[]
    cursor?: ArchivedUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArchivedUserScalarFieldEnum | ArchivedUserScalarFieldEnum[]
  }

  /**
   * Ticket.category
   */
  export type Ticket$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Ticket.claimedBy
   */
  export type Ticket$claimedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Ticket.closedBy
   */
  export type Ticket$closedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Ticket.feedback
   */
  export type Ticket$feedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
  }

  /**
   * Ticket.referencedBy
   */
  export type Ticket$referencedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    cursor?: TicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket.referencesTicket
   */
  export type Ticket$referencesTicketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
  }

  /**
   * Ticket.questionAnswers
   */
  export type Ticket$questionAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    where?: QuestionAnswerWhereInput
    orderBy?: QuestionAnswerOrderByWithRelationInput | QuestionAnswerOrderByWithRelationInput[]
    cursor?: QuestionAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionAnswerScalarFieldEnum | QuestionAnswerScalarFieldEnum[]
  }

  /**
   * Ticket without action
   */
  export type TicketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    messageCount: number | null
  }

  export type UserSumAggregateOutputType = {
    messageCount: number | null
  }

  export type UserMinAggregateOutputType = {
    createdAt: Date | null
    id: string | null
    messageCount: number | null
  }

  export type UserMaxAggregateOutputType = {
    createdAt: Date | null
    id: string | null
    messageCount: number | null
  }

  export type UserCountAggregateOutputType = {
    createdAt: number
    id: number
    messageCount: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    messageCount?: true
  }

  export type UserSumAggregateInputType = {
    messageCount?: true
  }

  export type UserMinAggregateInputType = {
    createdAt?: true
    id?: true
    messageCount?: true
  }

  export type UserMaxAggregateInputType = {
    createdAt?: true
    id?: true
    messageCount?: true
  }

  export type UserCountAggregateInputType = {
    createdAt?: true
    id?: true
    messageCount?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    createdAt: Date
    id: string
    messageCount: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    id?: boolean
    messageCount?: boolean
    feedback?: boolean | User$feedbackArgs<ExtArgs>
    ticketsCreated?: boolean | User$ticketsCreatedArgs<ExtArgs>
    ticketsClosed?: boolean | User$ticketsClosedArgs<ExtArgs>
    ticketsClaimed?: boolean | User$ticketsClaimedArgs<ExtArgs>
    questionAnswers?: boolean | User$questionAnswersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    createdAt?: boolean
    id?: boolean
    messageCount?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedback?: boolean | User$feedbackArgs<ExtArgs>
    ticketsCreated?: boolean | User$ticketsCreatedArgs<ExtArgs>
    ticketsClosed?: boolean | User$ticketsClosedArgs<ExtArgs>
    ticketsClaimed?: boolean | User$ticketsClaimedArgs<ExtArgs>
    questionAnswers?: boolean | User$questionAnswersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      feedback: Prisma.$FeedbackPayload<ExtArgs>[]
      ticketsCreated: Prisma.$TicketPayload<ExtArgs>[]
      ticketsClosed: Prisma.$TicketPayload<ExtArgs>[]
      ticketsClaimed: Prisma.$TicketPayload<ExtArgs>[]
      questionAnswers: Prisma.$QuestionAnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      createdAt: Date
      id: string
      messageCount: number
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const userWithCreatedAtOnly = await prisma.user.findMany({ select: { createdAt: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    feedback<T extends User$feedbackArgs<ExtArgs> = {}>(args?: Subset<T, User$feedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    ticketsCreated<T extends User$ticketsCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$ticketsCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany"> | Null>
    ticketsClosed<T extends User$ticketsClosedArgs<ExtArgs> = {}>(args?: Subset<T, User$ticketsClosedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany"> | Null>
    ticketsClaimed<T extends User$ticketsClaimedArgs<ExtArgs> = {}>(args?: Subset<T, User$ticketsClaimedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany"> | Null>
    questionAnswers<T extends User$questionAnswersArgs<ExtArgs> = {}>(args?: Subset<T, User$questionAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly id: FieldRef<"User", 'String'>
    readonly messageCount: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.feedback
   */
  export type User$feedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * User.ticketsCreated
   */
  export type User$ticketsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    cursor?: TicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * User.ticketsClosed
   */
  export type User$ticketsClosedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    cursor?: TicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * User.ticketsClaimed
   */
  export type User$ticketsClaimedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    cursor?: TicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * User.questionAnswers
   */
  export type User$questionAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    where?: QuestionAnswerWhereInput
    orderBy?: QuestionAnswerOrderByWithRelationInput | QuestionAnswerOrderByWithRelationInput[]
    cursor?: QuestionAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionAnswerScalarFieldEnum | QuestionAnswerScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ArchivedChannelScalarFieldEnum: {
    channelId: 'channelId',
    createdAt: 'createdAt',
    name: 'name',
    ticketId: 'ticketId'
  };

  export type ArchivedChannelScalarFieldEnum = (typeof ArchivedChannelScalarFieldEnum)[keyof typeof ArchivedChannelScalarFieldEnum]


  export const ArchivedMessageScalarFieldEnum: {
    authorId: 'authorId',
    content: 'content',
    createdAt: 'createdAt',
    deleted: 'deleted',
    edited: 'edited',
    external: 'external',
    id: 'id',
    ticketId: 'ticketId'
  };

  export type ArchivedMessageScalarFieldEnum = (typeof ArchivedMessageScalarFieldEnum)[keyof typeof ArchivedMessageScalarFieldEnum]


  export const ArchivedRoleScalarFieldEnum: {
    colour: 'colour',
    createdAt: 'createdAt',
    name: 'name',
    roleId: 'roleId',
    ticketId: 'ticketId'
  };

  export type ArchivedRoleScalarFieldEnum = (typeof ArchivedRoleScalarFieldEnum)[keyof typeof ArchivedRoleScalarFieldEnum]


  export const ArchivedUserScalarFieldEnum: {
    avatar: 'avatar',
    bot: 'bot',
    createdAt: 'createdAt',
    discriminator: 'discriminator',
    displayName: 'displayName',
    roleId: 'roleId',
    ticketId: 'ticketId',
    userId: 'userId',
    username: 'username'
  };

  export type ArchivedUserScalarFieldEnum = (typeof ArchivedUserScalarFieldEnum)[keyof typeof ArchivedUserScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    channelName: 'channelName',
    claiming: 'claiming',
    createdAt: 'createdAt',
    cooldown: 'cooldown',
    customTopic: 'customTopic',
    description: 'description',
    discordCategory: 'discordCategory',
    emoji: 'emoji',
    enableFeedback: 'enableFeedback',
    guildId: 'guildId',
    id: 'id',
    image: 'image',
    memberLimit: 'memberLimit',
    name: 'name',
    openingMessage: 'openingMessage',
    pingRoles: 'pingRoles',
    ratelimit: 'ratelimit',
    requiredRoles: 'requiredRoles',
    requireTopic: 'requireTopic',
    staffRoles: 'staffRoles',
    totalLimit: 'totalLimit'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    comment: 'comment',
    createdAt: 'createdAt',
    guildId: 'guildId',
    rating: 'rating',
    ticketId: 'ticketId',
    userId: 'userId'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const GuildScalarFieldEnum: {
    autoClose: 'autoClose',
    autoTag: 'autoTag',
    archive: 'archive',
    blocklist: 'blocklist',
    claimButton: 'claimButton',
    closeButton: 'closeButton',
    createdAt: 'createdAt',
    errorColour: 'errorColour',
    footer: 'footer',
    id: 'id',
    locale: 'locale',
    logChannel: 'logChannel',
    primaryColour: 'primaryColour',
    staleAfter: 'staleAfter',
    successColour: 'successColour',
    workingHours: 'workingHours'
  };

  export type GuildScalarFieldEnum = (typeof GuildScalarFieldEnum)[keyof typeof GuildScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    createdAt: 'createdAt',
    id: 'id',
    categoryId: 'categoryId',
    label: 'label',
    maxLength: 'maxLength',
    minLength: 'minLength',
    options: 'options',
    order: 'order',
    placeholder: 'placeholder',
    required: 'required',
    style: 'style',
    type: 'type',
    value: 'value'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const QuestionAnswerScalarFieldEnum: {
    createdAt: 'createdAt',
    id: 'id',
    ticketId: 'ticketId',
    questionId: 'questionId',
    userId: 'userId',
    value: 'value'
  };

  export type QuestionAnswerScalarFieldEnum = (typeof QuestionAnswerScalarFieldEnum)[keyof typeof QuestionAnswerScalarFieldEnum]


  export const TagScalarFieldEnum: {
    content: 'content',
    createdAt: 'createdAt',
    guildId: 'guildId',
    id: 'id',
    name: 'name',
    regex: 'regex'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const TicketScalarFieldEnum: {
    categoryId: 'categoryId',
    claimedById: 'claimedById',
    closedAt: 'closedAt',
    closedById: 'closedById',
    closedReason: 'closedReason',
    createdAt: 'createdAt',
    createdById: 'createdById',
    deleted: 'deleted',
    firstResponseAt: 'firstResponseAt',
    guildId: 'guildId',
    id: 'id',
    lastMessageAt: 'lastMessageAt',
    messageCount: 'messageCount',
    number: 'number',
    open: 'open',
    openingMessageId: 'openingMessageId',
    pinnedMessageIds: 'pinnedMessageIds',
    priority: 'priority',
    referencesMessageId: 'referencesMessageId',
    referencesTicketId: 'referencesTicketId',
    topic: 'topic'
  };

  export type TicketScalarFieldEnum = (typeof TicketScalarFieldEnum)[keyof typeof TicketScalarFieldEnum]


  export const UserScalarFieldEnum: {
    createdAt: 'createdAt',
    id: 'id',
    messageCount: 'messageCount'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QuestionType'
   */
  export type EnumQuestionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionType'>
    


  /**
   * Reference to a field of type 'TicketPriority'
   */
  export type EnumTicketPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TicketPriority'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type ArchivedChannelWhereInput = {
    AND?: ArchivedChannelWhereInput | ArchivedChannelWhereInput[]
    OR?: ArchivedChannelWhereInput[]
    NOT?: ArchivedChannelWhereInput | ArchivedChannelWhereInput[]
    channelId?: StringFilter<"ArchivedChannel"> | string
    createdAt?: DateTimeFilter<"ArchivedChannel"> | Date | string
    name?: StringFilter<"ArchivedChannel"> | string
    ticketId?: StringFilter<"ArchivedChannel"> | string
    ticket?: XOR<TicketRelationFilter, TicketWhereInput>
  }

  export type ArchivedChannelOrderByWithRelationInput = {
    channelId?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    ticketId?: SortOrder
    ticket?: TicketOrderByWithRelationInput
  }

  export type ArchivedChannelWhereUniqueInput = Prisma.AtLeast<{
    ticketId_channelId?: ArchivedChannelTicketIdChannelIdCompoundUniqueInput
    AND?: ArchivedChannelWhereInput | ArchivedChannelWhereInput[]
    OR?: ArchivedChannelWhereInput[]
    NOT?: ArchivedChannelWhereInput | ArchivedChannelWhereInput[]
    channelId?: StringFilter<"ArchivedChannel"> | string
    createdAt?: DateTimeFilter<"ArchivedChannel"> | Date | string
    name?: StringFilter<"ArchivedChannel"> | string
    ticketId?: StringFilter<"ArchivedChannel"> | string
    ticket?: XOR<TicketRelationFilter, TicketWhereInput>
  }, "ticketId_channelId" | "ticketId_channelId">

  export type ArchivedChannelOrderByWithAggregationInput = {
    channelId?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    ticketId?: SortOrder
    _count?: ArchivedChannelCountOrderByAggregateInput
    _max?: ArchivedChannelMaxOrderByAggregateInput
    _min?: ArchivedChannelMinOrderByAggregateInput
  }

  export type ArchivedChannelScalarWhereWithAggregatesInput = {
    AND?: ArchivedChannelScalarWhereWithAggregatesInput | ArchivedChannelScalarWhereWithAggregatesInput[]
    OR?: ArchivedChannelScalarWhereWithAggregatesInput[]
    NOT?: ArchivedChannelScalarWhereWithAggregatesInput | ArchivedChannelScalarWhereWithAggregatesInput[]
    channelId?: StringWithAggregatesFilter<"ArchivedChannel"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ArchivedChannel"> | Date | string
    name?: StringWithAggregatesFilter<"ArchivedChannel"> | string
    ticketId?: StringWithAggregatesFilter<"ArchivedChannel"> | string
  }

  export type ArchivedMessageWhereInput = {
    AND?: ArchivedMessageWhereInput | ArchivedMessageWhereInput[]
    OR?: ArchivedMessageWhereInput[]
    NOT?: ArchivedMessageWhereInput | ArchivedMessageWhereInput[]
    authorId?: StringFilter<"ArchivedMessage"> | string
    content?: StringFilter<"ArchivedMessage"> | string
    createdAt?: DateTimeFilter<"ArchivedMessage"> | Date | string
    deleted?: BoolFilter<"ArchivedMessage"> | boolean
    edited?: BoolFilter<"ArchivedMessage"> | boolean
    external?: BoolFilter<"ArchivedMessage"> | boolean
    id?: StringFilter<"ArchivedMessage"> | string
    ticketId?: StringFilter<"ArchivedMessage"> | string
    author?: XOR<ArchivedUserRelationFilter, ArchivedUserWhereInput>
    ticket?: XOR<TicketRelationFilter, TicketWhereInput>
  }

  export type ArchivedMessageOrderByWithRelationInput = {
    authorId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    deleted?: SortOrder
    edited?: SortOrder
    external?: SortOrder
    id?: SortOrder
    ticketId?: SortOrder
    author?: ArchivedUserOrderByWithRelationInput
    ticket?: TicketOrderByWithRelationInput
  }

  export type ArchivedMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ArchivedMessageWhereInput | ArchivedMessageWhereInput[]
    OR?: ArchivedMessageWhereInput[]
    NOT?: ArchivedMessageWhereInput | ArchivedMessageWhereInput[]
    authorId?: StringFilter<"ArchivedMessage"> | string
    content?: StringFilter<"ArchivedMessage"> | string
    createdAt?: DateTimeFilter<"ArchivedMessage"> | Date | string
    deleted?: BoolFilter<"ArchivedMessage"> | boolean
    edited?: BoolFilter<"ArchivedMessage"> | boolean
    external?: BoolFilter<"ArchivedMessage"> | boolean
    ticketId?: StringFilter<"ArchivedMessage"> | string
    author?: XOR<ArchivedUserRelationFilter, ArchivedUserWhereInput>
    ticket?: XOR<TicketRelationFilter, TicketWhereInput>
  }, "id">

  export type ArchivedMessageOrderByWithAggregationInput = {
    authorId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    deleted?: SortOrder
    edited?: SortOrder
    external?: SortOrder
    id?: SortOrder
    ticketId?: SortOrder
    _count?: ArchivedMessageCountOrderByAggregateInput
    _max?: ArchivedMessageMaxOrderByAggregateInput
    _min?: ArchivedMessageMinOrderByAggregateInput
  }

  export type ArchivedMessageScalarWhereWithAggregatesInput = {
    AND?: ArchivedMessageScalarWhereWithAggregatesInput | ArchivedMessageScalarWhereWithAggregatesInput[]
    OR?: ArchivedMessageScalarWhereWithAggregatesInput[]
    NOT?: ArchivedMessageScalarWhereWithAggregatesInput | ArchivedMessageScalarWhereWithAggregatesInput[]
    authorId?: StringWithAggregatesFilter<"ArchivedMessage"> | string
    content?: StringWithAggregatesFilter<"ArchivedMessage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ArchivedMessage"> | Date | string
    deleted?: BoolWithAggregatesFilter<"ArchivedMessage"> | boolean
    edited?: BoolWithAggregatesFilter<"ArchivedMessage"> | boolean
    external?: BoolWithAggregatesFilter<"ArchivedMessage"> | boolean
    id?: StringWithAggregatesFilter<"ArchivedMessage"> | string
    ticketId?: StringWithAggregatesFilter<"ArchivedMessage"> | string
  }

  export type ArchivedRoleWhereInput = {
    AND?: ArchivedRoleWhereInput | ArchivedRoleWhereInput[]
    OR?: ArchivedRoleWhereInput[]
    NOT?: ArchivedRoleWhereInput | ArchivedRoleWhereInput[]
    colour?: StringFilter<"ArchivedRole"> | string
    createdAt?: DateTimeFilter<"ArchivedRole"> | Date | string
    name?: StringFilter<"ArchivedRole"> | string
    roleId?: StringFilter<"ArchivedRole"> | string
    ticketId?: StringFilter<"ArchivedRole"> | string
    archivedUsers?: ArchivedUserListRelationFilter
    ticket?: XOR<TicketRelationFilter, TicketWhereInput>
  }

  export type ArchivedRoleOrderByWithRelationInput = {
    colour?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    roleId?: SortOrder
    ticketId?: SortOrder
    archivedUsers?: ArchivedUserOrderByRelationAggregateInput
    ticket?: TicketOrderByWithRelationInput
  }

  export type ArchivedRoleWhereUniqueInput = Prisma.AtLeast<{
    ticketId_roleId?: ArchivedRoleTicketIdRoleIdCompoundUniqueInput
    AND?: ArchivedRoleWhereInput | ArchivedRoleWhereInput[]
    OR?: ArchivedRoleWhereInput[]
    NOT?: ArchivedRoleWhereInput | ArchivedRoleWhereInput[]
    colour?: StringFilter<"ArchivedRole"> | string
    createdAt?: DateTimeFilter<"ArchivedRole"> | Date | string
    name?: StringFilter<"ArchivedRole"> | string
    roleId?: StringFilter<"ArchivedRole"> | string
    ticketId?: StringFilter<"ArchivedRole"> | string
    archivedUsers?: ArchivedUserListRelationFilter
    ticket?: XOR<TicketRelationFilter, TicketWhereInput>
  }, "ticketId_roleId" | "ticketId_roleId">

  export type ArchivedRoleOrderByWithAggregationInput = {
    colour?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    roleId?: SortOrder
    ticketId?: SortOrder
    _count?: ArchivedRoleCountOrderByAggregateInput
    _max?: ArchivedRoleMaxOrderByAggregateInput
    _min?: ArchivedRoleMinOrderByAggregateInput
  }

  export type ArchivedRoleScalarWhereWithAggregatesInput = {
    AND?: ArchivedRoleScalarWhereWithAggregatesInput | ArchivedRoleScalarWhereWithAggregatesInput[]
    OR?: ArchivedRoleScalarWhereWithAggregatesInput[]
    NOT?: ArchivedRoleScalarWhereWithAggregatesInput | ArchivedRoleScalarWhereWithAggregatesInput[]
    colour?: StringWithAggregatesFilter<"ArchivedRole"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ArchivedRole"> | Date | string
    name?: StringWithAggregatesFilter<"ArchivedRole"> | string
    roleId?: StringWithAggregatesFilter<"ArchivedRole"> | string
    ticketId?: StringWithAggregatesFilter<"ArchivedRole"> | string
  }

  export type ArchivedUserWhereInput = {
    AND?: ArchivedUserWhereInput | ArchivedUserWhereInput[]
    OR?: ArchivedUserWhereInput[]
    NOT?: ArchivedUserWhereInput | ArchivedUserWhereInput[]
    avatar?: StringNullableFilter<"ArchivedUser"> | string | null
    bot?: BoolFilter<"ArchivedUser"> | boolean
    createdAt?: DateTimeFilter<"ArchivedUser"> | Date | string
    discriminator?: StringNullableFilter<"ArchivedUser"> | string | null
    displayName?: StringNullableFilter<"ArchivedUser"> | string | null
    roleId?: StringNullableFilter<"ArchivedUser"> | string | null
    ticketId?: StringFilter<"ArchivedUser"> | string
    userId?: StringFilter<"ArchivedUser"> | string
    username?: StringNullableFilter<"ArchivedUser"> | string | null
    archivedMessages?: ArchivedMessageListRelationFilter
    role?: XOR<ArchivedRoleNullableRelationFilter, ArchivedRoleWhereInput> | null
    ticket?: XOR<TicketRelationFilter, TicketWhereInput>
  }

  export type ArchivedUserOrderByWithRelationInput = {
    avatar?: SortOrderInput | SortOrder
    bot?: SortOrder
    createdAt?: SortOrder
    discriminator?: SortOrderInput | SortOrder
    displayName?: SortOrderInput | SortOrder
    roleId?: SortOrderInput | SortOrder
    ticketId?: SortOrder
    userId?: SortOrder
    username?: SortOrderInput | SortOrder
    archivedMessages?: ArchivedMessageOrderByRelationAggregateInput
    role?: ArchivedRoleOrderByWithRelationInput
    ticket?: TicketOrderByWithRelationInput
  }

  export type ArchivedUserWhereUniqueInput = Prisma.AtLeast<{
    ticketId_userId?: ArchivedUserTicketIdUserIdCompoundUniqueInput
    AND?: ArchivedUserWhereInput | ArchivedUserWhereInput[]
    OR?: ArchivedUserWhereInput[]
    NOT?: ArchivedUserWhereInput | ArchivedUserWhereInput[]
    avatar?: StringNullableFilter<"ArchivedUser"> | string | null
    bot?: BoolFilter<"ArchivedUser"> | boolean
    createdAt?: DateTimeFilter<"ArchivedUser"> | Date | string
    discriminator?: StringNullableFilter<"ArchivedUser"> | string | null
    displayName?: StringNullableFilter<"ArchivedUser"> | string | null
    roleId?: StringNullableFilter<"ArchivedUser"> | string | null
    ticketId?: StringFilter<"ArchivedUser"> | string
    userId?: StringFilter<"ArchivedUser"> | string
    username?: StringNullableFilter<"ArchivedUser"> | string | null
    archivedMessages?: ArchivedMessageListRelationFilter
    role?: XOR<ArchivedRoleNullableRelationFilter, ArchivedRoleWhereInput> | null
    ticket?: XOR<TicketRelationFilter, TicketWhereInput>
  }, "ticketId_userId" | "ticketId_userId">

  export type ArchivedUserOrderByWithAggregationInput = {
    avatar?: SortOrderInput | SortOrder
    bot?: SortOrder
    createdAt?: SortOrder
    discriminator?: SortOrderInput | SortOrder
    displayName?: SortOrderInput | SortOrder
    roleId?: SortOrderInput | SortOrder
    ticketId?: SortOrder
    userId?: SortOrder
    username?: SortOrderInput | SortOrder
    _count?: ArchivedUserCountOrderByAggregateInput
    _max?: ArchivedUserMaxOrderByAggregateInput
    _min?: ArchivedUserMinOrderByAggregateInput
  }

  export type ArchivedUserScalarWhereWithAggregatesInput = {
    AND?: ArchivedUserScalarWhereWithAggregatesInput | ArchivedUserScalarWhereWithAggregatesInput[]
    OR?: ArchivedUserScalarWhereWithAggregatesInput[]
    NOT?: ArchivedUserScalarWhereWithAggregatesInput | ArchivedUserScalarWhereWithAggregatesInput[]
    avatar?: StringNullableWithAggregatesFilter<"ArchivedUser"> | string | null
    bot?: BoolWithAggregatesFilter<"ArchivedUser"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ArchivedUser"> | Date | string
    discriminator?: StringNullableWithAggregatesFilter<"ArchivedUser"> | string | null
    displayName?: StringNullableWithAggregatesFilter<"ArchivedUser"> | string | null
    roleId?: StringNullableWithAggregatesFilter<"ArchivedUser"> | string | null
    ticketId?: StringWithAggregatesFilter<"ArchivedUser"> | string
    userId?: StringWithAggregatesFilter<"ArchivedUser"> | string
    username?: StringNullableWithAggregatesFilter<"ArchivedUser"> | string | null
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    channelName?: StringFilter<"Category"> | string
    claiming?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    cooldown?: IntNullableFilter<"Category"> | number | null
    customTopic?: StringNullableFilter<"Category"> | string | null
    description?: StringFilter<"Category"> | string
    discordCategory?: StringFilter<"Category"> | string
    emoji?: StringFilter<"Category"> | string
    enableFeedback?: BoolFilter<"Category"> | boolean
    guildId?: StringFilter<"Category"> | string
    id?: IntFilter<"Category"> | number
    image?: StringNullableFilter<"Category"> | string | null
    memberLimit?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    openingMessage?: StringFilter<"Category"> | string
    pingRoles?: JsonFilter<"Category">
    ratelimit?: IntNullableFilter<"Category"> | number | null
    requiredRoles?: JsonFilter<"Category">
    requireTopic?: BoolFilter<"Category"> | boolean
    staffRoles?: JsonFilter<"Category">
    totalLimit?: IntFilter<"Category"> | number
    guild?: XOR<GuildRelationFilter, GuildWhereInput>
    questions?: QuestionListRelationFilter
    tickets?: TicketListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    channelName?: SortOrder
    claiming?: SortOrder
    createdAt?: SortOrder
    cooldown?: SortOrderInput | SortOrder
    customTopic?: SortOrderInput | SortOrder
    description?: SortOrder
    discordCategory?: SortOrder
    emoji?: SortOrder
    enableFeedback?: SortOrder
    guildId?: SortOrder
    id?: SortOrder
    image?: SortOrderInput | SortOrder
    memberLimit?: SortOrder
    name?: SortOrder
    openingMessage?: SortOrder
    pingRoles?: SortOrder
    ratelimit?: SortOrderInput | SortOrder
    requiredRoles?: SortOrder
    requireTopic?: SortOrder
    staffRoles?: SortOrder
    totalLimit?: SortOrder
    guild?: GuildOrderByWithRelationInput
    questions?: QuestionOrderByRelationAggregateInput
    tickets?: TicketOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    channelName?: StringFilter<"Category"> | string
    claiming?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    cooldown?: IntNullableFilter<"Category"> | number | null
    customTopic?: StringNullableFilter<"Category"> | string | null
    description?: StringFilter<"Category"> | string
    discordCategory?: StringFilter<"Category"> | string
    emoji?: StringFilter<"Category"> | string
    enableFeedback?: BoolFilter<"Category"> | boolean
    guildId?: StringFilter<"Category"> | string
    image?: StringNullableFilter<"Category"> | string | null
    memberLimit?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    openingMessage?: StringFilter<"Category"> | string
    pingRoles?: JsonFilter<"Category">
    ratelimit?: IntNullableFilter<"Category"> | number | null
    requiredRoles?: JsonFilter<"Category">
    requireTopic?: BoolFilter<"Category"> | boolean
    staffRoles?: JsonFilter<"Category">
    totalLimit?: IntFilter<"Category"> | number
    guild?: XOR<GuildRelationFilter, GuildWhereInput>
    questions?: QuestionListRelationFilter
    tickets?: TicketListRelationFilter
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    channelName?: SortOrder
    claiming?: SortOrder
    createdAt?: SortOrder
    cooldown?: SortOrderInput | SortOrder
    customTopic?: SortOrderInput | SortOrder
    description?: SortOrder
    discordCategory?: SortOrder
    emoji?: SortOrder
    enableFeedback?: SortOrder
    guildId?: SortOrder
    id?: SortOrder
    image?: SortOrderInput | SortOrder
    memberLimit?: SortOrder
    name?: SortOrder
    openingMessage?: SortOrder
    pingRoles?: SortOrder
    ratelimit?: SortOrderInput | SortOrder
    requiredRoles?: SortOrder
    requireTopic?: SortOrder
    staffRoles?: SortOrder
    totalLimit?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    channelName?: StringWithAggregatesFilter<"Category"> | string
    claiming?: BoolWithAggregatesFilter<"Category"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    cooldown?: IntNullableWithAggregatesFilter<"Category"> | number | null
    customTopic?: StringNullableWithAggregatesFilter<"Category"> | string | null
    description?: StringWithAggregatesFilter<"Category"> | string
    discordCategory?: StringWithAggregatesFilter<"Category"> | string
    emoji?: StringWithAggregatesFilter<"Category"> | string
    enableFeedback?: BoolWithAggregatesFilter<"Category"> | boolean
    guildId?: StringWithAggregatesFilter<"Category"> | string
    id?: IntWithAggregatesFilter<"Category"> | number
    image?: StringNullableWithAggregatesFilter<"Category"> | string | null
    memberLimit?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
    openingMessage?: StringWithAggregatesFilter<"Category"> | string
    pingRoles?: JsonWithAggregatesFilter<"Category">
    ratelimit?: IntNullableWithAggregatesFilter<"Category"> | number | null
    requiredRoles?: JsonWithAggregatesFilter<"Category">
    requireTopic?: BoolWithAggregatesFilter<"Category"> | boolean
    staffRoles?: JsonWithAggregatesFilter<"Category">
    totalLimit?: IntWithAggregatesFilter<"Category"> | number
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    comment?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    guildId?: StringFilter<"Feedback"> | string
    rating?: IntFilter<"Feedback"> | number
    ticketId?: StringFilter<"Feedback"> | string
    userId?: StringNullableFilter<"Feedback"> | string | null
    guild?: XOR<GuildRelationFilter, GuildWhereInput>
    ticket?: XOR<TicketRelationFilter, TicketWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type FeedbackOrderByWithRelationInput = {
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    guildId?: SortOrder
    rating?: SortOrder
    ticketId?: SortOrder
    userId?: SortOrderInput | SortOrder
    guild?: GuildOrderByWithRelationInput
    ticket?: TicketOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    ticketId?: string
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    comment?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    guildId?: StringFilter<"Feedback"> | string
    rating?: IntFilter<"Feedback"> | number
    userId?: StringNullableFilter<"Feedback"> | string | null
    guild?: XOR<GuildRelationFilter, GuildWhereInput>
    ticket?: XOR<TicketRelationFilter, TicketWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "ticketId">

  export type FeedbackOrderByWithAggregationInput = {
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    guildId?: SortOrder
    rating?: SortOrder
    ticketId?: SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    comment?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
    guildId?: StringWithAggregatesFilter<"Feedback"> | string
    rating?: IntWithAggregatesFilter<"Feedback"> | number
    ticketId?: StringWithAggregatesFilter<"Feedback"> | string
    userId?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
  }

  export type GuildWhereInput = {
    AND?: GuildWhereInput | GuildWhereInput[]
    OR?: GuildWhereInput[]
    NOT?: GuildWhereInput | GuildWhereInput[]
    autoClose?: IntFilter<"Guild"> | number
    autoTag?: JsonFilter<"Guild">
    archive?: BoolFilter<"Guild"> | boolean
    blocklist?: JsonFilter<"Guild">
    claimButton?: BoolFilter<"Guild"> | boolean
    closeButton?: BoolFilter<"Guild"> | boolean
    createdAt?: DateTimeFilter<"Guild"> | Date | string
    errorColour?: StringFilter<"Guild"> | string
    footer?: StringNullableFilter<"Guild"> | string | null
    id?: StringFilter<"Guild"> | string
    locale?: StringFilter<"Guild"> | string
    logChannel?: StringNullableFilter<"Guild"> | string | null
    primaryColour?: StringFilter<"Guild"> | string
    staleAfter?: IntNullableFilter<"Guild"> | number | null
    successColour?: StringFilter<"Guild"> | string
    workingHours?: JsonFilter<"Guild">
    categories?: CategoryListRelationFilter
    feedback?: FeedbackListRelationFilter
    tags?: TagListRelationFilter
    tickets?: TicketListRelationFilter
  }

  export type GuildOrderByWithRelationInput = {
    autoClose?: SortOrder
    autoTag?: SortOrder
    archive?: SortOrder
    blocklist?: SortOrder
    claimButton?: SortOrder
    closeButton?: SortOrder
    createdAt?: SortOrder
    errorColour?: SortOrder
    footer?: SortOrderInput | SortOrder
    id?: SortOrder
    locale?: SortOrder
    logChannel?: SortOrderInput | SortOrder
    primaryColour?: SortOrder
    staleAfter?: SortOrderInput | SortOrder
    successColour?: SortOrder
    workingHours?: SortOrder
    categories?: CategoryOrderByRelationAggregateInput
    feedback?: FeedbackOrderByRelationAggregateInput
    tags?: TagOrderByRelationAggregateInput
    tickets?: TicketOrderByRelationAggregateInput
  }

  export type GuildWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GuildWhereInput | GuildWhereInput[]
    OR?: GuildWhereInput[]
    NOT?: GuildWhereInput | GuildWhereInput[]
    autoClose?: IntFilter<"Guild"> | number
    autoTag?: JsonFilter<"Guild">
    archive?: BoolFilter<"Guild"> | boolean
    blocklist?: JsonFilter<"Guild">
    claimButton?: BoolFilter<"Guild"> | boolean
    closeButton?: BoolFilter<"Guild"> | boolean
    createdAt?: DateTimeFilter<"Guild"> | Date | string
    errorColour?: StringFilter<"Guild"> | string
    footer?: StringNullableFilter<"Guild"> | string | null
    locale?: StringFilter<"Guild"> | string
    logChannel?: StringNullableFilter<"Guild"> | string | null
    primaryColour?: StringFilter<"Guild"> | string
    staleAfter?: IntNullableFilter<"Guild"> | number | null
    successColour?: StringFilter<"Guild"> | string
    workingHours?: JsonFilter<"Guild">
    categories?: CategoryListRelationFilter
    feedback?: FeedbackListRelationFilter
    tags?: TagListRelationFilter
    tickets?: TicketListRelationFilter
  }, "id">

  export type GuildOrderByWithAggregationInput = {
    autoClose?: SortOrder
    autoTag?: SortOrder
    archive?: SortOrder
    blocklist?: SortOrder
    claimButton?: SortOrder
    closeButton?: SortOrder
    createdAt?: SortOrder
    errorColour?: SortOrder
    footer?: SortOrderInput | SortOrder
    id?: SortOrder
    locale?: SortOrder
    logChannel?: SortOrderInput | SortOrder
    primaryColour?: SortOrder
    staleAfter?: SortOrderInput | SortOrder
    successColour?: SortOrder
    workingHours?: SortOrder
    _count?: GuildCountOrderByAggregateInput
    _avg?: GuildAvgOrderByAggregateInput
    _max?: GuildMaxOrderByAggregateInput
    _min?: GuildMinOrderByAggregateInput
    _sum?: GuildSumOrderByAggregateInput
  }

  export type GuildScalarWhereWithAggregatesInput = {
    AND?: GuildScalarWhereWithAggregatesInput | GuildScalarWhereWithAggregatesInput[]
    OR?: GuildScalarWhereWithAggregatesInput[]
    NOT?: GuildScalarWhereWithAggregatesInput | GuildScalarWhereWithAggregatesInput[]
    autoClose?: IntWithAggregatesFilter<"Guild"> | number
    autoTag?: JsonWithAggregatesFilter<"Guild">
    archive?: BoolWithAggregatesFilter<"Guild"> | boolean
    blocklist?: JsonWithAggregatesFilter<"Guild">
    claimButton?: BoolWithAggregatesFilter<"Guild"> | boolean
    closeButton?: BoolWithAggregatesFilter<"Guild"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Guild"> | Date | string
    errorColour?: StringWithAggregatesFilter<"Guild"> | string
    footer?: StringNullableWithAggregatesFilter<"Guild"> | string | null
    id?: StringWithAggregatesFilter<"Guild"> | string
    locale?: StringWithAggregatesFilter<"Guild"> | string
    logChannel?: StringNullableWithAggregatesFilter<"Guild"> | string | null
    primaryColour?: StringWithAggregatesFilter<"Guild"> | string
    staleAfter?: IntNullableWithAggregatesFilter<"Guild"> | number | null
    successColour?: StringWithAggregatesFilter<"Guild"> | string
    workingHours?: JsonWithAggregatesFilter<"Guild">
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    createdAt?: DateTimeFilter<"Question"> | Date | string
    id?: StringFilter<"Question"> | string
    categoryId?: IntFilter<"Question"> | number
    label?: StringFilter<"Question"> | string
    maxLength?: IntNullableFilter<"Question"> | number | null
    minLength?: IntNullableFilter<"Question"> | number | null
    options?: JsonFilter<"Question">
    order?: IntFilter<"Question"> | number
    placeholder?: StringNullableFilter<"Question"> | string | null
    required?: BoolFilter<"Question"> | boolean
    style?: IntFilter<"Question"> | number
    type?: EnumQuestionTypeFilter<"Question"> | $Enums.QuestionType
    value?: StringNullableFilter<"Question"> | string | null
    answers?: QuestionAnswerListRelationFilter
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }

  export type QuestionOrderByWithRelationInput = {
    createdAt?: SortOrder
    id?: SortOrder
    categoryId?: SortOrder
    label?: SortOrder
    maxLength?: SortOrderInput | SortOrder
    minLength?: SortOrderInput | SortOrder
    options?: SortOrder
    order?: SortOrder
    placeholder?: SortOrderInput | SortOrder
    required?: SortOrder
    style?: SortOrder
    type?: SortOrder
    value?: SortOrderInput | SortOrder
    answers?: QuestionAnswerOrderByRelationAggregateInput
    category?: CategoryOrderByWithRelationInput
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    createdAt?: DateTimeFilter<"Question"> | Date | string
    categoryId?: IntFilter<"Question"> | number
    label?: StringFilter<"Question"> | string
    maxLength?: IntNullableFilter<"Question"> | number | null
    minLength?: IntNullableFilter<"Question"> | number | null
    options?: JsonFilter<"Question">
    order?: IntFilter<"Question"> | number
    placeholder?: StringNullableFilter<"Question"> | string | null
    required?: BoolFilter<"Question"> | boolean
    style?: IntFilter<"Question"> | number
    type?: EnumQuestionTypeFilter<"Question"> | $Enums.QuestionType
    value?: StringNullableFilter<"Question"> | string | null
    answers?: QuestionAnswerListRelationFilter
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }, "id">

  export type QuestionOrderByWithAggregationInput = {
    createdAt?: SortOrder
    id?: SortOrder
    categoryId?: SortOrder
    label?: SortOrder
    maxLength?: SortOrderInput | SortOrder
    minLength?: SortOrderInput | SortOrder
    options?: SortOrder
    order?: SortOrder
    placeholder?: SortOrderInput | SortOrder
    required?: SortOrder
    style?: SortOrder
    type?: SortOrder
    value?: SortOrderInput | SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _avg?: QuestionAvgOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
    _sum?: QuestionSumOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    createdAt?: DateTimeWithAggregatesFilter<"Question"> | Date | string
    id?: StringWithAggregatesFilter<"Question"> | string
    categoryId?: IntWithAggregatesFilter<"Question"> | number
    label?: StringWithAggregatesFilter<"Question"> | string
    maxLength?: IntNullableWithAggregatesFilter<"Question"> | number | null
    minLength?: IntNullableWithAggregatesFilter<"Question"> | number | null
    options?: JsonWithAggregatesFilter<"Question">
    order?: IntWithAggregatesFilter<"Question"> | number
    placeholder?: StringNullableWithAggregatesFilter<"Question"> | string | null
    required?: BoolWithAggregatesFilter<"Question"> | boolean
    style?: IntWithAggregatesFilter<"Question"> | number
    type?: EnumQuestionTypeWithAggregatesFilter<"Question"> | $Enums.QuestionType
    value?: StringNullableWithAggregatesFilter<"Question"> | string | null
  }

  export type QuestionAnswerWhereInput = {
    AND?: QuestionAnswerWhereInput | QuestionAnswerWhereInput[]
    OR?: QuestionAnswerWhereInput[]
    NOT?: QuestionAnswerWhereInput | QuestionAnswerWhereInput[]
    createdAt?: DateTimeFilter<"QuestionAnswer"> | Date | string
    id?: IntFilter<"QuestionAnswer"> | number
    ticketId?: StringFilter<"QuestionAnswer"> | string
    questionId?: StringFilter<"QuestionAnswer"> | string
    userId?: StringFilter<"QuestionAnswer"> | string
    value?: StringNullableFilter<"QuestionAnswer"> | string | null
    ticket?: XOR<TicketRelationFilter, TicketWhereInput>
    question?: XOR<QuestionRelationFilter, QuestionWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type QuestionAnswerOrderByWithRelationInput = {
    createdAt?: SortOrder
    id?: SortOrder
    ticketId?: SortOrder
    questionId?: SortOrder
    userId?: SortOrder
    value?: SortOrderInput | SortOrder
    ticket?: TicketOrderByWithRelationInput
    question?: QuestionOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type QuestionAnswerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QuestionAnswerWhereInput | QuestionAnswerWhereInput[]
    OR?: QuestionAnswerWhereInput[]
    NOT?: QuestionAnswerWhereInput | QuestionAnswerWhereInput[]
    createdAt?: DateTimeFilter<"QuestionAnswer"> | Date | string
    ticketId?: StringFilter<"QuestionAnswer"> | string
    questionId?: StringFilter<"QuestionAnswer"> | string
    userId?: StringFilter<"QuestionAnswer"> | string
    value?: StringNullableFilter<"QuestionAnswer"> | string | null
    ticket?: XOR<TicketRelationFilter, TicketWhereInput>
    question?: XOR<QuestionRelationFilter, QuestionWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type QuestionAnswerOrderByWithAggregationInput = {
    createdAt?: SortOrder
    id?: SortOrder
    ticketId?: SortOrder
    questionId?: SortOrder
    userId?: SortOrder
    value?: SortOrderInput | SortOrder
    _count?: QuestionAnswerCountOrderByAggregateInput
    _avg?: QuestionAnswerAvgOrderByAggregateInput
    _max?: QuestionAnswerMaxOrderByAggregateInput
    _min?: QuestionAnswerMinOrderByAggregateInput
    _sum?: QuestionAnswerSumOrderByAggregateInput
  }

  export type QuestionAnswerScalarWhereWithAggregatesInput = {
    AND?: QuestionAnswerScalarWhereWithAggregatesInput | QuestionAnswerScalarWhereWithAggregatesInput[]
    OR?: QuestionAnswerScalarWhereWithAggregatesInput[]
    NOT?: QuestionAnswerScalarWhereWithAggregatesInput | QuestionAnswerScalarWhereWithAggregatesInput[]
    createdAt?: DateTimeWithAggregatesFilter<"QuestionAnswer"> | Date | string
    id?: IntWithAggregatesFilter<"QuestionAnswer"> | number
    ticketId?: StringWithAggregatesFilter<"QuestionAnswer"> | string
    questionId?: StringWithAggregatesFilter<"QuestionAnswer"> | string
    userId?: StringWithAggregatesFilter<"QuestionAnswer"> | string
    value?: StringNullableWithAggregatesFilter<"QuestionAnswer"> | string | null
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    content?: StringFilter<"Tag"> | string
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    guildId?: StringFilter<"Tag"> | string
    id?: IntFilter<"Tag"> | number
    name?: StringFilter<"Tag"> | string
    regex?: StringNullableFilter<"Tag"> | string | null
    guild?: XOR<GuildRelationFilter, GuildWhereInput>
  }

  export type TagOrderByWithRelationInput = {
    content?: SortOrder
    createdAt?: SortOrder
    guildId?: SortOrder
    id?: SortOrder
    name?: SortOrder
    regex?: SortOrderInput | SortOrder
    guild?: GuildOrderByWithRelationInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    guildId_name?: TagGuildIdNameCompoundUniqueInput
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    content?: StringFilter<"Tag"> | string
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    guildId?: StringFilter<"Tag"> | string
    name?: StringFilter<"Tag"> | string
    regex?: StringNullableFilter<"Tag"> | string | null
    guild?: XOR<GuildRelationFilter, GuildWhereInput>
  }, "id" | "guildId_name">

  export type TagOrderByWithAggregationInput = {
    content?: SortOrder
    createdAt?: SortOrder
    guildId?: SortOrder
    id?: SortOrder
    name?: SortOrder
    regex?: SortOrderInput | SortOrder
    _count?: TagCountOrderByAggregateInput
    _avg?: TagAvgOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
    _sum?: TagSumOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    content?: StringWithAggregatesFilter<"Tag"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
    guildId?: StringWithAggregatesFilter<"Tag"> | string
    id?: IntWithAggregatesFilter<"Tag"> | number
    name?: StringWithAggregatesFilter<"Tag"> | string
    regex?: StringNullableWithAggregatesFilter<"Tag"> | string | null
  }

  export type TicketWhereInput = {
    AND?: TicketWhereInput | TicketWhereInput[]
    OR?: TicketWhereInput[]
    NOT?: TicketWhereInput | TicketWhereInput[]
    categoryId?: IntNullableFilter<"Ticket"> | number | null
    claimedById?: StringNullableFilter<"Ticket"> | string | null
    closedAt?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    closedById?: StringNullableFilter<"Ticket"> | string | null
    closedReason?: StringNullableFilter<"Ticket"> | string | null
    createdAt?: DateTimeFilter<"Ticket"> | Date | string
    createdById?: StringFilter<"Ticket"> | string
    deleted?: BoolFilter<"Ticket"> | boolean
    firstResponseAt?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    guildId?: StringFilter<"Ticket"> | string
    id?: StringFilter<"Ticket"> | string
    lastMessageAt?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    messageCount?: IntNullableFilter<"Ticket"> | number | null
    number?: IntFilter<"Ticket"> | number
    open?: BoolFilter<"Ticket"> | boolean
    openingMessageId?: StringFilter<"Ticket"> | string
    pinnedMessageIds?: JsonFilter<"Ticket">
    priority?: EnumTicketPriorityNullableFilter<"Ticket"> | $Enums.TicketPriority | null
    referencesMessageId?: StringNullableFilter<"Ticket"> | string | null
    referencesTicketId?: StringNullableFilter<"Ticket"> | string | null
    topic?: StringNullableFilter<"Ticket"> | string | null
    archivedChannels?: ArchivedChannelListRelationFilter
    archivedMessages?: ArchivedMessageListRelationFilter
    archivedRoles?: ArchivedRoleListRelationFilter
    archivedUsers?: ArchivedUserListRelationFilter
    category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    claimedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    closedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    feedback?: XOR<FeedbackNullableRelationFilter, FeedbackWhereInput> | null
    guild?: XOR<GuildRelationFilter, GuildWhereInput>
    referencedBy?: TicketListRelationFilter
    referencesTicket?: XOR<TicketNullableRelationFilter, TicketWhereInput> | null
    questionAnswers?: QuestionAnswerListRelationFilter
  }

  export type TicketOrderByWithRelationInput = {
    categoryId?: SortOrderInput | SortOrder
    claimedById?: SortOrderInput | SortOrder
    closedAt?: SortOrderInput | SortOrder
    closedById?: SortOrderInput | SortOrder
    closedReason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    deleted?: SortOrder
    firstResponseAt?: SortOrderInput | SortOrder
    guildId?: SortOrder
    id?: SortOrder
    lastMessageAt?: SortOrderInput | SortOrder
    messageCount?: SortOrderInput | SortOrder
    number?: SortOrder
    open?: SortOrder
    openingMessageId?: SortOrder
    pinnedMessageIds?: SortOrder
    priority?: SortOrderInput | SortOrder
    referencesMessageId?: SortOrderInput | SortOrder
    referencesTicketId?: SortOrderInput | SortOrder
    topic?: SortOrderInput | SortOrder
    archivedChannels?: ArchivedChannelOrderByRelationAggregateInput
    archivedMessages?: ArchivedMessageOrderByRelationAggregateInput
    archivedRoles?: ArchivedRoleOrderByRelationAggregateInput
    archivedUsers?: ArchivedUserOrderByRelationAggregateInput
    category?: CategoryOrderByWithRelationInput
    claimedBy?: UserOrderByWithRelationInput
    closedBy?: UserOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    feedback?: FeedbackOrderByWithRelationInput
    guild?: GuildOrderByWithRelationInput
    referencedBy?: TicketOrderByRelationAggregateInput
    referencesTicket?: TicketOrderByWithRelationInput
    questionAnswers?: QuestionAnswerOrderByRelationAggregateInput
  }

  export type TicketWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    guildId_number?: TicketGuildIdNumberCompoundUniqueInput
    AND?: TicketWhereInput | TicketWhereInput[]
    OR?: TicketWhereInput[]
    NOT?: TicketWhereInput | TicketWhereInput[]
    categoryId?: IntNullableFilter<"Ticket"> | number | null
    claimedById?: StringNullableFilter<"Ticket"> | string | null
    closedAt?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    closedById?: StringNullableFilter<"Ticket"> | string | null
    closedReason?: StringNullableFilter<"Ticket"> | string | null
    createdAt?: DateTimeFilter<"Ticket"> | Date | string
    createdById?: StringFilter<"Ticket"> | string
    deleted?: BoolFilter<"Ticket"> | boolean
    firstResponseAt?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    guildId?: StringFilter<"Ticket"> | string
    lastMessageAt?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    messageCount?: IntNullableFilter<"Ticket"> | number | null
    number?: IntFilter<"Ticket"> | number
    open?: BoolFilter<"Ticket"> | boolean
    openingMessageId?: StringFilter<"Ticket"> | string
    pinnedMessageIds?: JsonFilter<"Ticket">
    priority?: EnumTicketPriorityNullableFilter<"Ticket"> | $Enums.TicketPriority | null
    referencesMessageId?: StringNullableFilter<"Ticket"> | string | null
    referencesTicketId?: StringNullableFilter<"Ticket"> | string | null
    topic?: StringNullableFilter<"Ticket"> | string | null
    archivedChannels?: ArchivedChannelListRelationFilter
    archivedMessages?: ArchivedMessageListRelationFilter
    archivedRoles?: ArchivedRoleListRelationFilter
    archivedUsers?: ArchivedUserListRelationFilter
    category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    claimedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    closedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    feedback?: XOR<FeedbackNullableRelationFilter, FeedbackWhereInput> | null
    guild?: XOR<GuildRelationFilter, GuildWhereInput>
    referencedBy?: TicketListRelationFilter
    referencesTicket?: XOR<TicketNullableRelationFilter, TicketWhereInput> | null
    questionAnswers?: QuestionAnswerListRelationFilter
  }, "id" | "guildId_number">

  export type TicketOrderByWithAggregationInput = {
    categoryId?: SortOrderInput | SortOrder
    claimedById?: SortOrderInput | SortOrder
    closedAt?: SortOrderInput | SortOrder
    closedById?: SortOrderInput | SortOrder
    closedReason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    deleted?: SortOrder
    firstResponseAt?: SortOrderInput | SortOrder
    guildId?: SortOrder
    id?: SortOrder
    lastMessageAt?: SortOrderInput | SortOrder
    messageCount?: SortOrderInput | SortOrder
    number?: SortOrder
    open?: SortOrder
    openingMessageId?: SortOrder
    pinnedMessageIds?: SortOrder
    priority?: SortOrderInput | SortOrder
    referencesMessageId?: SortOrderInput | SortOrder
    referencesTicketId?: SortOrderInput | SortOrder
    topic?: SortOrderInput | SortOrder
    _count?: TicketCountOrderByAggregateInput
    _avg?: TicketAvgOrderByAggregateInput
    _max?: TicketMaxOrderByAggregateInput
    _min?: TicketMinOrderByAggregateInput
    _sum?: TicketSumOrderByAggregateInput
  }

  export type TicketScalarWhereWithAggregatesInput = {
    AND?: TicketScalarWhereWithAggregatesInput | TicketScalarWhereWithAggregatesInput[]
    OR?: TicketScalarWhereWithAggregatesInput[]
    NOT?: TicketScalarWhereWithAggregatesInput | TicketScalarWhereWithAggregatesInput[]
    categoryId?: IntNullableWithAggregatesFilter<"Ticket"> | number | null
    claimedById?: StringNullableWithAggregatesFilter<"Ticket"> | string | null
    closedAt?: DateTimeNullableWithAggregatesFilter<"Ticket"> | Date | string | null
    closedById?: StringNullableWithAggregatesFilter<"Ticket"> | string | null
    closedReason?: StringNullableWithAggregatesFilter<"Ticket"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Ticket"> | Date | string
    createdById?: StringWithAggregatesFilter<"Ticket"> | string
    deleted?: BoolWithAggregatesFilter<"Ticket"> | boolean
    firstResponseAt?: DateTimeNullableWithAggregatesFilter<"Ticket"> | Date | string | null
    guildId?: StringWithAggregatesFilter<"Ticket"> | string
    id?: StringWithAggregatesFilter<"Ticket"> | string
    lastMessageAt?: DateTimeNullableWithAggregatesFilter<"Ticket"> | Date | string | null
    messageCount?: IntNullableWithAggregatesFilter<"Ticket"> | number | null
    number?: IntWithAggregatesFilter<"Ticket"> | number
    open?: BoolWithAggregatesFilter<"Ticket"> | boolean
    openingMessageId?: StringWithAggregatesFilter<"Ticket"> | string
    pinnedMessageIds?: JsonWithAggregatesFilter<"Ticket">
    priority?: EnumTicketPriorityNullableWithAggregatesFilter<"Ticket"> | $Enums.TicketPriority | null
    referencesMessageId?: StringNullableWithAggregatesFilter<"Ticket"> | string | null
    referencesTicketId?: StringNullableWithAggregatesFilter<"Ticket"> | string | null
    topic?: StringNullableWithAggregatesFilter<"Ticket"> | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    id?: StringFilter<"User"> | string
    messageCount?: IntFilter<"User"> | number
    feedback?: FeedbackListRelationFilter
    ticketsCreated?: TicketListRelationFilter
    ticketsClosed?: TicketListRelationFilter
    ticketsClaimed?: TicketListRelationFilter
    questionAnswers?: QuestionAnswerListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    createdAt?: SortOrder
    id?: SortOrder
    messageCount?: SortOrder
    feedback?: FeedbackOrderByRelationAggregateInput
    ticketsCreated?: TicketOrderByRelationAggregateInput
    ticketsClosed?: TicketOrderByRelationAggregateInput
    ticketsClaimed?: TicketOrderByRelationAggregateInput
    questionAnswers?: QuestionAnswerOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    messageCount?: IntFilter<"User"> | number
    feedback?: FeedbackListRelationFilter
    ticketsCreated?: TicketListRelationFilter
    ticketsClosed?: TicketListRelationFilter
    ticketsClaimed?: TicketListRelationFilter
    questionAnswers?: QuestionAnswerListRelationFilter
  }, "id">

  export type UserOrderByWithAggregationInput = {
    createdAt?: SortOrder
    id?: SortOrder
    messageCount?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    id?: StringWithAggregatesFilter<"User"> | string
    messageCount?: IntWithAggregatesFilter<"User"> | number
  }

  export type ArchivedChannelCreateInput = {
    channelId: string
    createdAt?: Date | string
    name: string
    ticket: TicketCreateNestedOneWithoutArchivedChannelsInput
  }

  export type ArchivedChannelUncheckedCreateInput = {
    channelId: string
    createdAt?: Date | string
    name: string
    ticketId: string
  }

  export type ArchivedChannelUpdateInput = {
    channelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    ticket?: TicketUpdateOneRequiredWithoutArchivedChannelsNestedInput
  }

  export type ArchivedChannelUncheckedUpdateInput = {
    channelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    ticketId?: StringFieldUpdateOperationsInput | string
  }

  export type ArchivedChannelCreateManyInput = {
    channelId: string
    createdAt?: Date | string
    name: string
    ticketId: string
  }

  export type ArchivedChannelUpdateManyMutationInput = {
    channelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ArchivedChannelUncheckedUpdateManyInput = {
    channelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    ticketId?: StringFieldUpdateOperationsInput | string
  }

  export type ArchivedMessageCreateInput = {
    content: string
    createdAt?: Date | string
    deleted?: boolean
    edited?: boolean
    external?: boolean
    id: string
    author: ArchivedUserCreateNestedOneWithoutArchivedMessagesInput
    ticket: TicketCreateNestedOneWithoutArchivedMessagesInput
  }

  export type ArchivedMessageUncheckedCreateInput = {
    authorId: string
    content: string
    createdAt?: Date | string
    deleted?: boolean
    edited?: boolean
    external?: boolean
    id: string
    ticketId: string
  }

  export type ArchivedMessageUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    edited?: BoolFieldUpdateOperationsInput | boolean
    external?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    author?: ArchivedUserUpdateOneRequiredWithoutArchivedMessagesNestedInput
    ticket?: TicketUpdateOneRequiredWithoutArchivedMessagesNestedInput
  }

  export type ArchivedMessageUncheckedUpdateInput = {
    authorId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    edited?: BoolFieldUpdateOperationsInput | boolean
    external?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    ticketId?: StringFieldUpdateOperationsInput | string
  }

  export type ArchivedMessageCreateManyInput = {
    authorId: string
    content: string
    createdAt?: Date | string
    deleted?: boolean
    edited?: boolean
    external?: boolean
    id: string
    ticketId: string
  }

  export type ArchivedMessageUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    edited?: BoolFieldUpdateOperationsInput | boolean
    external?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ArchivedMessageUncheckedUpdateManyInput = {
    authorId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    edited?: BoolFieldUpdateOperationsInput | boolean
    external?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    ticketId?: StringFieldUpdateOperationsInput | string
  }

  export type ArchivedRoleCreateInput = {
    colour?: string
    createdAt?: Date | string
    name: string
    roleId: string
    archivedUsers?: ArchivedUserCreateNestedManyWithoutRoleInput
    ticket: TicketCreateNestedOneWithoutArchivedRolesInput
  }

  export type ArchivedRoleUncheckedCreateInput = {
    colour?: string
    createdAt?: Date | string
    name: string
    roleId: string
    ticketId: string
    archivedUsers?: ArchivedUserUncheckedCreateNestedManyWithoutRoleInput
  }

  export type ArchivedRoleUpdateInput = {
    colour?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    archivedUsers?: ArchivedUserUpdateManyWithoutRoleNestedInput
    ticket?: TicketUpdateOneRequiredWithoutArchivedRolesNestedInput
  }

  export type ArchivedRoleUncheckedUpdateInput = {
    colour?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    ticketId?: StringFieldUpdateOperationsInput | string
    archivedUsers?: ArchivedUserUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type ArchivedRoleCreateManyInput = {
    colour?: string
    createdAt?: Date | string
    name: string
    roleId: string
    ticketId: string
  }

  export type ArchivedRoleUpdateManyMutationInput = {
    colour?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type ArchivedRoleUncheckedUpdateManyInput = {
    colour?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    ticketId?: StringFieldUpdateOperationsInput | string
  }

  export type ArchivedUserCreateInput = {
    avatar?: string | null
    bot?: boolean
    createdAt?: Date | string
    discriminator?: string | null
    displayName?: string | null
    userId: string
    username?: string | null
    archivedMessages?: ArchivedMessageCreateNestedManyWithoutAuthorInput
    role?: ArchivedRoleCreateNestedOneWithoutArchivedUsersInput
    ticket: TicketCreateNestedOneWithoutArchivedUsersInput
  }

  export type ArchivedUserUncheckedCreateInput = {
    avatar?: string | null
    bot?: boolean
    createdAt?: Date | string
    discriminator?: string | null
    displayName?: string | null
    roleId?: string | null
    ticketId: string
    userId: string
    username?: string | null
    archivedMessages?: ArchivedMessageUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type ArchivedUserUpdateInput = {
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discriminator?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    archivedMessages?: ArchivedMessageUpdateManyWithoutAuthorNestedInput
    role?: ArchivedRoleUpdateOneWithoutArchivedUsersNestedInput
    ticket?: TicketUpdateOneRequiredWithoutArchivedUsersNestedInput
  }

  export type ArchivedUserUncheckedUpdateInput = {
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discriminator?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    ticketId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    archivedMessages?: ArchivedMessageUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type ArchivedUserCreateManyInput = {
    avatar?: string | null
    bot?: boolean
    createdAt?: Date | string
    discriminator?: string | null
    displayName?: string | null
    roleId?: string | null
    ticketId: string
    userId: string
    username?: string | null
  }

  export type ArchivedUserUpdateManyMutationInput = {
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discriminator?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ArchivedUserUncheckedUpdateManyInput = {
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discriminator?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    ticketId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryCreateInput = {
    channelName: string
    claiming?: boolean
    createdAt?: Date | string
    cooldown?: number | null
    customTopic?: string | null
    description: string
    discordCategory: string
    emoji: string
    enableFeedback?: boolean
    image?: string | null
    memberLimit?: number
    name: string
    openingMessage: string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: boolean
    staffRoles: JsonNullValueInput | InputJsonValue
    totalLimit?: number
    guild: GuildCreateNestedOneWithoutCategoriesInput
    questions?: QuestionCreateNestedManyWithoutCategoryInput
    tickets?: TicketCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    channelName: string
    claiming?: boolean
    createdAt?: Date | string
    cooldown?: number | null
    customTopic?: string | null
    description: string
    discordCategory: string
    emoji: string
    enableFeedback?: boolean
    guildId: string
    id?: number
    image?: string | null
    memberLimit?: number
    name: string
    openingMessage: string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: boolean
    staffRoles: JsonNullValueInput | InputJsonValue
    totalLimit?: number
    questions?: QuestionUncheckedCreateNestedManyWithoutCategoryInput
    tickets?: TicketUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    channelName?: StringFieldUpdateOperationsInput | string
    claiming?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cooldown?: NullableIntFieldUpdateOperationsInput | number | null
    customTopic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    discordCategory?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    enableFeedback?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    memberLimit?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    openingMessage?: StringFieldUpdateOperationsInput | string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: NullableIntFieldUpdateOperationsInput | number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: BoolFieldUpdateOperationsInput | boolean
    staffRoles?: JsonNullValueInput | InputJsonValue
    totalLimit?: IntFieldUpdateOperationsInput | number
    guild?: GuildUpdateOneRequiredWithoutCategoriesNestedInput
    questions?: QuestionUpdateManyWithoutCategoryNestedInput
    tickets?: TicketUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    channelName?: StringFieldUpdateOperationsInput | string
    claiming?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cooldown?: NullableIntFieldUpdateOperationsInput | number | null
    customTopic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    discordCategory?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    enableFeedback?: BoolFieldUpdateOperationsInput | boolean
    guildId?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    memberLimit?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    openingMessage?: StringFieldUpdateOperationsInput | string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: NullableIntFieldUpdateOperationsInput | number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: BoolFieldUpdateOperationsInput | boolean
    staffRoles?: JsonNullValueInput | InputJsonValue
    totalLimit?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUncheckedUpdateManyWithoutCategoryNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    channelName: string
    claiming?: boolean
    createdAt?: Date | string
    cooldown?: number | null
    customTopic?: string | null
    description: string
    discordCategory: string
    emoji: string
    enableFeedback?: boolean
    guildId: string
    id?: number
    image?: string | null
    memberLimit?: number
    name: string
    openingMessage: string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: boolean
    staffRoles: JsonNullValueInput | InputJsonValue
    totalLimit?: number
  }

  export type CategoryUpdateManyMutationInput = {
    channelName?: StringFieldUpdateOperationsInput | string
    claiming?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cooldown?: NullableIntFieldUpdateOperationsInput | number | null
    customTopic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    discordCategory?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    enableFeedback?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    memberLimit?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    openingMessage?: StringFieldUpdateOperationsInput | string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: NullableIntFieldUpdateOperationsInput | number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: BoolFieldUpdateOperationsInput | boolean
    staffRoles?: JsonNullValueInput | InputJsonValue
    totalLimit?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryUncheckedUpdateManyInput = {
    channelName?: StringFieldUpdateOperationsInput | string
    claiming?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cooldown?: NullableIntFieldUpdateOperationsInput | number | null
    customTopic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    discordCategory?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    enableFeedback?: BoolFieldUpdateOperationsInput | boolean
    guildId?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    memberLimit?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    openingMessage?: StringFieldUpdateOperationsInput | string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: NullableIntFieldUpdateOperationsInput | number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: BoolFieldUpdateOperationsInput | boolean
    staffRoles?: JsonNullValueInput | InputJsonValue
    totalLimit?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackCreateInput = {
    comment?: string | null
    createdAt?: Date | string
    rating: number
    guild: GuildCreateNestedOneWithoutFeedbackInput
    ticket: TicketCreateNestedOneWithoutFeedbackInput
    user?: UserCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateInput = {
    comment?: string | null
    createdAt?: Date | string
    guildId: string
    rating: number
    ticketId: string
    userId?: string | null
  }

  export type FeedbackUpdateInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    guild?: GuildUpdateOneRequiredWithoutFeedbackNestedInput
    ticket?: TicketUpdateOneRequiredWithoutFeedbackNestedInput
    user?: UserUpdateOneWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guildId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    ticketId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackCreateManyInput = {
    comment?: string | null
    createdAt?: Date | string
    guildId: string
    rating: number
    ticketId: string
    userId?: string | null
  }

  export type FeedbackUpdateManyMutationInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackUncheckedUpdateManyInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guildId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    ticketId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GuildCreateInput = {
    autoClose?: number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: boolean
    closeButton?: boolean
    createdAt?: Date | string
    errorColour?: string
    footer?: string | null
    id: string
    locale?: string
    logChannel?: string | null
    primaryColour?: string
    staleAfter?: number | null
    successColour?: string
    workingHours?: JsonNullValueInput | InputJsonValue
    categories?: CategoryCreateNestedManyWithoutGuildInput
    feedback?: FeedbackCreateNestedManyWithoutGuildInput
    tags?: TagCreateNestedManyWithoutGuildInput
    tickets?: TicketCreateNestedManyWithoutGuildInput
  }

  export type GuildUncheckedCreateInput = {
    autoClose?: number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: boolean
    closeButton?: boolean
    createdAt?: Date | string
    errorColour?: string
    footer?: string | null
    id: string
    locale?: string
    logChannel?: string | null
    primaryColour?: string
    staleAfter?: number | null
    successColour?: string
    workingHours?: JsonNullValueInput | InputJsonValue
    categories?: CategoryUncheckedCreateNestedManyWithoutGuildInput
    feedback?: FeedbackUncheckedCreateNestedManyWithoutGuildInput
    tags?: TagUncheckedCreateNestedManyWithoutGuildInput
    tickets?: TicketUncheckedCreateNestedManyWithoutGuildInput
  }

  export type GuildUpdateInput = {
    autoClose?: IntFieldUpdateOperationsInput | number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: BoolFieldUpdateOperationsInput | boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: BoolFieldUpdateOperationsInput | boolean
    closeButton?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorColour?: StringFieldUpdateOperationsInput | string
    footer?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    locale?: StringFieldUpdateOperationsInput | string
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColour?: StringFieldUpdateOperationsInput | string
    staleAfter?: NullableIntFieldUpdateOperationsInput | number | null
    successColour?: StringFieldUpdateOperationsInput | string
    workingHours?: JsonNullValueInput | InputJsonValue
    categories?: CategoryUpdateManyWithoutGuildNestedInput
    feedback?: FeedbackUpdateManyWithoutGuildNestedInput
    tags?: TagUpdateManyWithoutGuildNestedInput
    tickets?: TicketUpdateManyWithoutGuildNestedInput
  }

  export type GuildUncheckedUpdateInput = {
    autoClose?: IntFieldUpdateOperationsInput | number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: BoolFieldUpdateOperationsInput | boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: BoolFieldUpdateOperationsInput | boolean
    closeButton?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorColour?: StringFieldUpdateOperationsInput | string
    footer?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    locale?: StringFieldUpdateOperationsInput | string
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColour?: StringFieldUpdateOperationsInput | string
    staleAfter?: NullableIntFieldUpdateOperationsInput | number | null
    successColour?: StringFieldUpdateOperationsInput | string
    workingHours?: JsonNullValueInput | InputJsonValue
    categories?: CategoryUncheckedUpdateManyWithoutGuildNestedInput
    feedback?: FeedbackUncheckedUpdateManyWithoutGuildNestedInput
    tags?: TagUncheckedUpdateManyWithoutGuildNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutGuildNestedInput
  }

  export type GuildCreateManyInput = {
    autoClose?: number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: boolean
    closeButton?: boolean
    createdAt?: Date | string
    errorColour?: string
    footer?: string | null
    id: string
    locale?: string
    logChannel?: string | null
    primaryColour?: string
    staleAfter?: number | null
    successColour?: string
    workingHours?: JsonNullValueInput | InputJsonValue
  }

  export type GuildUpdateManyMutationInput = {
    autoClose?: IntFieldUpdateOperationsInput | number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: BoolFieldUpdateOperationsInput | boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: BoolFieldUpdateOperationsInput | boolean
    closeButton?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorColour?: StringFieldUpdateOperationsInput | string
    footer?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    locale?: StringFieldUpdateOperationsInput | string
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColour?: StringFieldUpdateOperationsInput | string
    staleAfter?: NullableIntFieldUpdateOperationsInput | number | null
    successColour?: StringFieldUpdateOperationsInput | string
    workingHours?: JsonNullValueInput | InputJsonValue
  }

  export type GuildUncheckedUpdateManyInput = {
    autoClose?: IntFieldUpdateOperationsInput | number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: BoolFieldUpdateOperationsInput | boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: BoolFieldUpdateOperationsInput | boolean
    closeButton?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorColour?: StringFieldUpdateOperationsInput | string
    footer?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    locale?: StringFieldUpdateOperationsInput | string
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColour?: StringFieldUpdateOperationsInput | string
    staleAfter?: NullableIntFieldUpdateOperationsInput | number | null
    successColour?: StringFieldUpdateOperationsInput | string
    workingHours?: JsonNullValueInput | InputJsonValue
  }

  export type QuestionCreateInput = {
    createdAt?: Date | string
    id?: string
    label: string
    maxLength?: number | null
    minLength?: number | null
    options?: JsonNullValueInput | InputJsonValue
    order: number
    placeholder?: string | null
    required?: boolean
    style?: number
    type?: $Enums.QuestionType
    value?: string | null
    answers?: QuestionAnswerCreateNestedManyWithoutQuestionInput
    category: CategoryCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionUncheckedCreateInput = {
    createdAt?: Date | string
    id?: string
    categoryId: number
    label: string
    maxLength?: number | null
    minLength?: number | null
    options?: JsonNullValueInput | InputJsonValue
    order: number
    placeholder?: string | null
    required?: boolean
    style?: number
    type?: $Enums.QuestionType
    value?: string | null
    answers?: QuestionAnswerUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    maxLength?: NullableIntFieldUpdateOperationsInput | number | null
    minLength?: NullableIntFieldUpdateOperationsInput | number | null
    options?: JsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    placeholder?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    style?: IntFieldUpdateOperationsInput | number
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    value?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: QuestionAnswerUpdateManyWithoutQuestionNestedInput
    category?: CategoryUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    maxLength?: NullableIntFieldUpdateOperationsInput | number | null
    minLength?: NullableIntFieldUpdateOperationsInput | number | null
    options?: JsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    placeholder?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    style?: IntFieldUpdateOperationsInput | number
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    value?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: QuestionAnswerUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionCreateManyInput = {
    createdAt?: Date | string
    id?: string
    categoryId: number
    label: string
    maxLength?: number | null
    minLength?: number | null
    options?: JsonNullValueInput | InputJsonValue
    order: number
    placeholder?: string | null
    required?: boolean
    style?: number
    type?: $Enums.QuestionType
    value?: string | null
  }

  export type QuestionUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    maxLength?: NullableIntFieldUpdateOperationsInput | number | null
    minLength?: NullableIntFieldUpdateOperationsInput | number | null
    options?: JsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    placeholder?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    style?: IntFieldUpdateOperationsInput | number
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    maxLength?: NullableIntFieldUpdateOperationsInput | number | null
    minLength?: NullableIntFieldUpdateOperationsInput | number | null
    options?: JsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    placeholder?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    style?: IntFieldUpdateOperationsInput | number
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionAnswerCreateInput = {
    createdAt?: Date | string
    value?: string | null
    ticket: TicketCreateNestedOneWithoutQuestionAnswersInput
    question: QuestionCreateNestedOneWithoutAnswersInput
    user: UserCreateNestedOneWithoutQuestionAnswersInput
  }

  export type QuestionAnswerUncheckedCreateInput = {
    createdAt?: Date | string
    id?: number
    ticketId: string
    questionId: string
    userId: string
    value?: string | null
  }

  export type QuestionAnswerUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    ticket?: TicketUpdateOneRequiredWithoutQuestionAnswersNestedInput
    question?: QuestionUpdateOneRequiredWithoutAnswersNestedInput
    user?: UserUpdateOneRequiredWithoutQuestionAnswersNestedInput
  }

  export type QuestionAnswerUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    ticketId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionAnswerCreateManyInput = {
    createdAt?: Date | string
    id?: number
    ticketId: string
    questionId: string
    userId: string
    value?: string | null
  }

  export type QuestionAnswerUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionAnswerUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    ticketId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagCreateInput = {
    content: string
    createdAt?: Date | string
    name: string
    regex?: string | null
    guild: GuildCreateNestedOneWithoutTagsInput
  }

  export type TagUncheckedCreateInput = {
    content: string
    createdAt?: Date | string
    guildId: string
    id?: number
    name: string
    regex?: string | null
  }

  export type TagUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    regex?: NullableStringFieldUpdateOperationsInput | string | null
    guild?: GuildUpdateOneRequiredWithoutTagsNestedInput
  }

  export type TagUncheckedUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guildId?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    regex?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagCreateManyInput = {
    content: string
    createdAt?: Date | string
    guildId: string
    id?: number
    name: string
    regex?: string | null
  }

  export type TagUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    regex?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagUncheckedUpdateManyInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guildId?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    regex?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TicketCreateInput = {
    closedAt?: Date | string | null
    closedReason?: string | null
    createdAt?: Date | string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserCreateNestedManyWithoutTicketInput
    category?: CategoryCreateNestedOneWithoutTicketsInput
    claimedBy?: UserCreateNestedOneWithoutTicketsClaimedInput
    closedBy?: UserCreateNestedOneWithoutTicketsClosedInput
    createdBy: UserCreateNestedOneWithoutTicketsCreatedInput
    feedback?: FeedbackCreateNestedOneWithoutTicketInput
    guild: GuildCreateNestedOneWithoutTicketsInput
    referencedBy?: TicketCreateNestedManyWithoutReferencesTicketInput
    referencesTicket?: TicketCreateNestedOneWithoutReferencedByInput
    questionAnswers?: QuestionAnswerCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateInput = {
    categoryId?: number | null
    claimedById?: string | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelUncheckedCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageUncheckedCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleUncheckedCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserUncheckedCreateNestedManyWithoutTicketInput
    feedback?: FeedbackUncheckedCreateNestedOneWithoutTicketInput
    referencedBy?: TicketUncheckedCreateNestedManyWithoutReferencesTicketInput
    questionAnswers?: QuestionAnswerUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketUpdateInput = {
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUpdateManyWithoutTicketNestedInput
    category?: CategoryUpdateOneWithoutTicketsNestedInput
    claimedBy?: UserUpdateOneWithoutTicketsClaimedNestedInput
    closedBy?: UserUpdateOneWithoutTicketsClosedNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTicketsCreatedNestedInput
    feedback?: FeedbackUpdateOneWithoutTicketNestedInput
    guild?: GuildUpdateOneRequiredWithoutTicketsNestedInput
    referencedBy?: TicketUpdateManyWithoutReferencesTicketNestedInput
    referencesTicket?: TicketUpdateOneWithoutReferencedByNestedInput
    questionAnswers?: QuestionAnswerUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUncheckedUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUncheckedUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUncheckedUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUncheckedUpdateManyWithoutTicketNestedInput
    feedback?: FeedbackUncheckedUpdateOneWithoutTicketNestedInput
    referencedBy?: TicketUncheckedUpdateManyWithoutReferencesTicketNestedInput
    questionAnswers?: QuestionAnswerUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketCreateManyInput = {
    categoryId?: number | null
    claimedById?: string | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
  }

  export type TicketUpdateManyMutationInput = {
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TicketUncheckedUpdateManyInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateInput = {
    createdAt?: Date | string
    id: string
    messageCount?: number
    feedback?: FeedbackCreateNestedManyWithoutUserInput
    ticketsCreated?: TicketCreateNestedManyWithoutCreatedByInput
    ticketsClosed?: TicketCreateNestedManyWithoutClosedByInput
    ticketsClaimed?: TicketCreateNestedManyWithoutClaimedByInput
    questionAnswers?: QuestionAnswerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    createdAt?: Date | string
    id: string
    messageCount?: number
    feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    ticketsCreated?: TicketUncheckedCreateNestedManyWithoutCreatedByInput
    ticketsClosed?: TicketUncheckedCreateNestedManyWithoutClosedByInput
    ticketsClaimed?: TicketUncheckedCreateNestedManyWithoutClaimedByInput
    questionAnswers?: QuestionAnswerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    messageCount?: IntFieldUpdateOperationsInput | number
    feedback?: FeedbackUpdateManyWithoutUserNestedInput
    ticketsCreated?: TicketUpdateManyWithoutCreatedByNestedInput
    ticketsClosed?: TicketUpdateManyWithoutClosedByNestedInput
    ticketsClaimed?: TicketUpdateManyWithoutClaimedByNestedInput
    questionAnswers?: QuestionAnswerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    messageCount?: IntFieldUpdateOperationsInput | number
    feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    ticketsCreated?: TicketUncheckedUpdateManyWithoutCreatedByNestedInput
    ticketsClosed?: TicketUncheckedUpdateManyWithoutClosedByNestedInput
    ticketsClaimed?: TicketUncheckedUpdateManyWithoutClaimedByNestedInput
    questionAnswers?: QuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    createdAt?: Date | string
    id: string
    messageCount?: number
  }

  export type UserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    messageCount?: IntFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    messageCount?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TicketRelationFilter = {
    is?: TicketWhereInput
    isNot?: TicketWhereInput
  }

  export type ArchivedChannelTicketIdChannelIdCompoundUniqueInput = {
    ticketId: string
    channelId: string
  }

  export type ArchivedChannelCountOrderByAggregateInput = {
    channelId?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    ticketId?: SortOrder
  }

  export type ArchivedChannelMaxOrderByAggregateInput = {
    channelId?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    ticketId?: SortOrder
  }

  export type ArchivedChannelMinOrderByAggregateInput = {
    channelId?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    ticketId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ArchivedUserRelationFilter = {
    is?: ArchivedUserWhereInput
    isNot?: ArchivedUserWhereInput
  }

  export type ArchivedMessageCountOrderByAggregateInput = {
    authorId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    deleted?: SortOrder
    edited?: SortOrder
    external?: SortOrder
    id?: SortOrder
    ticketId?: SortOrder
  }

  export type ArchivedMessageMaxOrderByAggregateInput = {
    authorId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    deleted?: SortOrder
    edited?: SortOrder
    external?: SortOrder
    id?: SortOrder
    ticketId?: SortOrder
  }

  export type ArchivedMessageMinOrderByAggregateInput = {
    authorId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    deleted?: SortOrder
    edited?: SortOrder
    external?: SortOrder
    id?: SortOrder
    ticketId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ArchivedUserListRelationFilter = {
    every?: ArchivedUserWhereInput
    some?: ArchivedUserWhereInput
    none?: ArchivedUserWhereInput
  }

  export type ArchivedUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArchivedRoleTicketIdRoleIdCompoundUniqueInput = {
    ticketId: string
    roleId: string
  }

  export type ArchivedRoleCountOrderByAggregateInput = {
    colour?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    roleId?: SortOrder
    ticketId?: SortOrder
  }

  export type ArchivedRoleMaxOrderByAggregateInput = {
    colour?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    roleId?: SortOrder
    ticketId?: SortOrder
  }

  export type ArchivedRoleMinOrderByAggregateInput = {
    colour?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    roleId?: SortOrder
    ticketId?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ArchivedMessageListRelationFilter = {
    every?: ArchivedMessageWhereInput
    some?: ArchivedMessageWhereInput
    none?: ArchivedMessageWhereInput
  }

  export type ArchivedRoleNullableRelationFilter = {
    is?: ArchivedRoleWhereInput | null
    isNot?: ArchivedRoleWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ArchivedMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArchivedUserTicketIdUserIdCompoundUniqueInput = {
    ticketId: string
    userId: string
  }

  export type ArchivedUserCountOrderByAggregateInput = {
    avatar?: SortOrder
    bot?: SortOrder
    createdAt?: SortOrder
    discriminator?: SortOrder
    displayName?: SortOrder
    roleId?: SortOrder
    ticketId?: SortOrder
    userId?: SortOrder
    username?: SortOrder
  }

  export type ArchivedUserMaxOrderByAggregateInput = {
    avatar?: SortOrder
    bot?: SortOrder
    createdAt?: SortOrder
    discriminator?: SortOrder
    displayName?: SortOrder
    roleId?: SortOrder
    ticketId?: SortOrder
    userId?: SortOrder
    username?: SortOrder
  }

  export type ArchivedUserMinOrderByAggregateInput = {
    avatar?: SortOrder
    bot?: SortOrder
    createdAt?: SortOrder
    discriminator?: SortOrder
    displayName?: SortOrder
    roleId?: SortOrder
    ticketId?: SortOrder
    userId?: SortOrder
    username?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type GuildRelationFilter = {
    is?: GuildWhereInput
    isNot?: GuildWhereInput
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type TicketListRelationFilter = {
    every?: TicketWhereInput
    some?: TicketWhereInput
    none?: TicketWhereInput
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TicketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    channelName?: SortOrder
    claiming?: SortOrder
    createdAt?: SortOrder
    cooldown?: SortOrder
    customTopic?: SortOrder
    description?: SortOrder
    discordCategory?: SortOrder
    emoji?: SortOrder
    enableFeedback?: SortOrder
    guildId?: SortOrder
    id?: SortOrder
    image?: SortOrder
    memberLimit?: SortOrder
    name?: SortOrder
    openingMessage?: SortOrder
    pingRoles?: SortOrder
    ratelimit?: SortOrder
    requiredRoles?: SortOrder
    requireTopic?: SortOrder
    staffRoles?: SortOrder
    totalLimit?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    cooldown?: SortOrder
    id?: SortOrder
    memberLimit?: SortOrder
    ratelimit?: SortOrder
    totalLimit?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    channelName?: SortOrder
    claiming?: SortOrder
    createdAt?: SortOrder
    cooldown?: SortOrder
    customTopic?: SortOrder
    description?: SortOrder
    discordCategory?: SortOrder
    emoji?: SortOrder
    enableFeedback?: SortOrder
    guildId?: SortOrder
    id?: SortOrder
    image?: SortOrder
    memberLimit?: SortOrder
    name?: SortOrder
    openingMessage?: SortOrder
    ratelimit?: SortOrder
    requireTopic?: SortOrder
    totalLimit?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    channelName?: SortOrder
    claiming?: SortOrder
    createdAt?: SortOrder
    cooldown?: SortOrder
    customTopic?: SortOrder
    description?: SortOrder
    discordCategory?: SortOrder
    emoji?: SortOrder
    enableFeedback?: SortOrder
    guildId?: SortOrder
    id?: SortOrder
    image?: SortOrder
    memberLimit?: SortOrder
    name?: SortOrder
    openingMessage?: SortOrder
    ratelimit?: SortOrder
    requireTopic?: SortOrder
    totalLimit?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    cooldown?: SortOrder
    id?: SortOrder
    memberLimit?: SortOrder
    ratelimit?: SortOrder
    totalLimit?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type FeedbackCountOrderByAggregateInput = {
    comment?: SortOrder
    createdAt?: SortOrder
    guildId?: SortOrder
    rating?: SortOrder
    ticketId?: SortOrder
    userId?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    comment?: SortOrder
    createdAt?: SortOrder
    guildId?: SortOrder
    rating?: SortOrder
    ticketId?: SortOrder
    userId?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    comment?: SortOrder
    createdAt?: SortOrder
    guildId?: SortOrder
    rating?: SortOrder
    ticketId?: SortOrder
    userId?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type TagListRelationFilter = {
    every?: TagWhereInput
    some?: TagWhereInput
    none?: TagWhereInput
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GuildCountOrderByAggregateInput = {
    autoClose?: SortOrder
    autoTag?: SortOrder
    archive?: SortOrder
    blocklist?: SortOrder
    claimButton?: SortOrder
    closeButton?: SortOrder
    createdAt?: SortOrder
    errorColour?: SortOrder
    footer?: SortOrder
    id?: SortOrder
    locale?: SortOrder
    logChannel?: SortOrder
    primaryColour?: SortOrder
    staleAfter?: SortOrder
    successColour?: SortOrder
    workingHours?: SortOrder
  }

  export type GuildAvgOrderByAggregateInput = {
    autoClose?: SortOrder
    staleAfter?: SortOrder
  }

  export type GuildMaxOrderByAggregateInput = {
    autoClose?: SortOrder
    archive?: SortOrder
    claimButton?: SortOrder
    closeButton?: SortOrder
    createdAt?: SortOrder
    errorColour?: SortOrder
    footer?: SortOrder
    id?: SortOrder
    locale?: SortOrder
    logChannel?: SortOrder
    primaryColour?: SortOrder
    staleAfter?: SortOrder
    successColour?: SortOrder
  }

  export type GuildMinOrderByAggregateInput = {
    autoClose?: SortOrder
    archive?: SortOrder
    claimButton?: SortOrder
    closeButton?: SortOrder
    createdAt?: SortOrder
    errorColour?: SortOrder
    footer?: SortOrder
    id?: SortOrder
    locale?: SortOrder
    logChannel?: SortOrder
    primaryColour?: SortOrder
    staleAfter?: SortOrder
    successColour?: SortOrder
  }

  export type GuildSumOrderByAggregateInput = {
    autoClose?: SortOrder
    staleAfter?: SortOrder
  }

  export type EnumQuestionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[]
    notIn?: $Enums.QuestionType[]
    not?: NestedEnumQuestionTypeFilter<$PrismaModel> | $Enums.QuestionType
  }

  export type QuestionAnswerListRelationFilter = {
    every?: QuestionAnswerWhereInput
    some?: QuestionAnswerWhereInput
    none?: QuestionAnswerWhereInput
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type QuestionAnswerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionCountOrderByAggregateInput = {
    createdAt?: SortOrder
    id?: SortOrder
    categoryId?: SortOrder
    label?: SortOrder
    maxLength?: SortOrder
    minLength?: SortOrder
    options?: SortOrder
    order?: SortOrder
    placeholder?: SortOrder
    required?: SortOrder
    style?: SortOrder
    type?: SortOrder
    value?: SortOrder
  }

  export type QuestionAvgOrderByAggregateInput = {
    categoryId?: SortOrder
    maxLength?: SortOrder
    minLength?: SortOrder
    order?: SortOrder
    style?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    id?: SortOrder
    categoryId?: SortOrder
    label?: SortOrder
    maxLength?: SortOrder
    minLength?: SortOrder
    order?: SortOrder
    placeholder?: SortOrder
    required?: SortOrder
    style?: SortOrder
    type?: SortOrder
    value?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    createdAt?: SortOrder
    id?: SortOrder
    categoryId?: SortOrder
    label?: SortOrder
    maxLength?: SortOrder
    minLength?: SortOrder
    order?: SortOrder
    placeholder?: SortOrder
    required?: SortOrder
    style?: SortOrder
    type?: SortOrder
    value?: SortOrder
  }

  export type QuestionSumOrderByAggregateInput = {
    categoryId?: SortOrder
    maxLength?: SortOrder
    minLength?: SortOrder
    order?: SortOrder
    style?: SortOrder
  }

  export type EnumQuestionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[]
    notIn?: $Enums.QuestionType[]
    not?: NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionTypeFilter<$PrismaModel>
  }

  export type QuestionRelationFilter = {
    is?: QuestionWhereInput
    isNot?: QuestionWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type QuestionAnswerCountOrderByAggregateInput = {
    createdAt?: SortOrder
    id?: SortOrder
    ticketId?: SortOrder
    questionId?: SortOrder
    userId?: SortOrder
    value?: SortOrder
  }

  export type QuestionAnswerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type QuestionAnswerMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    id?: SortOrder
    ticketId?: SortOrder
    questionId?: SortOrder
    userId?: SortOrder
    value?: SortOrder
  }

  export type QuestionAnswerMinOrderByAggregateInput = {
    createdAt?: SortOrder
    id?: SortOrder
    ticketId?: SortOrder
    questionId?: SortOrder
    userId?: SortOrder
    value?: SortOrder
  }

  export type QuestionAnswerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TagGuildIdNameCompoundUniqueInput = {
    guildId: string
    name: string
  }

  export type TagCountOrderByAggregateInput = {
    content?: SortOrder
    createdAt?: SortOrder
    guildId?: SortOrder
    id?: SortOrder
    name?: SortOrder
    regex?: SortOrder
  }

  export type TagAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    content?: SortOrder
    createdAt?: SortOrder
    guildId?: SortOrder
    id?: SortOrder
    name?: SortOrder
    regex?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    content?: SortOrder
    createdAt?: SortOrder
    guildId?: SortOrder
    id?: SortOrder
    name?: SortOrder
    regex?: SortOrder
  }

  export type TagSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumTicketPriorityNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.TicketPriority | EnumTicketPriorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.TicketPriority[] | null
    notIn?: $Enums.TicketPriority[] | null
    not?: NestedEnumTicketPriorityNullableFilter<$PrismaModel> | $Enums.TicketPriority | null
  }

  export type ArchivedChannelListRelationFilter = {
    every?: ArchivedChannelWhereInput
    some?: ArchivedChannelWhereInput
    none?: ArchivedChannelWhereInput
  }

  export type ArchivedRoleListRelationFilter = {
    every?: ArchivedRoleWhereInput
    some?: ArchivedRoleWhereInput
    none?: ArchivedRoleWhereInput
  }

  export type CategoryNullableRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type FeedbackNullableRelationFilter = {
    is?: FeedbackWhereInput | null
    isNot?: FeedbackWhereInput | null
  }

  export type TicketNullableRelationFilter = {
    is?: TicketWhereInput | null
    isNot?: TicketWhereInput | null
  }

  export type ArchivedChannelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArchivedRoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TicketGuildIdNumberCompoundUniqueInput = {
    guildId: string
    number: number
  }

  export type TicketCountOrderByAggregateInput = {
    categoryId?: SortOrder
    claimedById?: SortOrder
    closedAt?: SortOrder
    closedById?: SortOrder
    closedReason?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    deleted?: SortOrder
    firstResponseAt?: SortOrder
    guildId?: SortOrder
    id?: SortOrder
    lastMessageAt?: SortOrder
    messageCount?: SortOrder
    number?: SortOrder
    open?: SortOrder
    openingMessageId?: SortOrder
    pinnedMessageIds?: SortOrder
    priority?: SortOrder
    referencesMessageId?: SortOrder
    referencesTicketId?: SortOrder
    topic?: SortOrder
  }

  export type TicketAvgOrderByAggregateInput = {
    categoryId?: SortOrder
    messageCount?: SortOrder
    number?: SortOrder
  }

  export type TicketMaxOrderByAggregateInput = {
    categoryId?: SortOrder
    claimedById?: SortOrder
    closedAt?: SortOrder
    closedById?: SortOrder
    closedReason?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    deleted?: SortOrder
    firstResponseAt?: SortOrder
    guildId?: SortOrder
    id?: SortOrder
    lastMessageAt?: SortOrder
    messageCount?: SortOrder
    number?: SortOrder
    open?: SortOrder
    openingMessageId?: SortOrder
    priority?: SortOrder
    referencesMessageId?: SortOrder
    referencesTicketId?: SortOrder
    topic?: SortOrder
  }

  export type TicketMinOrderByAggregateInput = {
    categoryId?: SortOrder
    claimedById?: SortOrder
    closedAt?: SortOrder
    closedById?: SortOrder
    closedReason?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    deleted?: SortOrder
    firstResponseAt?: SortOrder
    guildId?: SortOrder
    id?: SortOrder
    lastMessageAt?: SortOrder
    messageCount?: SortOrder
    number?: SortOrder
    open?: SortOrder
    openingMessageId?: SortOrder
    priority?: SortOrder
    referencesMessageId?: SortOrder
    referencesTicketId?: SortOrder
    topic?: SortOrder
  }

  export type TicketSumOrderByAggregateInput = {
    categoryId?: SortOrder
    messageCount?: SortOrder
    number?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumTicketPriorityNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TicketPriority | EnumTicketPriorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.TicketPriority[] | null
    notIn?: $Enums.TicketPriority[] | null
    not?: NestedEnumTicketPriorityNullableWithAggregatesFilter<$PrismaModel> | $Enums.TicketPriority | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTicketPriorityNullableFilter<$PrismaModel>
    _max?: NestedEnumTicketPriorityNullableFilter<$PrismaModel>
  }

  export type UserCountOrderByAggregateInput = {
    createdAt?: SortOrder
    id?: SortOrder
    messageCount?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    messageCount?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    id?: SortOrder
    messageCount?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    createdAt?: SortOrder
    id?: SortOrder
    messageCount?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    messageCount?: SortOrder
  }

  export type TicketCreateNestedOneWithoutArchivedChannelsInput = {
    create?: XOR<TicketCreateWithoutArchivedChannelsInput, TicketUncheckedCreateWithoutArchivedChannelsInput>
    connectOrCreate?: TicketCreateOrConnectWithoutArchivedChannelsInput
    connect?: TicketWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TicketUpdateOneRequiredWithoutArchivedChannelsNestedInput = {
    create?: XOR<TicketCreateWithoutArchivedChannelsInput, TicketUncheckedCreateWithoutArchivedChannelsInput>
    connectOrCreate?: TicketCreateOrConnectWithoutArchivedChannelsInput
    upsert?: TicketUpsertWithoutArchivedChannelsInput
    connect?: TicketWhereUniqueInput
    update?: XOR<XOR<TicketUpdateToOneWithWhereWithoutArchivedChannelsInput, TicketUpdateWithoutArchivedChannelsInput>, TicketUncheckedUpdateWithoutArchivedChannelsInput>
  }

  export type ArchivedUserCreateNestedOneWithoutArchivedMessagesInput = {
    create?: XOR<ArchivedUserCreateWithoutArchivedMessagesInput, ArchivedUserUncheckedCreateWithoutArchivedMessagesInput>
    connectOrCreate?: ArchivedUserCreateOrConnectWithoutArchivedMessagesInput
    connect?: ArchivedUserWhereUniqueInput
  }

  export type TicketCreateNestedOneWithoutArchivedMessagesInput = {
    create?: XOR<TicketCreateWithoutArchivedMessagesInput, TicketUncheckedCreateWithoutArchivedMessagesInput>
    connectOrCreate?: TicketCreateOrConnectWithoutArchivedMessagesInput
    connect?: TicketWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ArchivedUserUpdateOneRequiredWithoutArchivedMessagesNestedInput = {
    create?: XOR<ArchivedUserCreateWithoutArchivedMessagesInput, ArchivedUserUncheckedCreateWithoutArchivedMessagesInput>
    connectOrCreate?: ArchivedUserCreateOrConnectWithoutArchivedMessagesInput
    upsert?: ArchivedUserUpsertWithoutArchivedMessagesInput
    connect?: ArchivedUserWhereUniqueInput
    update?: XOR<XOR<ArchivedUserUpdateToOneWithWhereWithoutArchivedMessagesInput, ArchivedUserUpdateWithoutArchivedMessagesInput>, ArchivedUserUncheckedUpdateWithoutArchivedMessagesInput>
  }

  export type TicketUpdateOneRequiredWithoutArchivedMessagesNestedInput = {
    create?: XOR<TicketCreateWithoutArchivedMessagesInput, TicketUncheckedCreateWithoutArchivedMessagesInput>
    connectOrCreate?: TicketCreateOrConnectWithoutArchivedMessagesInput
    upsert?: TicketUpsertWithoutArchivedMessagesInput
    connect?: TicketWhereUniqueInput
    update?: XOR<XOR<TicketUpdateToOneWithWhereWithoutArchivedMessagesInput, TicketUpdateWithoutArchivedMessagesInput>, TicketUncheckedUpdateWithoutArchivedMessagesInput>
  }

  export type ArchivedUserCreateNestedManyWithoutRoleInput = {
    create?: XOR<ArchivedUserCreateWithoutRoleInput, ArchivedUserUncheckedCreateWithoutRoleInput> | ArchivedUserCreateWithoutRoleInput[] | ArchivedUserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: ArchivedUserCreateOrConnectWithoutRoleInput | ArchivedUserCreateOrConnectWithoutRoleInput[]
    createMany?: ArchivedUserCreateManyRoleInputEnvelope
    connect?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
  }

  export type TicketCreateNestedOneWithoutArchivedRolesInput = {
    create?: XOR<TicketCreateWithoutArchivedRolesInput, TicketUncheckedCreateWithoutArchivedRolesInput>
    connectOrCreate?: TicketCreateOrConnectWithoutArchivedRolesInput
    connect?: TicketWhereUniqueInput
  }

  export type ArchivedUserUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<ArchivedUserCreateWithoutRoleInput, ArchivedUserUncheckedCreateWithoutRoleInput> | ArchivedUserCreateWithoutRoleInput[] | ArchivedUserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: ArchivedUserCreateOrConnectWithoutRoleInput | ArchivedUserCreateOrConnectWithoutRoleInput[]
    createMany?: ArchivedUserCreateManyRoleInputEnvelope
    connect?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
  }

  export type ArchivedUserUpdateManyWithoutRoleNestedInput = {
    create?: XOR<ArchivedUserCreateWithoutRoleInput, ArchivedUserUncheckedCreateWithoutRoleInput> | ArchivedUserCreateWithoutRoleInput[] | ArchivedUserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: ArchivedUserCreateOrConnectWithoutRoleInput | ArchivedUserCreateOrConnectWithoutRoleInput[]
    upsert?: ArchivedUserUpsertWithWhereUniqueWithoutRoleInput | ArchivedUserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: ArchivedUserCreateManyRoleInputEnvelope
    set?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
    disconnect?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
    delete?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
    connect?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
    update?: ArchivedUserUpdateWithWhereUniqueWithoutRoleInput | ArchivedUserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: ArchivedUserUpdateManyWithWhereWithoutRoleInput | ArchivedUserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: ArchivedUserScalarWhereInput | ArchivedUserScalarWhereInput[]
  }

  export type TicketUpdateOneRequiredWithoutArchivedRolesNestedInput = {
    create?: XOR<TicketCreateWithoutArchivedRolesInput, TicketUncheckedCreateWithoutArchivedRolesInput>
    connectOrCreate?: TicketCreateOrConnectWithoutArchivedRolesInput
    upsert?: TicketUpsertWithoutArchivedRolesInput
    connect?: TicketWhereUniqueInput
    update?: XOR<XOR<TicketUpdateToOneWithWhereWithoutArchivedRolesInput, TicketUpdateWithoutArchivedRolesInput>, TicketUncheckedUpdateWithoutArchivedRolesInput>
  }

  export type ArchivedUserUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<ArchivedUserCreateWithoutRoleInput, ArchivedUserUncheckedCreateWithoutRoleInput> | ArchivedUserCreateWithoutRoleInput[] | ArchivedUserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: ArchivedUserCreateOrConnectWithoutRoleInput | ArchivedUserCreateOrConnectWithoutRoleInput[]
    upsert?: ArchivedUserUpsertWithWhereUniqueWithoutRoleInput | ArchivedUserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: ArchivedUserCreateManyRoleInputEnvelope
    set?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
    disconnect?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
    delete?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
    connect?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
    update?: ArchivedUserUpdateWithWhereUniqueWithoutRoleInput | ArchivedUserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: ArchivedUserUpdateManyWithWhereWithoutRoleInput | ArchivedUserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: ArchivedUserScalarWhereInput | ArchivedUserScalarWhereInput[]
  }

  export type ArchivedMessageCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ArchivedMessageCreateWithoutAuthorInput, ArchivedMessageUncheckedCreateWithoutAuthorInput> | ArchivedMessageCreateWithoutAuthorInput[] | ArchivedMessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ArchivedMessageCreateOrConnectWithoutAuthorInput | ArchivedMessageCreateOrConnectWithoutAuthorInput[]
    createMany?: ArchivedMessageCreateManyAuthorInputEnvelope
    connect?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
  }

  export type ArchivedRoleCreateNestedOneWithoutArchivedUsersInput = {
    create?: XOR<ArchivedRoleCreateWithoutArchivedUsersInput, ArchivedRoleUncheckedCreateWithoutArchivedUsersInput>
    connectOrCreate?: ArchivedRoleCreateOrConnectWithoutArchivedUsersInput
    connect?: ArchivedRoleWhereUniqueInput
  }

  export type TicketCreateNestedOneWithoutArchivedUsersInput = {
    create?: XOR<TicketCreateWithoutArchivedUsersInput, TicketUncheckedCreateWithoutArchivedUsersInput>
    connectOrCreate?: TicketCreateOrConnectWithoutArchivedUsersInput
    connect?: TicketWhereUniqueInput
  }

  export type ArchivedMessageUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ArchivedMessageCreateWithoutAuthorInput, ArchivedMessageUncheckedCreateWithoutAuthorInput> | ArchivedMessageCreateWithoutAuthorInput[] | ArchivedMessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ArchivedMessageCreateOrConnectWithoutAuthorInput | ArchivedMessageCreateOrConnectWithoutAuthorInput[]
    createMany?: ArchivedMessageCreateManyAuthorInputEnvelope
    connect?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ArchivedMessageUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ArchivedMessageCreateWithoutAuthorInput, ArchivedMessageUncheckedCreateWithoutAuthorInput> | ArchivedMessageCreateWithoutAuthorInput[] | ArchivedMessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ArchivedMessageCreateOrConnectWithoutAuthorInput | ArchivedMessageCreateOrConnectWithoutAuthorInput[]
    upsert?: ArchivedMessageUpsertWithWhereUniqueWithoutAuthorInput | ArchivedMessageUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ArchivedMessageCreateManyAuthorInputEnvelope
    set?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
    disconnect?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
    delete?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
    connect?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
    update?: ArchivedMessageUpdateWithWhereUniqueWithoutAuthorInput | ArchivedMessageUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ArchivedMessageUpdateManyWithWhereWithoutAuthorInput | ArchivedMessageUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ArchivedMessageScalarWhereInput | ArchivedMessageScalarWhereInput[]
  }

  export type ArchivedRoleUpdateOneWithoutArchivedUsersNestedInput = {
    create?: XOR<ArchivedRoleCreateWithoutArchivedUsersInput, ArchivedRoleUncheckedCreateWithoutArchivedUsersInput>
    connectOrCreate?: ArchivedRoleCreateOrConnectWithoutArchivedUsersInput
    upsert?: ArchivedRoleUpsertWithoutArchivedUsersInput
    disconnect?: ArchivedRoleWhereInput | boolean
    delete?: ArchivedRoleWhereInput | boolean
    connect?: ArchivedRoleWhereUniqueInput
    update?: XOR<XOR<ArchivedRoleUpdateToOneWithWhereWithoutArchivedUsersInput, ArchivedRoleUpdateWithoutArchivedUsersInput>, ArchivedRoleUncheckedUpdateWithoutArchivedUsersInput>
  }

  export type TicketUpdateOneRequiredWithoutArchivedUsersNestedInput = {
    create?: XOR<TicketCreateWithoutArchivedUsersInput, TicketUncheckedCreateWithoutArchivedUsersInput>
    connectOrCreate?: TicketCreateOrConnectWithoutArchivedUsersInput
    upsert?: TicketUpsertWithoutArchivedUsersInput
    connect?: TicketWhereUniqueInput
    update?: XOR<XOR<TicketUpdateToOneWithWhereWithoutArchivedUsersInput, TicketUpdateWithoutArchivedUsersInput>, TicketUncheckedUpdateWithoutArchivedUsersInput>
  }

  export type ArchivedMessageUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ArchivedMessageCreateWithoutAuthorInput, ArchivedMessageUncheckedCreateWithoutAuthorInput> | ArchivedMessageCreateWithoutAuthorInput[] | ArchivedMessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ArchivedMessageCreateOrConnectWithoutAuthorInput | ArchivedMessageCreateOrConnectWithoutAuthorInput[]
    upsert?: ArchivedMessageUpsertWithWhereUniqueWithoutAuthorInput | ArchivedMessageUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ArchivedMessageCreateManyAuthorInputEnvelope
    set?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
    disconnect?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
    delete?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
    connect?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
    update?: ArchivedMessageUpdateWithWhereUniqueWithoutAuthorInput | ArchivedMessageUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ArchivedMessageUpdateManyWithWhereWithoutAuthorInput | ArchivedMessageUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ArchivedMessageScalarWhereInput | ArchivedMessageScalarWhereInput[]
  }

  export type GuildCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<GuildCreateWithoutCategoriesInput, GuildUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: GuildCreateOrConnectWithoutCategoriesInput
    connect?: GuildWhereUniqueInput
  }

  export type QuestionCreateNestedManyWithoutCategoryInput = {
    create?: XOR<QuestionCreateWithoutCategoryInput, QuestionUncheckedCreateWithoutCategoryInput> | QuestionCreateWithoutCategoryInput[] | QuestionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutCategoryInput | QuestionCreateOrConnectWithoutCategoryInput[]
    createMany?: QuestionCreateManyCategoryInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type TicketCreateNestedManyWithoutCategoryInput = {
    create?: XOR<TicketCreateWithoutCategoryInput, TicketUncheckedCreateWithoutCategoryInput> | TicketCreateWithoutCategoryInput[] | TicketUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutCategoryInput | TicketCreateOrConnectWithoutCategoryInput[]
    createMany?: TicketCreateManyCategoryInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<QuestionCreateWithoutCategoryInput, QuestionUncheckedCreateWithoutCategoryInput> | QuestionCreateWithoutCategoryInput[] | QuestionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutCategoryInput | QuestionCreateOrConnectWithoutCategoryInput[]
    createMany?: QuestionCreateManyCategoryInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type TicketUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<TicketCreateWithoutCategoryInput, TicketUncheckedCreateWithoutCategoryInput> | TicketCreateWithoutCategoryInput[] | TicketUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutCategoryInput | TicketCreateOrConnectWithoutCategoryInput[]
    createMany?: TicketCreateManyCategoryInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GuildUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<GuildCreateWithoutCategoriesInput, GuildUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: GuildCreateOrConnectWithoutCategoriesInput
    upsert?: GuildUpsertWithoutCategoriesInput
    connect?: GuildWhereUniqueInput
    update?: XOR<XOR<GuildUpdateToOneWithWhereWithoutCategoriesInput, GuildUpdateWithoutCategoriesInput>, GuildUncheckedUpdateWithoutCategoriesInput>
  }

  export type QuestionUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<QuestionCreateWithoutCategoryInput, QuestionUncheckedCreateWithoutCategoryInput> | QuestionCreateWithoutCategoryInput[] | QuestionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutCategoryInput | QuestionCreateOrConnectWithoutCategoryInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutCategoryInput | QuestionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: QuestionCreateManyCategoryInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutCategoryInput | QuestionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutCategoryInput | QuestionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type TicketUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<TicketCreateWithoutCategoryInput, TicketUncheckedCreateWithoutCategoryInput> | TicketCreateWithoutCategoryInput[] | TicketUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutCategoryInput | TicketCreateOrConnectWithoutCategoryInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutCategoryInput | TicketUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: TicketCreateManyCategoryInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutCategoryInput | TicketUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutCategoryInput | TicketUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<QuestionCreateWithoutCategoryInput, QuestionUncheckedCreateWithoutCategoryInput> | QuestionCreateWithoutCategoryInput[] | QuestionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutCategoryInput | QuestionCreateOrConnectWithoutCategoryInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutCategoryInput | QuestionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: QuestionCreateManyCategoryInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutCategoryInput | QuestionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutCategoryInput | QuestionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type TicketUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<TicketCreateWithoutCategoryInput, TicketUncheckedCreateWithoutCategoryInput> | TicketCreateWithoutCategoryInput[] | TicketUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutCategoryInput | TicketCreateOrConnectWithoutCategoryInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutCategoryInput | TicketUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: TicketCreateManyCategoryInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutCategoryInput | TicketUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutCategoryInput | TicketUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type GuildCreateNestedOneWithoutFeedbackInput = {
    create?: XOR<GuildCreateWithoutFeedbackInput, GuildUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: GuildCreateOrConnectWithoutFeedbackInput
    connect?: GuildWhereUniqueInput
  }

  export type TicketCreateNestedOneWithoutFeedbackInput = {
    create?: XOR<TicketCreateWithoutFeedbackInput, TicketUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: TicketCreateOrConnectWithoutFeedbackInput
    connect?: TicketWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFeedbackInput = {
    create?: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackInput
    connect?: UserWhereUniqueInput
  }

  export type GuildUpdateOneRequiredWithoutFeedbackNestedInput = {
    create?: XOR<GuildCreateWithoutFeedbackInput, GuildUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: GuildCreateOrConnectWithoutFeedbackInput
    upsert?: GuildUpsertWithoutFeedbackInput
    connect?: GuildWhereUniqueInput
    update?: XOR<XOR<GuildUpdateToOneWithWhereWithoutFeedbackInput, GuildUpdateWithoutFeedbackInput>, GuildUncheckedUpdateWithoutFeedbackInput>
  }

  export type TicketUpdateOneRequiredWithoutFeedbackNestedInput = {
    create?: XOR<TicketCreateWithoutFeedbackInput, TicketUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: TicketCreateOrConnectWithoutFeedbackInput
    upsert?: TicketUpsertWithoutFeedbackInput
    connect?: TicketWhereUniqueInput
    update?: XOR<XOR<TicketUpdateToOneWithWhereWithoutFeedbackInput, TicketUpdateWithoutFeedbackInput>, TicketUncheckedUpdateWithoutFeedbackInput>
  }

  export type UserUpdateOneWithoutFeedbackNestedInput = {
    create?: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackInput
    upsert?: UserUpsertWithoutFeedbackInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedbackInput, UserUpdateWithoutFeedbackInput>, UserUncheckedUpdateWithoutFeedbackInput>
  }

  export type CategoryCreateNestedManyWithoutGuildInput = {
    create?: XOR<CategoryCreateWithoutGuildInput, CategoryUncheckedCreateWithoutGuildInput> | CategoryCreateWithoutGuildInput[] | CategoryUncheckedCreateWithoutGuildInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutGuildInput | CategoryCreateOrConnectWithoutGuildInput[]
    createMany?: CategoryCreateManyGuildInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutGuildInput = {
    create?: XOR<FeedbackCreateWithoutGuildInput, FeedbackUncheckedCreateWithoutGuildInput> | FeedbackCreateWithoutGuildInput[] | FeedbackUncheckedCreateWithoutGuildInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutGuildInput | FeedbackCreateOrConnectWithoutGuildInput[]
    createMany?: FeedbackCreateManyGuildInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type TagCreateNestedManyWithoutGuildInput = {
    create?: XOR<TagCreateWithoutGuildInput, TagUncheckedCreateWithoutGuildInput> | TagCreateWithoutGuildInput[] | TagUncheckedCreateWithoutGuildInput[]
    connectOrCreate?: TagCreateOrConnectWithoutGuildInput | TagCreateOrConnectWithoutGuildInput[]
    createMany?: TagCreateManyGuildInputEnvelope
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type TicketCreateNestedManyWithoutGuildInput = {
    create?: XOR<TicketCreateWithoutGuildInput, TicketUncheckedCreateWithoutGuildInput> | TicketCreateWithoutGuildInput[] | TicketUncheckedCreateWithoutGuildInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutGuildInput | TicketCreateOrConnectWithoutGuildInput[]
    createMany?: TicketCreateManyGuildInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutGuildInput = {
    create?: XOR<CategoryCreateWithoutGuildInput, CategoryUncheckedCreateWithoutGuildInput> | CategoryCreateWithoutGuildInput[] | CategoryUncheckedCreateWithoutGuildInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutGuildInput | CategoryCreateOrConnectWithoutGuildInput[]
    createMany?: CategoryCreateManyGuildInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutGuildInput = {
    create?: XOR<FeedbackCreateWithoutGuildInput, FeedbackUncheckedCreateWithoutGuildInput> | FeedbackCreateWithoutGuildInput[] | FeedbackUncheckedCreateWithoutGuildInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutGuildInput | FeedbackCreateOrConnectWithoutGuildInput[]
    createMany?: FeedbackCreateManyGuildInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type TagUncheckedCreateNestedManyWithoutGuildInput = {
    create?: XOR<TagCreateWithoutGuildInput, TagUncheckedCreateWithoutGuildInput> | TagCreateWithoutGuildInput[] | TagUncheckedCreateWithoutGuildInput[]
    connectOrCreate?: TagCreateOrConnectWithoutGuildInput | TagCreateOrConnectWithoutGuildInput[]
    createMany?: TagCreateManyGuildInputEnvelope
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type TicketUncheckedCreateNestedManyWithoutGuildInput = {
    create?: XOR<TicketCreateWithoutGuildInput, TicketUncheckedCreateWithoutGuildInput> | TicketCreateWithoutGuildInput[] | TicketUncheckedCreateWithoutGuildInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutGuildInput | TicketCreateOrConnectWithoutGuildInput[]
    createMany?: TicketCreateManyGuildInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type CategoryUpdateManyWithoutGuildNestedInput = {
    create?: XOR<CategoryCreateWithoutGuildInput, CategoryUncheckedCreateWithoutGuildInput> | CategoryCreateWithoutGuildInput[] | CategoryUncheckedCreateWithoutGuildInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutGuildInput | CategoryCreateOrConnectWithoutGuildInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutGuildInput | CategoryUpsertWithWhereUniqueWithoutGuildInput[]
    createMany?: CategoryCreateManyGuildInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutGuildInput | CategoryUpdateWithWhereUniqueWithoutGuildInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutGuildInput | CategoryUpdateManyWithWhereWithoutGuildInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutGuildNestedInput = {
    create?: XOR<FeedbackCreateWithoutGuildInput, FeedbackUncheckedCreateWithoutGuildInput> | FeedbackCreateWithoutGuildInput[] | FeedbackUncheckedCreateWithoutGuildInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutGuildInput | FeedbackCreateOrConnectWithoutGuildInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutGuildInput | FeedbackUpsertWithWhereUniqueWithoutGuildInput[]
    createMany?: FeedbackCreateManyGuildInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutGuildInput | FeedbackUpdateWithWhereUniqueWithoutGuildInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutGuildInput | FeedbackUpdateManyWithWhereWithoutGuildInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type TagUpdateManyWithoutGuildNestedInput = {
    create?: XOR<TagCreateWithoutGuildInput, TagUncheckedCreateWithoutGuildInput> | TagCreateWithoutGuildInput[] | TagUncheckedCreateWithoutGuildInput[]
    connectOrCreate?: TagCreateOrConnectWithoutGuildInput | TagCreateOrConnectWithoutGuildInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutGuildInput | TagUpsertWithWhereUniqueWithoutGuildInput[]
    createMany?: TagCreateManyGuildInputEnvelope
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutGuildInput | TagUpdateWithWhereUniqueWithoutGuildInput[]
    updateMany?: TagUpdateManyWithWhereWithoutGuildInput | TagUpdateManyWithWhereWithoutGuildInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type TicketUpdateManyWithoutGuildNestedInput = {
    create?: XOR<TicketCreateWithoutGuildInput, TicketUncheckedCreateWithoutGuildInput> | TicketCreateWithoutGuildInput[] | TicketUncheckedCreateWithoutGuildInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutGuildInput | TicketCreateOrConnectWithoutGuildInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutGuildInput | TicketUpsertWithWhereUniqueWithoutGuildInput[]
    createMany?: TicketCreateManyGuildInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutGuildInput | TicketUpdateWithWhereUniqueWithoutGuildInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutGuildInput | TicketUpdateManyWithWhereWithoutGuildInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutGuildNestedInput = {
    create?: XOR<CategoryCreateWithoutGuildInput, CategoryUncheckedCreateWithoutGuildInput> | CategoryCreateWithoutGuildInput[] | CategoryUncheckedCreateWithoutGuildInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutGuildInput | CategoryCreateOrConnectWithoutGuildInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutGuildInput | CategoryUpsertWithWhereUniqueWithoutGuildInput[]
    createMany?: CategoryCreateManyGuildInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutGuildInput | CategoryUpdateWithWhereUniqueWithoutGuildInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutGuildInput | CategoryUpdateManyWithWhereWithoutGuildInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutGuildNestedInput = {
    create?: XOR<FeedbackCreateWithoutGuildInput, FeedbackUncheckedCreateWithoutGuildInput> | FeedbackCreateWithoutGuildInput[] | FeedbackUncheckedCreateWithoutGuildInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutGuildInput | FeedbackCreateOrConnectWithoutGuildInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutGuildInput | FeedbackUpsertWithWhereUniqueWithoutGuildInput[]
    createMany?: FeedbackCreateManyGuildInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutGuildInput | FeedbackUpdateWithWhereUniqueWithoutGuildInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutGuildInput | FeedbackUpdateManyWithWhereWithoutGuildInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type TagUncheckedUpdateManyWithoutGuildNestedInput = {
    create?: XOR<TagCreateWithoutGuildInput, TagUncheckedCreateWithoutGuildInput> | TagCreateWithoutGuildInput[] | TagUncheckedCreateWithoutGuildInput[]
    connectOrCreate?: TagCreateOrConnectWithoutGuildInput | TagCreateOrConnectWithoutGuildInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutGuildInput | TagUpsertWithWhereUniqueWithoutGuildInput[]
    createMany?: TagCreateManyGuildInputEnvelope
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutGuildInput | TagUpdateWithWhereUniqueWithoutGuildInput[]
    updateMany?: TagUpdateManyWithWhereWithoutGuildInput | TagUpdateManyWithWhereWithoutGuildInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type TicketUncheckedUpdateManyWithoutGuildNestedInput = {
    create?: XOR<TicketCreateWithoutGuildInput, TicketUncheckedCreateWithoutGuildInput> | TicketCreateWithoutGuildInput[] | TicketUncheckedCreateWithoutGuildInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutGuildInput | TicketCreateOrConnectWithoutGuildInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutGuildInput | TicketUpsertWithWhereUniqueWithoutGuildInput[]
    createMany?: TicketCreateManyGuildInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutGuildInput | TicketUpdateWithWhereUniqueWithoutGuildInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutGuildInput | TicketUpdateManyWithWhereWithoutGuildInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type QuestionAnswerCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionAnswerCreateWithoutQuestionInput, QuestionAnswerUncheckedCreateWithoutQuestionInput> | QuestionAnswerCreateWithoutQuestionInput[] | QuestionAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutQuestionInput | QuestionAnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionAnswerCreateManyQuestionInputEnvelope
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
  }

  export type CategoryCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<CategoryCreateWithoutQuestionsInput, CategoryUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutQuestionsInput
    connect?: CategoryWhereUniqueInput
  }

  export type QuestionAnswerUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionAnswerCreateWithoutQuestionInput, QuestionAnswerUncheckedCreateWithoutQuestionInput> | QuestionAnswerCreateWithoutQuestionInput[] | QuestionAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutQuestionInput | QuestionAnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionAnswerCreateManyQuestionInputEnvelope
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
  }

  export type EnumQuestionTypeFieldUpdateOperationsInput = {
    set?: $Enums.QuestionType
  }

  export type QuestionAnswerUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionAnswerCreateWithoutQuestionInput, QuestionAnswerUncheckedCreateWithoutQuestionInput> | QuestionAnswerCreateWithoutQuestionInput[] | QuestionAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutQuestionInput | QuestionAnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput | QuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionAnswerCreateManyQuestionInputEnvelope
    set?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    disconnect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    delete?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    update?: QuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput | QuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionAnswerUpdateManyWithWhereWithoutQuestionInput | QuestionAnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionAnswerScalarWhereInput | QuestionAnswerScalarWhereInput[]
  }

  export type CategoryUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<CategoryCreateWithoutQuestionsInput, CategoryUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutQuestionsInput
    upsert?: CategoryUpsertWithoutQuestionsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutQuestionsInput, CategoryUpdateWithoutQuestionsInput>, CategoryUncheckedUpdateWithoutQuestionsInput>
  }

  export type QuestionAnswerUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionAnswerCreateWithoutQuestionInput, QuestionAnswerUncheckedCreateWithoutQuestionInput> | QuestionAnswerCreateWithoutQuestionInput[] | QuestionAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutQuestionInput | QuestionAnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput | QuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionAnswerCreateManyQuestionInputEnvelope
    set?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    disconnect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    delete?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    update?: QuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput | QuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionAnswerUpdateManyWithWhereWithoutQuestionInput | QuestionAnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionAnswerScalarWhereInput | QuestionAnswerScalarWhereInput[]
  }

  export type TicketCreateNestedOneWithoutQuestionAnswersInput = {
    create?: XOR<TicketCreateWithoutQuestionAnswersInput, TicketUncheckedCreateWithoutQuestionAnswersInput>
    connectOrCreate?: TicketCreateOrConnectWithoutQuestionAnswersInput
    connect?: TicketWhereUniqueInput
  }

  export type QuestionCreateNestedOneWithoutAnswersInput = {
    create?: XOR<QuestionCreateWithoutAnswersInput, QuestionUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutAnswersInput
    connect?: QuestionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutQuestionAnswersInput = {
    create?: XOR<UserCreateWithoutQuestionAnswersInput, UserUncheckedCreateWithoutQuestionAnswersInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionAnswersInput
    connect?: UserWhereUniqueInput
  }

  export type TicketUpdateOneRequiredWithoutQuestionAnswersNestedInput = {
    create?: XOR<TicketCreateWithoutQuestionAnswersInput, TicketUncheckedCreateWithoutQuestionAnswersInput>
    connectOrCreate?: TicketCreateOrConnectWithoutQuestionAnswersInput
    upsert?: TicketUpsertWithoutQuestionAnswersInput
    connect?: TicketWhereUniqueInput
    update?: XOR<XOR<TicketUpdateToOneWithWhereWithoutQuestionAnswersInput, TicketUpdateWithoutQuestionAnswersInput>, TicketUncheckedUpdateWithoutQuestionAnswersInput>
  }

  export type QuestionUpdateOneRequiredWithoutAnswersNestedInput = {
    create?: XOR<QuestionCreateWithoutAnswersInput, QuestionUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutAnswersInput
    upsert?: QuestionUpsertWithoutAnswersInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutAnswersInput, QuestionUpdateWithoutAnswersInput>, QuestionUncheckedUpdateWithoutAnswersInput>
  }

  export type UserUpdateOneRequiredWithoutQuestionAnswersNestedInput = {
    create?: XOR<UserCreateWithoutQuestionAnswersInput, UserUncheckedCreateWithoutQuestionAnswersInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionAnswersInput
    upsert?: UserUpsertWithoutQuestionAnswersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQuestionAnswersInput, UserUpdateWithoutQuestionAnswersInput>, UserUncheckedUpdateWithoutQuestionAnswersInput>
  }

  export type GuildCreateNestedOneWithoutTagsInput = {
    create?: XOR<GuildCreateWithoutTagsInput, GuildUncheckedCreateWithoutTagsInput>
    connectOrCreate?: GuildCreateOrConnectWithoutTagsInput
    connect?: GuildWhereUniqueInput
  }

  export type GuildUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<GuildCreateWithoutTagsInput, GuildUncheckedCreateWithoutTagsInput>
    connectOrCreate?: GuildCreateOrConnectWithoutTagsInput
    upsert?: GuildUpsertWithoutTagsInput
    connect?: GuildWhereUniqueInput
    update?: XOR<XOR<GuildUpdateToOneWithWhereWithoutTagsInput, GuildUpdateWithoutTagsInput>, GuildUncheckedUpdateWithoutTagsInput>
  }

  export type ArchivedChannelCreateNestedManyWithoutTicketInput = {
    create?: XOR<ArchivedChannelCreateWithoutTicketInput, ArchivedChannelUncheckedCreateWithoutTicketInput> | ArchivedChannelCreateWithoutTicketInput[] | ArchivedChannelUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: ArchivedChannelCreateOrConnectWithoutTicketInput | ArchivedChannelCreateOrConnectWithoutTicketInput[]
    createMany?: ArchivedChannelCreateManyTicketInputEnvelope
    connect?: ArchivedChannelWhereUniqueInput | ArchivedChannelWhereUniqueInput[]
  }

  export type ArchivedMessageCreateNestedManyWithoutTicketInput = {
    create?: XOR<ArchivedMessageCreateWithoutTicketInput, ArchivedMessageUncheckedCreateWithoutTicketInput> | ArchivedMessageCreateWithoutTicketInput[] | ArchivedMessageUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: ArchivedMessageCreateOrConnectWithoutTicketInput | ArchivedMessageCreateOrConnectWithoutTicketInput[]
    createMany?: ArchivedMessageCreateManyTicketInputEnvelope
    connect?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
  }

  export type ArchivedRoleCreateNestedManyWithoutTicketInput = {
    create?: XOR<ArchivedRoleCreateWithoutTicketInput, ArchivedRoleUncheckedCreateWithoutTicketInput> | ArchivedRoleCreateWithoutTicketInput[] | ArchivedRoleUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: ArchivedRoleCreateOrConnectWithoutTicketInput | ArchivedRoleCreateOrConnectWithoutTicketInput[]
    createMany?: ArchivedRoleCreateManyTicketInputEnvelope
    connect?: ArchivedRoleWhereUniqueInput | ArchivedRoleWhereUniqueInput[]
  }

  export type ArchivedUserCreateNestedManyWithoutTicketInput = {
    create?: XOR<ArchivedUserCreateWithoutTicketInput, ArchivedUserUncheckedCreateWithoutTicketInput> | ArchivedUserCreateWithoutTicketInput[] | ArchivedUserUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: ArchivedUserCreateOrConnectWithoutTicketInput | ArchivedUserCreateOrConnectWithoutTicketInput[]
    createMany?: ArchivedUserCreateManyTicketInputEnvelope
    connect?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
  }

  export type CategoryCreateNestedOneWithoutTicketsInput = {
    create?: XOR<CategoryCreateWithoutTicketsInput, CategoryUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutTicketsInput
    connect?: CategoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTicketsClaimedInput = {
    create?: XOR<UserCreateWithoutTicketsClaimedInput, UserUncheckedCreateWithoutTicketsClaimedInput>
    connectOrCreate?: UserCreateOrConnectWithoutTicketsClaimedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTicketsClosedInput = {
    create?: XOR<UserCreateWithoutTicketsClosedInput, UserUncheckedCreateWithoutTicketsClosedInput>
    connectOrCreate?: UserCreateOrConnectWithoutTicketsClosedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTicketsCreatedInput = {
    create?: XOR<UserCreateWithoutTicketsCreatedInput, UserUncheckedCreateWithoutTicketsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutTicketsCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type FeedbackCreateNestedOneWithoutTicketInput = {
    create?: XOR<FeedbackCreateWithoutTicketInput, FeedbackUncheckedCreateWithoutTicketInput>
    connectOrCreate?: FeedbackCreateOrConnectWithoutTicketInput
    connect?: FeedbackWhereUniqueInput
  }

  export type GuildCreateNestedOneWithoutTicketsInput = {
    create?: XOR<GuildCreateWithoutTicketsInput, GuildUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: GuildCreateOrConnectWithoutTicketsInput
    connect?: GuildWhereUniqueInput
  }

  export type TicketCreateNestedManyWithoutReferencesTicketInput = {
    create?: XOR<TicketCreateWithoutReferencesTicketInput, TicketUncheckedCreateWithoutReferencesTicketInput> | TicketCreateWithoutReferencesTicketInput[] | TicketUncheckedCreateWithoutReferencesTicketInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutReferencesTicketInput | TicketCreateOrConnectWithoutReferencesTicketInput[]
    createMany?: TicketCreateManyReferencesTicketInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type TicketCreateNestedOneWithoutReferencedByInput = {
    create?: XOR<TicketCreateWithoutReferencedByInput, TicketUncheckedCreateWithoutReferencedByInput>
    connectOrCreate?: TicketCreateOrConnectWithoutReferencedByInput
    connect?: TicketWhereUniqueInput
  }

  export type QuestionAnswerCreateNestedManyWithoutTicketInput = {
    create?: XOR<QuestionAnswerCreateWithoutTicketInput, QuestionAnswerUncheckedCreateWithoutTicketInput> | QuestionAnswerCreateWithoutTicketInput[] | QuestionAnswerUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutTicketInput | QuestionAnswerCreateOrConnectWithoutTicketInput[]
    createMany?: QuestionAnswerCreateManyTicketInputEnvelope
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
  }

  export type ArchivedChannelUncheckedCreateNestedManyWithoutTicketInput = {
    create?: XOR<ArchivedChannelCreateWithoutTicketInput, ArchivedChannelUncheckedCreateWithoutTicketInput> | ArchivedChannelCreateWithoutTicketInput[] | ArchivedChannelUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: ArchivedChannelCreateOrConnectWithoutTicketInput | ArchivedChannelCreateOrConnectWithoutTicketInput[]
    createMany?: ArchivedChannelCreateManyTicketInputEnvelope
    connect?: ArchivedChannelWhereUniqueInput | ArchivedChannelWhereUniqueInput[]
  }

  export type ArchivedMessageUncheckedCreateNestedManyWithoutTicketInput = {
    create?: XOR<ArchivedMessageCreateWithoutTicketInput, ArchivedMessageUncheckedCreateWithoutTicketInput> | ArchivedMessageCreateWithoutTicketInput[] | ArchivedMessageUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: ArchivedMessageCreateOrConnectWithoutTicketInput | ArchivedMessageCreateOrConnectWithoutTicketInput[]
    createMany?: ArchivedMessageCreateManyTicketInputEnvelope
    connect?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
  }

  export type ArchivedRoleUncheckedCreateNestedManyWithoutTicketInput = {
    create?: XOR<ArchivedRoleCreateWithoutTicketInput, ArchivedRoleUncheckedCreateWithoutTicketInput> | ArchivedRoleCreateWithoutTicketInput[] | ArchivedRoleUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: ArchivedRoleCreateOrConnectWithoutTicketInput | ArchivedRoleCreateOrConnectWithoutTicketInput[]
    createMany?: ArchivedRoleCreateManyTicketInputEnvelope
    connect?: ArchivedRoleWhereUniqueInput | ArchivedRoleWhereUniqueInput[]
  }

  export type ArchivedUserUncheckedCreateNestedManyWithoutTicketInput = {
    create?: XOR<ArchivedUserCreateWithoutTicketInput, ArchivedUserUncheckedCreateWithoutTicketInput> | ArchivedUserCreateWithoutTicketInput[] | ArchivedUserUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: ArchivedUserCreateOrConnectWithoutTicketInput | ArchivedUserCreateOrConnectWithoutTicketInput[]
    createMany?: ArchivedUserCreateManyTicketInputEnvelope
    connect?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedOneWithoutTicketInput = {
    create?: XOR<FeedbackCreateWithoutTicketInput, FeedbackUncheckedCreateWithoutTicketInput>
    connectOrCreate?: FeedbackCreateOrConnectWithoutTicketInput
    connect?: FeedbackWhereUniqueInput
  }

  export type TicketUncheckedCreateNestedManyWithoutReferencesTicketInput = {
    create?: XOR<TicketCreateWithoutReferencesTicketInput, TicketUncheckedCreateWithoutReferencesTicketInput> | TicketCreateWithoutReferencesTicketInput[] | TicketUncheckedCreateWithoutReferencesTicketInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutReferencesTicketInput | TicketCreateOrConnectWithoutReferencesTicketInput[]
    createMany?: TicketCreateManyReferencesTicketInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type QuestionAnswerUncheckedCreateNestedManyWithoutTicketInput = {
    create?: XOR<QuestionAnswerCreateWithoutTicketInput, QuestionAnswerUncheckedCreateWithoutTicketInput> | QuestionAnswerCreateWithoutTicketInput[] | QuestionAnswerUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutTicketInput | QuestionAnswerCreateOrConnectWithoutTicketInput[]
    createMany?: QuestionAnswerCreateManyTicketInputEnvelope
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumTicketPriorityFieldUpdateOperationsInput = {
    set?: $Enums.TicketPriority | null
  }

  export type ArchivedChannelUpdateManyWithoutTicketNestedInput = {
    create?: XOR<ArchivedChannelCreateWithoutTicketInput, ArchivedChannelUncheckedCreateWithoutTicketInput> | ArchivedChannelCreateWithoutTicketInput[] | ArchivedChannelUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: ArchivedChannelCreateOrConnectWithoutTicketInput | ArchivedChannelCreateOrConnectWithoutTicketInput[]
    upsert?: ArchivedChannelUpsertWithWhereUniqueWithoutTicketInput | ArchivedChannelUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: ArchivedChannelCreateManyTicketInputEnvelope
    set?: ArchivedChannelWhereUniqueInput | ArchivedChannelWhereUniqueInput[]
    disconnect?: ArchivedChannelWhereUniqueInput | ArchivedChannelWhereUniqueInput[]
    delete?: ArchivedChannelWhereUniqueInput | ArchivedChannelWhereUniqueInput[]
    connect?: ArchivedChannelWhereUniqueInput | ArchivedChannelWhereUniqueInput[]
    update?: ArchivedChannelUpdateWithWhereUniqueWithoutTicketInput | ArchivedChannelUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: ArchivedChannelUpdateManyWithWhereWithoutTicketInput | ArchivedChannelUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: ArchivedChannelScalarWhereInput | ArchivedChannelScalarWhereInput[]
  }

  export type ArchivedMessageUpdateManyWithoutTicketNestedInput = {
    create?: XOR<ArchivedMessageCreateWithoutTicketInput, ArchivedMessageUncheckedCreateWithoutTicketInput> | ArchivedMessageCreateWithoutTicketInput[] | ArchivedMessageUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: ArchivedMessageCreateOrConnectWithoutTicketInput | ArchivedMessageCreateOrConnectWithoutTicketInput[]
    upsert?: ArchivedMessageUpsertWithWhereUniqueWithoutTicketInput | ArchivedMessageUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: ArchivedMessageCreateManyTicketInputEnvelope
    set?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
    disconnect?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
    delete?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
    connect?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
    update?: ArchivedMessageUpdateWithWhereUniqueWithoutTicketInput | ArchivedMessageUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: ArchivedMessageUpdateManyWithWhereWithoutTicketInput | ArchivedMessageUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: ArchivedMessageScalarWhereInput | ArchivedMessageScalarWhereInput[]
  }

  export type ArchivedRoleUpdateManyWithoutTicketNestedInput = {
    create?: XOR<ArchivedRoleCreateWithoutTicketInput, ArchivedRoleUncheckedCreateWithoutTicketInput> | ArchivedRoleCreateWithoutTicketInput[] | ArchivedRoleUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: ArchivedRoleCreateOrConnectWithoutTicketInput | ArchivedRoleCreateOrConnectWithoutTicketInput[]
    upsert?: ArchivedRoleUpsertWithWhereUniqueWithoutTicketInput | ArchivedRoleUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: ArchivedRoleCreateManyTicketInputEnvelope
    set?: ArchivedRoleWhereUniqueInput | ArchivedRoleWhereUniqueInput[]
    disconnect?: ArchivedRoleWhereUniqueInput | ArchivedRoleWhereUniqueInput[]
    delete?: ArchivedRoleWhereUniqueInput | ArchivedRoleWhereUniqueInput[]
    connect?: ArchivedRoleWhereUniqueInput | ArchivedRoleWhereUniqueInput[]
    update?: ArchivedRoleUpdateWithWhereUniqueWithoutTicketInput | ArchivedRoleUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: ArchivedRoleUpdateManyWithWhereWithoutTicketInput | ArchivedRoleUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: ArchivedRoleScalarWhereInput | ArchivedRoleScalarWhereInput[]
  }

  export type ArchivedUserUpdateManyWithoutTicketNestedInput = {
    create?: XOR<ArchivedUserCreateWithoutTicketInput, ArchivedUserUncheckedCreateWithoutTicketInput> | ArchivedUserCreateWithoutTicketInput[] | ArchivedUserUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: ArchivedUserCreateOrConnectWithoutTicketInput | ArchivedUserCreateOrConnectWithoutTicketInput[]
    upsert?: ArchivedUserUpsertWithWhereUniqueWithoutTicketInput | ArchivedUserUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: ArchivedUserCreateManyTicketInputEnvelope
    set?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
    disconnect?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
    delete?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
    connect?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
    update?: ArchivedUserUpdateWithWhereUniqueWithoutTicketInput | ArchivedUserUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: ArchivedUserUpdateManyWithWhereWithoutTicketInput | ArchivedUserUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: ArchivedUserScalarWhereInput | ArchivedUserScalarWhereInput[]
  }

  export type CategoryUpdateOneWithoutTicketsNestedInput = {
    create?: XOR<CategoryCreateWithoutTicketsInput, CategoryUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutTicketsInput
    upsert?: CategoryUpsertWithoutTicketsInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutTicketsInput, CategoryUpdateWithoutTicketsInput>, CategoryUncheckedUpdateWithoutTicketsInput>
  }

  export type UserUpdateOneWithoutTicketsClaimedNestedInput = {
    create?: XOR<UserCreateWithoutTicketsClaimedInput, UserUncheckedCreateWithoutTicketsClaimedInput>
    connectOrCreate?: UserCreateOrConnectWithoutTicketsClaimedInput
    upsert?: UserUpsertWithoutTicketsClaimedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTicketsClaimedInput, UserUpdateWithoutTicketsClaimedInput>, UserUncheckedUpdateWithoutTicketsClaimedInput>
  }

  export type UserUpdateOneWithoutTicketsClosedNestedInput = {
    create?: XOR<UserCreateWithoutTicketsClosedInput, UserUncheckedCreateWithoutTicketsClosedInput>
    connectOrCreate?: UserCreateOrConnectWithoutTicketsClosedInput
    upsert?: UserUpsertWithoutTicketsClosedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTicketsClosedInput, UserUpdateWithoutTicketsClosedInput>, UserUncheckedUpdateWithoutTicketsClosedInput>
  }

  export type UserUpdateOneRequiredWithoutTicketsCreatedNestedInput = {
    create?: XOR<UserCreateWithoutTicketsCreatedInput, UserUncheckedCreateWithoutTicketsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutTicketsCreatedInput
    upsert?: UserUpsertWithoutTicketsCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTicketsCreatedInput, UserUpdateWithoutTicketsCreatedInput>, UserUncheckedUpdateWithoutTicketsCreatedInput>
  }

  export type FeedbackUpdateOneWithoutTicketNestedInput = {
    create?: XOR<FeedbackCreateWithoutTicketInput, FeedbackUncheckedCreateWithoutTicketInput>
    connectOrCreate?: FeedbackCreateOrConnectWithoutTicketInput
    upsert?: FeedbackUpsertWithoutTicketInput
    disconnect?: FeedbackWhereInput | boolean
    delete?: FeedbackWhereInput | boolean
    connect?: FeedbackWhereUniqueInput
    update?: XOR<XOR<FeedbackUpdateToOneWithWhereWithoutTicketInput, FeedbackUpdateWithoutTicketInput>, FeedbackUncheckedUpdateWithoutTicketInput>
  }

  export type GuildUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<GuildCreateWithoutTicketsInput, GuildUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: GuildCreateOrConnectWithoutTicketsInput
    upsert?: GuildUpsertWithoutTicketsInput
    connect?: GuildWhereUniqueInput
    update?: XOR<XOR<GuildUpdateToOneWithWhereWithoutTicketsInput, GuildUpdateWithoutTicketsInput>, GuildUncheckedUpdateWithoutTicketsInput>
  }

  export type TicketUpdateManyWithoutReferencesTicketNestedInput = {
    create?: XOR<TicketCreateWithoutReferencesTicketInput, TicketUncheckedCreateWithoutReferencesTicketInput> | TicketCreateWithoutReferencesTicketInput[] | TicketUncheckedCreateWithoutReferencesTicketInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutReferencesTicketInput | TicketCreateOrConnectWithoutReferencesTicketInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutReferencesTicketInput | TicketUpsertWithWhereUniqueWithoutReferencesTicketInput[]
    createMany?: TicketCreateManyReferencesTicketInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutReferencesTicketInput | TicketUpdateWithWhereUniqueWithoutReferencesTicketInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutReferencesTicketInput | TicketUpdateManyWithWhereWithoutReferencesTicketInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type TicketUpdateOneWithoutReferencedByNestedInput = {
    create?: XOR<TicketCreateWithoutReferencedByInput, TicketUncheckedCreateWithoutReferencedByInput>
    connectOrCreate?: TicketCreateOrConnectWithoutReferencedByInput
    upsert?: TicketUpsertWithoutReferencedByInput
    disconnect?: TicketWhereInput | boolean
    delete?: TicketWhereInput | boolean
    connect?: TicketWhereUniqueInput
    update?: XOR<XOR<TicketUpdateToOneWithWhereWithoutReferencedByInput, TicketUpdateWithoutReferencedByInput>, TicketUncheckedUpdateWithoutReferencedByInput>
  }

  export type QuestionAnswerUpdateManyWithoutTicketNestedInput = {
    create?: XOR<QuestionAnswerCreateWithoutTicketInput, QuestionAnswerUncheckedCreateWithoutTicketInput> | QuestionAnswerCreateWithoutTicketInput[] | QuestionAnswerUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutTicketInput | QuestionAnswerCreateOrConnectWithoutTicketInput[]
    upsert?: QuestionAnswerUpsertWithWhereUniqueWithoutTicketInput | QuestionAnswerUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: QuestionAnswerCreateManyTicketInputEnvelope
    set?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    disconnect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    delete?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    update?: QuestionAnswerUpdateWithWhereUniqueWithoutTicketInput | QuestionAnswerUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: QuestionAnswerUpdateManyWithWhereWithoutTicketInput | QuestionAnswerUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: QuestionAnswerScalarWhereInput | QuestionAnswerScalarWhereInput[]
  }

  export type ArchivedChannelUncheckedUpdateManyWithoutTicketNestedInput = {
    create?: XOR<ArchivedChannelCreateWithoutTicketInput, ArchivedChannelUncheckedCreateWithoutTicketInput> | ArchivedChannelCreateWithoutTicketInput[] | ArchivedChannelUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: ArchivedChannelCreateOrConnectWithoutTicketInput | ArchivedChannelCreateOrConnectWithoutTicketInput[]
    upsert?: ArchivedChannelUpsertWithWhereUniqueWithoutTicketInput | ArchivedChannelUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: ArchivedChannelCreateManyTicketInputEnvelope
    set?: ArchivedChannelWhereUniqueInput | ArchivedChannelWhereUniqueInput[]
    disconnect?: ArchivedChannelWhereUniqueInput | ArchivedChannelWhereUniqueInput[]
    delete?: ArchivedChannelWhereUniqueInput | ArchivedChannelWhereUniqueInput[]
    connect?: ArchivedChannelWhereUniqueInput | ArchivedChannelWhereUniqueInput[]
    update?: ArchivedChannelUpdateWithWhereUniqueWithoutTicketInput | ArchivedChannelUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: ArchivedChannelUpdateManyWithWhereWithoutTicketInput | ArchivedChannelUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: ArchivedChannelScalarWhereInput | ArchivedChannelScalarWhereInput[]
  }

  export type ArchivedMessageUncheckedUpdateManyWithoutTicketNestedInput = {
    create?: XOR<ArchivedMessageCreateWithoutTicketInput, ArchivedMessageUncheckedCreateWithoutTicketInput> | ArchivedMessageCreateWithoutTicketInput[] | ArchivedMessageUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: ArchivedMessageCreateOrConnectWithoutTicketInput | ArchivedMessageCreateOrConnectWithoutTicketInput[]
    upsert?: ArchivedMessageUpsertWithWhereUniqueWithoutTicketInput | ArchivedMessageUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: ArchivedMessageCreateManyTicketInputEnvelope
    set?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
    disconnect?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
    delete?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
    connect?: ArchivedMessageWhereUniqueInput | ArchivedMessageWhereUniqueInput[]
    update?: ArchivedMessageUpdateWithWhereUniqueWithoutTicketInput | ArchivedMessageUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: ArchivedMessageUpdateManyWithWhereWithoutTicketInput | ArchivedMessageUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: ArchivedMessageScalarWhereInput | ArchivedMessageScalarWhereInput[]
  }

  export type ArchivedRoleUncheckedUpdateManyWithoutTicketNestedInput = {
    create?: XOR<ArchivedRoleCreateWithoutTicketInput, ArchivedRoleUncheckedCreateWithoutTicketInput> | ArchivedRoleCreateWithoutTicketInput[] | ArchivedRoleUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: ArchivedRoleCreateOrConnectWithoutTicketInput | ArchivedRoleCreateOrConnectWithoutTicketInput[]
    upsert?: ArchivedRoleUpsertWithWhereUniqueWithoutTicketInput | ArchivedRoleUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: ArchivedRoleCreateManyTicketInputEnvelope
    set?: ArchivedRoleWhereUniqueInput | ArchivedRoleWhereUniqueInput[]
    disconnect?: ArchivedRoleWhereUniqueInput | ArchivedRoleWhereUniqueInput[]
    delete?: ArchivedRoleWhereUniqueInput | ArchivedRoleWhereUniqueInput[]
    connect?: ArchivedRoleWhereUniqueInput | ArchivedRoleWhereUniqueInput[]
    update?: ArchivedRoleUpdateWithWhereUniqueWithoutTicketInput | ArchivedRoleUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: ArchivedRoleUpdateManyWithWhereWithoutTicketInput | ArchivedRoleUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: ArchivedRoleScalarWhereInput | ArchivedRoleScalarWhereInput[]
  }

  export type ArchivedUserUncheckedUpdateManyWithoutTicketNestedInput = {
    create?: XOR<ArchivedUserCreateWithoutTicketInput, ArchivedUserUncheckedCreateWithoutTicketInput> | ArchivedUserCreateWithoutTicketInput[] | ArchivedUserUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: ArchivedUserCreateOrConnectWithoutTicketInput | ArchivedUserCreateOrConnectWithoutTicketInput[]
    upsert?: ArchivedUserUpsertWithWhereUniqueWithoutTicketInput | ArchivedUserUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: ArchivedUserCreateManyTicketInputEnvelope
    set?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
    disconnect?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
    delete?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
    connect?: ArchivedUserWhereUniqueInput | ArchivedUserWhereUniqueInput[]
    update?: ArchivedUserUpdateWithWhereUniqueWithoutTicketInput | ArchivedUserUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: ArchivedUserUpdateManyWithWhereWithoutTicketInput | ArchivedUserUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: ArchivedUserScalarWhereInput | ArchivedUserScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateOneWithoutTicketNestedInput = {
    create?: XOR<FeedbackCreateWithoutTicketInput, FeedbackUncheckedCreateWithoutTicketInput>
    connectOrCreate?: FeedbackCreateOrConnectWithoutTicketInput
    upsert?: FeedbackUpsertWithoutTicketInput
    disconnect?: FeedbackWhereInput | boolean
    delete?: FeedbackWhereInput | boolean
    connect?: FeedbackWhereUniqueInput
    update?: XOR<XOR<FeedbackUpdateToOneWithWhereWithoutTicketInput, FeedbackUpdateWithoutTicketInput>, FeedbackUncheckedUpdateWithoutTicketInput>
  }

  export type TicketUncheckedUpdateManyWithoutReferencesTicketNestedInput = {
    create?: XOR<TicketCreateWithoutReferencesTicketInput, TicketUncheckedCreateWithoutReferencesTicketInput> | TicketCreateWithoutReferencesTicketInput[] | TicketUncheckedCreateWithoutReferencesTicketInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutReferencesTicketInput | TicketCreateOrConnectWithoutReferencesTicketInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutReferencesTicketInput | TicketUpsertWithWhereUniqueWithoutReferencesTicketInput[]
    createMany?: TicketCreateManyReferencesTicketInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutReferencesTicketInput | TicketUpdateWithWhereUniqueWithoutReferencesTicketInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutReferencesTicketInput | TicketUpdateManyWithWhereWithoutReferencesTicketInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type QuestionAnswerUncheckedUpdateManyWithoutTicketNestedInput = {
    create?: XOR<QuestionAnswerCreateWithoutTicketInput, QuestionAnswerUncheckedCreateWithoutTicketInput> | QuestionAnswerCreateWithoutTicketInput[] | QuestionAnswerUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutTicketInput | QuestionAnswerCreateOrConnectWithoutTicketInput[]
    upsert?: QuestionAnswerUpsertWithWhereUniqueWithoutTicketInput | QuestionAnswerUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: QuestionAnswerCreateManyTicketInputEnvelope
    set?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    disconnect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    delete?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    update?: QuestionAnswerUpdateWithWhereUniqueWithoutTicketInput | QuestionAnswerUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: QuestionAnswerUpdateManyWithWhereWithoutTicketInput | QuestionAnswerUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: QuestionAnswerScalarWhereInput | QuestionAnswerScalarWhereInput[]
  }

  export type FeedbackCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type TicketCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TicketCreateWithoutCreatedByInput, TicketUncheckedCreateWithoutCreatedByInput> | TicketCreateWithoutCreatedByInput[] | TicketUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutCreatedByInput | TicketCreateOrConnectWithoutCreatedByInput[]
    createMany?: TicketCreateManyCreatedByInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type TicketCreateNestedManyWithoutClosedByInput = {
    create?: XOR<TicketCreateWithoutClosedByInput, TicketUncheckedCreateWithoutClosedByInput> | TicketCreateWithoutClosedByInput[] | TicketUncheckedCreateWithoutClosedByInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutClosedByInput | TicketCreateOrConnectWithoutClosedByInput[]
    createMany?: TicketCreateManyClosedByInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type TicketCreateNestedManyWithoutClaimedByInput = {
    create?: XOR<TicketCreateWithoutClaimedByInput, TicketUncheckedCreateWithoutClaimedByInput> | TicketCreateWithoutClaimedByInput[] | TicketUncheckedCreateWithoutClaimedByInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutClaimedByInput | TicketCreateOrConnectWithoutClaimedByInput[]
    createMany?: TicketCreateManyClaimedByInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type QuestionAnswerCreateNestedManyWithoutUserInput = {
    create?: XOR<QuestionAnswerCreateWithoutUserInput, QuestionAnswerUncheckedCreateWithoutUserInput> | QuestionAnswerCreateWithoutUserInput[] | QuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutUserInput | QuestionAnswerCreateOrConnectWithoutUserInput[]
    createMany?: QuestionAnswerCreateManyUserInputEnvelope
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type TicketUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TicketCreateWithoutCreatedByInput, TicketUncheckedCreateWithoutCreatedByInput> | TicketCreateWithoutCreatedByInput[] | TicketUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutCreatedByInput | TicketCreateOrConnectWithoutCreatedByInput[]
    createMany?: TicketCreateManyCreatedByInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type TicketUncheckedCreateNestedManyWithoutClosedByInput = {
    create?: XOR<TicketCreateWithoutClosedByInput, TicketUncheckedCreateWithoutClosedByInput> | TicketCreateWithoutClosedByInput[] | TicketUncheckedCreateWithoutClosedByInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutClosedByInput | TicketCreateOrConnectWithoutClosedByInput[]
    createMany?: TicketCreateManyClosedByInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type TicketUncheckedCreateNestedManyWithoutClaimedByInput = {
    create?: XOR<TicketCreateWithoutClaimedByInput, TicketUncheckedCreateWithoutClaimedByInput> | TicketCreateWithoutClaimedByInput[] | TicketUncheckedCreateWithoutClaimedByInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutClaimedByInput | TicketCreateOrConnectWithoutClaimedByInput[]
    createMany?: TicketCreateManyClaimedByInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type QuestionAnswerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<QuestionAnswerCreateWithoutUserInput, QuestionAnswerUncheckedCreateWithoutUserInput> | QuestionAnswerCreateWithoutUserInput[] | QuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutUserInput | QuestionAnswerCreateOrConnectWithoutUserInput[]
    createMany?: QuestionAnswerCreateManyUserInputEnvelope
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
  }

  export type FeedbackUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type TicketUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TicketCreateWithoutCreatedByInput, TicketUncheckedCreateWithoutCreatedByInput> | TicketCreateWithoutCreatedByInput[] | TicketUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutCreatedByInput | TicketCreateOrConnectWithoutCreatedByInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutCreatedByInput | TicketUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TicketCreateManyCreatedByInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutCreatedByInput | TicketUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutCreatedByInput | TicketUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type TicketUpdateManyWithoutClosedByNestedInput = {
    create?: XOR<TicketCreateWithoutClosedByInput, TicketUncheckedCreateWithoutClosedByInput> | TicketCreateWithoutClosedByInput[] | TicketUncheckedCreateWithoutClosedByInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutClosedByInput | TicketCreateOrConnectWithoutClosedByInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutClosedByInput | TicketUpsertWithWhereUniqueWithoutClosedByInput[]
    createMany?: TicketCreateManyClosedByInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutClosedByInput | TicketUpdateWithWhereUniqueWithoutClosedByInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutClosedByInput | TicketUpdateManyWithWhereWithoutClosedByInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type TicketUpdateManyWithoutClaimedByNestedInput = {
    create?: XOR<TicketCreateWithoutClaimedByInput, TicketUncheckedCreateWithoutClaimedByInput> | TicketCreateWithoutClaimedByInput[] | TicketUncheckedCreateWithoutClaimedByInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutClaimedByInput | TicketCreateOrConnectWithoutClaimedByInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutClaimedByInput | TicketUpsertWithWhereUniqueWithoutClaimedByInput[]
    createMany?: TicketCreateManyClaimedByInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutClaimedByInput | TicketUpdateWithWhereUniqueWithoutClaimedByInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutClaimedByInput | TicketUpdateManyWithWhereWithoutClaimedByInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type QuestionAnswerUpdateManyWithoutUserNestedInput = {
    create?: XOR<QuestionAnswerCreateWithoutUserInput, QuestionAnswerUncheckedCreateWithoutUserInput> | QuestionAnswerCreateWithoutUserInput[] | QuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutUserInput | QuestionAnswerCreateOrConnectWithoutUserInput[]
    upsert?: QuestionAnswerUpsertWithWhereUniqueWithoutUserInput | QuestionAnswerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: QuestionAnswerCreateManyUserInputEnvelope
    set?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    disconnect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    delete?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    update?: QuestionAnswerUpdateWithWhereUniqueWithoutUserInput | QuestionAnswerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: QuestionAnswerUpdateManyWithWhereWithoutUserInput | QuestionAnswerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: QuestionAnswerScalarWhereInput | QuestionAnswerScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type TicketUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TicketCreateWithoutCreatedByInput, TicketUncheckedCreateWithoutCreatedByInput> | TicketCreateWithoutCreatedByInput[] | TicketUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutCreatedByInput | TicketCreateOrConnectWithoutCreatedByInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutCreatedByInput | TicketUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TicketCreateManyCreatedByInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutCreatedByInput | TicketUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutCreatedByInput | TicketUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type TicketUncheckedUpdateManyWithoutClosedByNestedInput = {
    create?: XOR<TicketCreateWithoutClosedByInput, TicketUncheckedCreateWithoutClosedByInput> | TicketCreateWithoutClosedByInput[] | TicketUncheckedCreateWithoutClosedByInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutClosedByInput | TicketCreateOrConnectWithoutClosedByInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutClosedByInput | TicketUpsertWithWhereUniqueWithoutClosedByInput[]
    createMany?: TicketCreateManyClosedByInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutClosedByInput | TicketUpdateWithWhereUniqueWithoutClosedByInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutClosedByInput | TicketUpdateManyWithWhereWithoutClosedByInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type TicketUncheckedUpdateManyWithoutClaimedByNestedInput = {
    create?: XOR<TicketCreateWithoutClaimedByInput, TicketUncheckedCreateWithoutClaimedByInput> | TicketCreateWithoutClaimedByInput[] | TicketUncheckedCreateWithoutClaimedByInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutClaimedByInput | TicketCreateOrConnectWithoutClaimedByInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutClaimedByInput | TicketUpsertWithWhereUniqueWithoutClaimedByInput[]
    createMany?: TicketCreateManyClaimedByInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutClaimedByInput | TicketUpdateWithWhereUniqueWithoutClaimedByInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutClaimedByInput | TicketUpdateManyWithWhereWithoutClaimedByInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type QuestionAnswerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<QuestionAnswerCreateWithoutUserInput, QuestionAnswerUncheckedCreateWithoutUserInput> | QuestionAnswerCreateWithoutUserInput[] | QuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutUserInput | QuestionAnswerCreateOrConnectWithoutUserInput[]
    upsert?: QuestionAnswerUpsertWithWhereUniqueWithoutUserInput | QuestionAnswerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: QuestionAnswerCreateManyUserInputEnvelope
    set?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    disconnect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    delete?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    update?: QuestionAnswerUpdateWithWhereUniqueWithoutUserInput | QuestionAnswerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: QuestionAnswerUpdateManyWithWhereWithoutUserInput | QuestionAnswerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: QuestionAnswerScalarWhereInput | QuestionAnswerScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumQuestionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[]
    notIn?: $Enums.QuestionType[]
    not?: NestedEnumQuestionTypeFilter<$PrismaModel> | $Enums.QuestionType
  }

  export type NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[]
    notIn?: $Enums.QuestionType[]
    not?: NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumTicketPriorityNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.TicketPriority | EnumTicketPriorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.TicketPriority[] | null
    notIn?: $Enums.TicketPriority[] | null
    not?: NestedEnumTicketPriorityNullableFilter<$PrismaModel> | $Enums.TicketPriority | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumTicketPriorityNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TicketPriority | EnumTicketPriorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.TicketPriority[] | null
    notIn?: $Enums.TicketPriority[] | null
    not?: NestedEnumTicketPriorityNullableWithAggregatesFilter<$PrismaModel> | $Enums.TicketPriority | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTicketPriorityNullableFilter<$PrismaModel>
    _max?: NestedEnumTicketPriorityNullableFilter<$PrismaModel>
  }

  export type TicketCreateWithoutArchivedChannelsInput = {
    closedAt?: Date | string | null
    closedReason?: string | null
    createdAt?: Date | string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    topic?: string | null
    archivedMessages?: ArchivedMessageCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserCreateNestedManyWithoutTicketInput
    category?: CategoryCreateNestedOneWithoutTicketsInput
    claimedBy?: UserCreateNestedOneWithoutTicketsClaimedInput
    closedBy?: UserCreateNestedOneWithoutTicketsClosedInput
    createdBy: UserCreateNestedOneWithoutTicketsCreatedInput
    feedback?: FeedbackCreateNestedOneWithoutTicketInput
    guild: GuildCreateNestedOneWithoutTicketsInput
    referencedBy?: TicketCreateNestedManyWithoutReferencesTicketInput
    referencesTicket?: TicketCreateNestedOneWithoutReferencedByInput
    questionAnswers?: QuestionAnswerCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutArchivedChannelsInput = {
    categoryId?: number | null
    claimedById?: string | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
    archivedMessages?: ArchivedMessageUncheckedCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleUncheckedCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserUncheckedCreateNestedManyWithoutTicketInput
    feedback?: FeedbackUncheckedCreateNestedOneWithoutTicketInput
    referencedBy?: TicketUncheckedCreateNestedManyWithoutReferencesTicketInput
    questionAnswers?: QuestionAnswerUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutArchivedChannelsInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutArchivedChannelsInput, TicketUncheckedCreateWithoutArchivedChannelsInput>
  }

  export type TicketUpsertWithoutArchivedChannelsInput = {
    update: XOR<TicketUpdateWithoutArchivedChannelsInput, TicketUncheckedUpdateWithoutArchivedChannelsInput>
    create: XOR<TicketCreateWithoutArchivedChannelsInput, TicketUncheckedCreateWithoutArchivedChannelsInput>
    where?: TicketWhereInput
  }

  export type TicketUpdateToOneWithWhereWithoutArchivedChannelsInput = {
    where?: TicketWhereInput
    data: XOR<TicketUpdateWithoutArchivedChannelsInput, TicketUncheckedUpdateWithoutArchivedChannelsInput>
  }

  export type TicketUpdateWithoutArchivedChannelsInput = {
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedMessages?: ArchivedMessageUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUpdateManyWithoutTicketNestedInput
    category?: CategoryUpdateOneWithoutTicketsNestedInput
    claimedBy?: UserUpdateOneWithoutTicketsClaimedNestedInput
    closedBy?: UserUpdateOneWithoutTicketsClosedNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTicketsCreatedNestedInput
    feedback?: FeedbackUpdateOneWithoutTicketNestedInput
    guild?: GuildUpdateOneRequiredWithoutTicketsNestedInput
    referencedBy?: TicketUpdateManyWithoutReferencesTicketNestedInput
    referencesTicket?: TicketUpdateOneWithoutReferencedByNestedInput
    questionAnswers?: QuestionAnswerUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutArchivedChannelsInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedMessages?: ArchivedMessageUncheckedUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUncheckedUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUncheckedUpdateManyWithoutTicketNestedInput
    feedback?: FeedbackUncheckedUpdateOneWithoutTicketNestedInput
    referencedBy?: TicketUncheckedUpdateManyWithoutReferencesTicketNestedInput
    questionAnswers?: QuestionAnswerUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type ArchivedUserCreateWithoutArchivedMessagesInput = {
    avatar?: string | null
    bot?: boolean
    createdAt?: Date | string
    discriminator?: string | null
    displayName?: string | null
    userId: string
    username?: string | null
    role?: ArchivedRoleCreateNestedOneWithoutArchivedUsersInput
    ticket: TicketCreateNestedOneWithoutArchivedUsersInput
  }

  export type ArchivedUserUncheckedCreateWithoutArchivedMessagesInput = {
    avatar?: string | null
    bot?: boolean
    createdAt?: Date | string
    discriminator?: string | null
    displayName?: string | null
    roleId?: string | null
    ticketId: string
    userId: string
    username?: string | null
  }

  export type ArchivedUserCreateOrConnectWithoutArchivedMessagesInput = {
    where: ArchivedUserWhereUniqueInput
    create: XOR<ArchivedUserCreateWithoutArchivedMessagesInput, ArchivedUserUncheckedCreateWithoutArchivedMessagesInput>
  }

  export type TicketCreateWithoutArchivedMessagesInput = {
    closedAt?: Date | string | null
    closedReason?: string | null
    createdAt?: Date | string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserCreateNestedManyWithoutTicketInput
    category?: CategoryCreateNestedOneWithoutTicketsInput
    claimedBy?: UserCreateNestedOneWithoutTicketsClaimedInput
    closedBy?: UserCreateNestedOneWithoutTicketsClosedInput
    createdBy: UserCreateNestedOneWithoutTicketsCreatedInput
    feedback?: FeedbackCreateNestedOneWithoutTicketInput
    guild: GuildCreateNestedOneWithoutTicketsInput
    referencedBy?: TicketCreateNestedManyWithoutReferencesTicketInput
    referencesTicket?: TicketCreateNestedOneWithoutReferencedByInput
    questionAnswers?: QuestionAnswerCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutArchivedMessagesInput = {
    categoryId?: number | null
    claimedById?: string | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelUncheckedCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleUncheckedCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserUncheckedCreateNestedManyWithoutTicketInput
    feedback?: FeedbackUncheckedCreateNestedOneWithoutTicketInput
    referencedBy?: TicketUncheckedCreateNestedManyWithoutReferencesTicketInput
    questionAnswers?: QuestionAnswerUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutArchivedMessagesInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutArchivedMessagesInput, TicketUncheckedCreateWithoutArchivedMessagesInput>
  }

  export type ArchivedUserUpsertWithoutArchivedMessagesInput = {
    update: XOR<ArchivedUserUpdateWithoutArchivedMessagesInput, ArchivedUserUncheckedUpdateWithoutArchivedMessagesInput>
    create: XOR<ArchivedUserCreateWithoutArchivedMessagesInput, ArchivedUserUncheckedCreateWithoutArchivedMessagesInput>
    where?: ArchivedUserWhereInput
  }

  export type ArchivedUserUpdateToOneWithWhereWithoutArchivedMessagesInput = {
    where?: ArchivedUserWhereInput
    data: XOR<ArchivedUserUpdateWithoutArchivedMessagesInput, ArchivedUserUncheckedUpdateWithoutArchivedMessagesInput>
  }

  export type ArchivedUserUpdateWithoutArchivedMessagesInput = {
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discriminator?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    role?: ArchivedRoleUpdateOneWithoutArchivedUsersNestedInput
    ticket?: TicketUpdateOneRequiredWithoutArchivedUsersNestedInput
  }

  export type ArchivedUserUncheckedUpdateWithoutArchivedMessagesInput = {
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discriminator?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    ticketId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TicketUpsertWithoutArchivedMessagesInput = {
    update: XOR<TicketUpdateWithoutArchivedMessagesInput, TicketUncheckedUpdateWithoutArchivedMessagesInput>
    create: XOR<TicketCreateWithoutArchivedMessagesInput, TicketUncheckedCreateWithoutArchivedMessagesInput>
    where?: TicketWhereInput
  }

  export type TicketUpdateToOneWithWhereWithoutArchivedMessagesInput = {
    where?: TicketWhereInput
    data: XOR<TicketUpdateWithoutArchivedMessagesInput, TicketUncheckedUpdateWithoutArchivedMessagesInput>
  }

  export type TicketUpdateWithoutArchivedMessagesInput = {
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUpdateManyWithoutTicketNestedInput
    category?: CategoryUpdateOneWithoutTicketsNestedInput
    claimedBy?: UserUpdateOneWithoutTicketsClaimedNestedInput
    closedBy?: UserUpdateOneWithoutTicketsClosedNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTicketsCreatedNestedInput
    feedback?: FeedbackUpdateOneWithoutTicketNestedInput
    guild?: GuildUpdateOneRequiredWithoutTicketsNestedInput
    referencedBy?: TicketUpdateManyWithoutReferencesTicketNestedInput
    referencesTicket?: TicketUpdateOneWithoutReferencedByNestedInput
    questionAnswers?: QuestionAnswerUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutArchivedMessagesInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUncheckedUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUncheckedUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUncheckedUpdateManyWithoutTicketNestedInput
    feedback?: FeedbackUncheckedUpdateOneWithoutTicketNestedInput
    referencedBy?: TicketUncheckedUpdateManyWithoutReferencesTicketNestedInput
    questionAnswers?: QuestionAnswerUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type ArchivedUserCreateWithoutRoleInput = {
    avatar?: string | null
    bot?: boolean
    createdAt?: Date | string
    discriminator?: string | null
    displayName?: string | null
    userId: string
    username?: string | null
    archivedMessages?: ArchivedMessageCreateNestedManyWithoutAuthorInput
    ticket: TicketCreateNestedOneWithoutArchivedUsersInput
  }

  export type ArchivedUserUncheckedCreateWithoutRoleInput = {
    avatar?: string | null
    bot?: boolean
    createdAt?: Date | string
    discriminator?: string | null
    displayName?: string | null
    userId: string
    username?: string | null
    archivedMessages?: ArchivedMessageUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type ArchivedUserCreateOrConnectWithoutRoleInput = {
    where: ArchivedUserWhereUniqueInput
    create: XOR<ArchivedUserCreateWithoutRoleInput, ArchivedUserUncheckedCreateWithoutRoleInput>
  }

  export type ArchivedUserCreateManyRoleInputEnvelope = {
    data: ArchivedUserCreateManyRoleInput | ArchivedUserCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type TicketCreateWithoutArchivedRolesInput = {
    closedAt?: Date | string | null
    closedReason?: string | null
    createdAt?: Date | string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserCreateNestedManyWithoutTicketInput
    category?: CategoryCreateNestedOneWithoutTicketsInput
    claimedBy?: UserCreateNestedOneWithoutTicketsClaimedInput
    closedBy?: UserCreateNestedOneWithoutTicketsClosedInput
    createdBy: UserCreateNestedOneWithoutTicketsCreatedInput
    feedback?: FeedbackCreateNestedOneWithoutTicketInput
    guild: GuildCreateNestedOneWithoutTicketsInput
    referencedBy?: TicketCreateNestedManyWithoutReferencesTicketInput
    referencesTicket?: TicketCreateNestedOneWithoutReferencedByInput
    questionAnswers?: QuestionAnswerCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutArchivedRolesInput = {
    categoryId?: number | null
    claimedById?: string | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelUncheckedCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageUncheckedCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserUncheckedCreateNestedManyWithoutTicketInput
    feedback?: FeedbackUncheckedCreateNestedOneWithoutTicketInput
    referencedBy?: TicketUncheckedCreateNestedManyWithoutReferencesTicketInput
    questionAnswers?: QuestionAnswerUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutArchivedRolesInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutArchivedRolesInput, TicketUncheckedCreateWithoutArchivedRolesInput>
  }

  export type ArchivedUserUpsertWithWhereUniqueWithoutRoleInput = {
    where: ArchivedUserWhereUniqueInput
    update: XOR<ArchivedUserUpdateWithoutRoleInput, ArchivedUserUncheckedUpdateWithoutRoleInput>
    create: XOR<ArchivedUserCreateWithoutRoleInput, ArchivedUserUncheckedCreateWithoutRoleInput>
  }

  export type ArchivedUserUpdateWithWhereUniqueWithoutRoleInput = {
    where: ArchivedUserWhereUniqueInput
    data: XOR<ArchivedUserUpdateWithoutRoleInput, ArchivedUserUncheckedUpdateWithoutRoleInput>
  }

  export type ArchivedUserUpdateManyWithWhereWithoutRoleInput = {
    where: ArchivedUserScalarWhereInput
    data: XOR<ArchivedUserUpdateManyMutationInput, ArchivedUserUncheckedUpdateManyWithoutRoleInput>
  }

  export type ArchivedUserScalarWhereInput = {
    AND?: ArchivedUserScalarWhereInput | ArchivedUserScalarWhereInput[]
    OR?: ArchivedUserScalarWhereInput[]
    NOT?: ArchivedUserScalarWhereInput | ArchivedUserScalarWhereInput[]
    avatar?: StringNullableFilter<"ArchivedUser"> | string | null
    bot?: BoolFilter<"ArchivedUser"> | boolean
    createdAt?: DateTimeFilter<"ArchivedUser"> | Date | string
    discriminator?: StringNullableFilter<"ArchivedUser"> | string | null
    displayName?: StringNullableFilter<"ArchivedUser"> | string | null
    roleId?: StringNullableFilter<"ArchivedUser"> | string | null
    ticketId?: StringFilter<"ArchivedUser"> | string
    userId?: StringFilter<"ArchivedUser"> | string
    username?: StringNullableFilter<"ArchivedUser"> | string | null
  }

  export type TicketUpsertWithoutArchivedRolesInput = {
    update: XOR<TicketUpdateWithoutArchivedRolesInput, TicketUncheckedUpdateWithoutArchivedRolesInput>
    create: XOR<TicketCreateWithoutArchivedRolesInput, TicketUncheckedCreateWithoutArchivedRolesInput>
    where?: TicketWhereInput
  }

  export type TicketUpdateToOneWithWhereWithoutArchivedRolesInput = {
    where?: TicketWhereInput
    data: XOR<TicketUpdateWithoutArchivedRolesInput, TicketUncheckedUpdateWithoutArchivedRolesInput>
  }

  export type TicketUpdateWithoutArchivedRolesInput = {
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUpdateManyWithoutTicketNestedInput
    category?: CategoryUpdateOneWithoutTicketsNestedInput
    claimedBy?: UserUpdateOneWithoutTicketsClaimedNestedInput
    closedBy?: UserUpdateOneWithoutTicketsClosedNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTicketsCreatedNestedInput
    feedback?: FeedbackUpdateOneWithoutTicketNestedInput
    guild?: GuildUpdateOneRequiredWithoutTicketsNestedInput
    referencedBy?: TicketUpdateManyWithoutReferencesTicketNestedInput
    referencesTicket?: TicketUpdateOneWithoutReferencedByNestedInput
    questionAnswers?: QuestionAnswerUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutArchivedRolesInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUncheckedUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUncheckedUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUncheckedUpdateManyWithoutTicketNestedInput
    feedback?: FeedbackUncheckedUpdateOneWithoutTicketNestedInput
    referencedBy?: TicketUncheckedUpdateManyWithoutReferencesTicketNestedInput
    questionAnswers?: QuestionAnswerUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type ArchivedMessageCreateWithoutAuthorInput = {
    content: string
    createdAt?: Date | string
    deleted?: boolean
    edited?: boolean
    external?: boolean
    id: string
    ticket: TicketCreateNestedOneWithoutArchivedMessagesInput
  }

  export type ArchivedMessageUncheckedCreateWithoutAuthorInput = {
    content: string
    createdAt?: Date | string
    deleted?: boolean
    edited?: boolean
    external?: boolean
    id: string
  }

  export type ArchivedMessageCreateOrConnectWithoutAuthorInput = {
    where: ArchivedMessageWhereUniqueInput
    create: XOR<ArchivedMessageCreateWithoutAuthorInput, ArchivedMessageUncheckedCreateWithoutAuthorInput>
  }

  export type ArchivedMessageCreateManyAuthorInputEnvelope = {
    data: ArchivedMessageCreateManyAuthorInput | ArchivedMessageCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type ArchivedRoleCreateWithoutArchivedUsersInput = {
    colour?: string
    createdAt?: Date | string
    name: string
    roleId: string
    ticket: TicketCreateNestedOneWithoutArchivedRolesInput
  }

  export type ArchivedRoleUncheckedCreateWithoutArchivedUsersInput = {
    colour?: string
    createdAt?: Date | string
    name: string
    roleId: string
    ticketId: string
  }

  export type ArchivedRoleCreateOrConnectWithoutArchivedUsersInput = {
    where: ArchivedRoleWhereUniqueInput
    create: XOR<ArchivedRoleCreateWithoutArchivedUsersInput, ArchivedRoleUncheckedCreateWithoutArchivedUsersInput>
  }

  export type TicketCreateWithoutArchivedUsersInput = {
    closedAt?: Date | string | null
    closedReason?: string | null
    createdAt?: Date | string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleCreateNestedManyWithoutTicketInput
    category?: CategoryCreateNestedOneWithoutTicketsInput
    claimedBy?: UserCreateNestedOneWithoutTicketsClaimedInput
    closedBy?: UserCreateNestedOneWithoutTicketsClosedInput
    createdBy: UserCreateNestedOneWithoutTicketsCreatedInput
    feedback?: FeedbackCreateNestedOneWithoutTicketInput
    guild: GuildCreateNestedOneWithoutTicketsInput
    referencedBy?: TicketCreateNestedManyWithoutReferencesTicketInput
    referencesTicket?: TicketCreateNestedOneWithoutReferencedByInput
    questionAnswers?: QuestionAnswerCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutArchivedUsersInput = {
    categoryId?: number | null
    claimedById?: string | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelUncheckedCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageUncheckedCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleUncheckedCreateNestedManyWithoutTicketInput
    feedback?: FeedbackUncheckedCreateNestedOneWithoutTicketInput
    referencedBy?: TicketUncheckedCreateNestedManyWithoutReferencesTicketInput
    questionAnswers?: QuestionAnswerUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutArchivedUsersInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutArchivedUsersInput, TicketUncheckedCreateWithoutArchivedUsersInput>
  }

  export type ArchivedMessageUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ArchivedMessageWhereUniqueInput
    update: XOR<ArchivedMessageUpdateWithoutAuthorInput, ArchivedMessageUncheckedUpdateWithoutAuthorInput>
    create: XOR<ArchivedMessageCreateWithoutAuthorInput, ArchivedMessageUncheckedCreateWithoutAuthorInput>
  }

  export type ArchivedMessageUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ArchivedMessageWhereUniqueInput
    data: XOR<ArchivedMessageUpdateWithoutAuthorInput, ArchivedMessageUncheckedUpdateWithoutAuthorInput>
  }

  export type ArchivedMessageUpdateManyWithWhereWithoutAuthorInput = {
    where: ArchivedMessageScalarWhereInput
    data: XOR<ArchivedMessageUpdateManyMutationInput, ArchivedMessageUncheckedUpdateManyWithoutAuthorInput>
  }

  export type ArchivedMessageScalarWhereInput = {
    AND?: ArchivedMessageScalarWhereInput | ArchivedMessageScalarWhereInput[]
    OR?: ArchivedMessageScalarWhereInput[]
    NOT?: ArchivedMessageScalarWhereInput | ArchivedMessageScalarWhereInput[]
    authorId?: StringFilter<"ArchivedMessage"> | string
    content?: StringFilter<"ArchivedMessage"> | string
    createdAt?: DateTimeFilter<"ArchivedMessage"> | Date | string
    deleted?: BoolFilter<"ArchivedMessage"> | boolean
    edited?: BoolFilter<"ArchivedMessage"> | boolean
    external?: BoolFilter<"ArchivedMessage"> | boolean
    id?: StringFilter<"ArchivedMessage"> | string
    ticketId?: StringFilter<"ArchivedMessage"> | string
  }

  export type ArchivedRoleUpsertWithoutArchivedUsersInput = {
    update: XOR<ArchivedRoleUpdateWithoutArchivedUsersInput, ArchivedRoleUncheckedUpdateWithoutArchivedUsersInput>
    create: XOR<ArchivedRoleCreateWithoutArchivedUsersInput, ArchivedRoleUncheckedCreateWithoutArchivedUsersInput>
    where?: ArchivedRoleWhereInput
  }

  export type ArchivedRoleUpdateToOneWithWhereWithoutArchivedUsersInput = {
    where?: ArchivedRoleWhereInput
    data: XOR<ArchivedRoleUpdateWithoutArchivedUsersInput, ArchivedRoleUncheckedUpdateWithoutArchivedUsersInput>
  }

  export type ArchivedRoleUpdateWithoutArchivedUsersInput = {
    colour?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    ticket?: TicketUpdateOneRequiredWithoutArchivedRolesNestedInput
  }

  export type ArchivedRoleUncheckedUpdateWithoutArchivedUsersInput = {
    colour?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    ticketId?: StringFieldUpdateOperationsInput | string
  }

  export type TicketUpsertWithoutArchivedUsersInput = {
    update: XOR<TicketUpdateWithoutArchivedUsersInput, TicketUncheckedUpdateWithoutArchivedUsersInput>
    create: XOR<TicketCreateWithoutArchivedUsersInput, TicketUncheckedCreateWithoutArchivedUsersInput>
    where?: TicketWhereInput
  }

  export type TicketUpdateToOneWithWhereWithoutArchivedUsersInput = {
    where?: TicketWhereInput
    data: XOR<TicketUpdateWithoutArchivedUsersInput, TicketUncheckedUpdateWithoutArchivedUsersInput>
  }

  export type TicketUpdateWithoutArchivedUsersInput = {
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUpdateManyWithoutTicketNestedInput
    category?: CategoryUpdateOneWithoutTicketsNestedInput
    claimedBy?: UserUpdateOneWithoutTicketsClaimedNestedInput
    closedBy?: UserUpdateOneWithoutTicketsClosedNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTicketsCreatedNestedInput
    feedback?: FeedbackUpdateOneWithoutTicketNestedInput
    guild?: GuildUpdateOneRequiredWithoutTicketsNestedInput
    referencedBy?: TicketUpdateManyWithoutReferencesTicketNestedInput
    referencesTicket?: TicketUpdateOneWithoutReferencedByNestedInput
    questionAnswers?: QuestionAnswerUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutArchivedUsersInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUncheckedUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUncheckedUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUncheckedUpdateManyWithoutTicketNestedInput
    feedback?: FeedbackUncheckedUpdateOneWithoutTicketNestedInput
    referencedBy?: TicketUncheckedUpdateManyWithoutReferencesTicketNestedInput
    questionAnswers?: QuestionAnswerUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type GuildCreateWithoutCategoriesInput = {
    autoClose?: number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: boolean
    closeButton?: boolean
    createdAt?: Date | string
    errorColour?: string
    footer?: string | null
    id: string
    locale?: string
    logChannel?: string | null
    primaryColour?: string
    staleAfter?: number | null
    successColour?: string
    workingHours?: JsonNullValueInput | InputJsonValue
    feedback?: FeedbackCreateNestedManyWithoutGuildInput
    tags?: TagCreateNestedManyWithoutGuildInput
    tickets?: TicketCreateNestedManyWithoutGuildInput
  }

  export type GuildUncheckedCreateWithoutCategoriesInput = {
    autoClose?: number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: boolean
    closeButton?: boolean
    createdAt?: Date | string
    errorColour?: string
    footer?: string | null
    id: string
    locale?: string
    logChannel?: string | null
    primaryColour?: string
    staleAfter?: number | null
    successColour?: string
    workingHours?: JsonNullValueInput | InputJsonValue
    feedback?: FeedbackUncheckedCreateNestedManyWithoutGuildInput
    tags?: TagUncheckedCreateNestedManyWithoutGuildInput
    tickets?: TicketUncheckedCreateNestedManyWithoutGuildInput
  }

  export type GuildCreateOrConnectWithoutCategoriesInput = {
    where: GuildWhereUniqueInput
    create: XOR<GuildCreateWithoutCategoriesInput, GuildUncheckedCreateWithoutCategoriesInput>
  }

  export type QuestionCreateWithoutCategoryInput = {
    createdAt?: Date | string
    id?: string
    label: string
    maxLength?: number | null
    minLength?: number | null
    options?: JsonNullValueInput | InputJsonValue
    order: number
    placeholder?: string | null
    required?: boolean
    style?: number
    type?: $Enums.QuestionType
    value?: string | null
    answers?: QuestionAnswerCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutCategoryInput = {
    createdAt?: Date | string
    id?: string
    label: string
    maxLength?: number | null
    minLength?: number | null
    options?: JsonNullValueInput | InputJsonValue
    order: number
    placeholder?: string | null
    required?: boolean
    style?: number
    type?: $Enums.QuestionType
    value?: string | null
    answers?: QuestionAnswerUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutCategoryInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutCategoryInput, QuestionUncheckedCreateWithoutCategoryInput>
  }

  export type QuestionCreateManyCategoryInputEnvelope = {
    data: QuestionCreateManyCategoryInput | QuestionCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type TicketCreateWithoutCategoryInput = {
    closedAt?: Date | string | null
    closedReason?: string | null
    createdAt?: Date | string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserCreateNestedManyWithoutTicketInput
    claimedBy?: UserCreateNestedOneWithoutTicketsClaimedInput
    closedBy?: UserCreateNestedOneWithoutTicketsClosedInput
    createdBy: UserCreateNestedOneWithoutTicketsCreatedInput
    feedback?: FeedbackCreateNestedOneWithoutTicketInput
    guild: GuildCreateNestedOneWithoutTicketsInput
    referencedBy?: TicketCreateNestedManyWithoutReferencesTicketInput
    referencesTicket?: TicketCreateNestedOneWithoutReferencedByInput
    questionAnswers?: QuestionAnswerCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutCategoryInput = {
    claimedById?: string | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelUncheckedCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageUncheckedCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleUncheckedCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserUncheckedCreateNestedManyWithoutTicketInput
    feedback?: FeedbackUncheckedCreateNestedOneWithoutTicketInput
    referencedBy?: TicketUncheckedCreateNestedManyWithoutReferencesTicketInput
    questionAnswers?: QuestionAnswerUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutCategoryInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutCategoryInput, TicketUncheckedCreateWithoutCategoryInput>
  }

  export type TicketCreateManyCategoryInputEnvelope = {
    data: TicketCreateManyCategoryInput | TicketCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type GuildUpsertWithoutCategoriesInput = {
    update: XOR<GuildUpdateWithoutCategoriesInput, GuildUncheckedUpdateWithoutCategoriesInput>
    create: XOR<GuildCreateWithoutCategoriesInput, GuildUncheckedCreateWithoutCategoriesInput>
    where?: GuildWhereInput
  }

  export type GuildUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: GuildWhereInput
    data: XOR<GuildUpdateWithoutCategoriesInput, GuildUncheckedUpdateWithoutCategoriesInput>
  }

  export type GuildUpdateWithoutCategoriesInput = {
    autoClose?: IntFieldUpdateOperationsInput | number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: BoolFieldUpdateOperationsInput | boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: BoolFieldUpdateOperationsInput | boolean
    closeButton?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorColour?: StringFieldUpdateOperationsInput | string
    footer?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    locale?: StringFieldUpdateOperationsInput | string
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColour?: StringFieldUpdateOperationsInput | string
    staleAfter?: NullableIntFieldUpdateOperationsInput | number | null
    successColour?: StringFieldUpdateOperationsInput | string
    workingHours?: JsonNullValueInput | InputJsonValue
    feedback?: FeedbackUpdateManyWithoutGuildNestedInput
    tags?: TagUpdateManyWithoutGuildNestedInput
    tickets?: TicketUpdateManyWithoutGuildNestedInput
  }

  export type GuildUncheckedUpdateWithoutCategoriesInput = {
    autoClose?: IntFieldUpdateOperationsInput | number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: BoolFieldUpdateOperationsInput | boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: BoolFieldUpdateOperationsInput | boolean
    closeButton?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorColour?: StringFieldUpdateOperationsInput | string
    footer?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    locale?: StringFieldUpdateOperationsInput | string
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColour?: StringFieldUpdateOperationsInput | string
    staleAfter?: NullableIntFieldUpdateOperationsInput | number | null
    successColour?: StringFieldUpdateOperationsInput | string
    workingHours?: JsonNullValueInput | InputJsonValue
    feedback?: FeedbackUncheckedUpdateManyWithoutGuildNestedInput
    tags?: TagUncheckedUpdateManyWithoutGuildNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutGuildNestedInput
  }

  export type QuestionUpsertWithWhereUniqueWithoutCategoryInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutCategoryInput, QuestionUncheckedUpdateWithoutCategoryInput>
    create: XOR<QuestionCreateWithoutCategoryInput, QuestionUncheckedCreateWithoutCategoryInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutCategoryInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutCategoryInput, QuestionUncheckedUpdateWithoutCategoryInput>
  }

  export type QuestionUpdateManyWithWhereWithoutCategoryInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutCategoryInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    OR?: QuestionScalarWhereInput[]
    NOT?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    createdAt?: DateTimeFilter<"Question"> | Date | string
    id?: StringFilter<"Question"> | string
    categoryId?: IntFilter<"Question"> | number
    label?: StringFilter<"Question"> | string
    maxLength?: IntNullableFilter<"Question"> | number | null
    minLength?: IntNullableFilter<"Question"> | number | null
    options?: JsonFilter<"Question">
    order?: IntFilter<"Question"> | number
    placeholder?: StringNullableFilter<"Question"> | string | null
    required?: BoolFilter<"Question"> | boolean
    style?: IntFilter<"Question"> | number
    type?: EnumQuestionTypeFilter<"Question"> | $Enums.QuestionType
    value?: StringNullableFilter<"Question"> | string | null
  }

  export type TicketUpsertWithWhereUniqueWithoutCategoryInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutCategoryInput, TicketUncheckedUpdateWithoutCategoryInput>
    create: XOR<TicketCreateWithoutCategoryInput, TicketUncheckedCreateWithoutCategoryInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutCategoryInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutCategoryInput, TicketUncheckedUpdateWithoutCategoryInput>
  }

  export type TicketUpdateManyWithWhereWithoutCategoryInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutCategoryInput>
  }

  export type TicketScalarWhereInput = {
    AND?: TicketScalarWhereInput | TicketScalarWhereInput[]
    OR?: TicketScalarWhereInput[]
    NOT?: TicketScalarWhereInput | TicketScalarWhereInput[]
    categoryId?: IntNullableFilter<"Ticket"> | number | null
    claimedById?: StringNullableFilter<"Ticket"> | string | null
    closedAt?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    closedById?: StringNullableFilter<"Ticket"> | string | null
    closedReason?: StringNullableFilter<"Ticket"> | string | null
    createdAt?: DateTimeFilter<"Ticket"> | Date | string
    createdById?: StringFilter<"Ticket"> | string
    deleted?: BoolFilter<"Ticket"> | boolean
    firstResponseAt?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    guildId?: StringFilter<"Ticket"> | string
    id?: StringFilter<"Ticket"> | string
    lastMessageAt?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    messageCount?: IntNullableFilter<"Ticket"> | number | null
    number?: IntFilter<"Ticket"> | number
    open?: BoolFilter<"Ticket"> | boolean
    openingMessageId?: StringFilter<"Ticket"> | string
    pinnedMessageIds?: JsonFilter<"Ticket">
    priority?: EnumTicketPriorityNullableFilter<"Ticket"> | $Enums.TicketPriority | null
    referencesMessageId?: StringNullableFilter<"Ticket"> | string | null
    referencesTicketId?: StringNullableFilter<"Ticket"> | string | null
    topic?: StringNullableFilter<"Ticket"> | string | null
  }

  export type GuildCreateWithoutFeedbackInput = {
    autoClose?: number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: boolean
    closeButton?: boolean
    createdAt?: Date | string
    errorColour?: string
    footer?: string | null
    id: string
    locale?: string
    logChannel?: string | null
    primaryColour?: string
    staleAfter?: number | null
    successColour?: string
    workingHours?: JsonNullValueInput | InputJsonValue
    categories?: CategoryCreateNestedManyWithoutGuildInput
    tags?: TagCreateNestedManyWithoutGuildInput
    tickets?: TicketCreateNestedManyWithoutGuildInput
  }

  export type GuildUncheckedCreateWithoutFeedbackInput = {
    autoClose?: number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: boolean
    closeButton?: boolean
    createdAt?: Date | string
    errorColour?: string
    footer?: string | null
    id: string
    locale?: string
    logChannel?: string | null
    primaryColour?: string
    staleAfter?: number | null
    successColour?: string
    workingHours?: JsonNullValueInput | InputJsonValue
    categories?: CategoryUncheckedCreateNestedManyWithoutGuildInput
    tags?: TagUncheckedCreateNestedManyWithoutGuildInput
    tickets?: TicketUncheckedCreateNestedManyWithoutGuildInput
  }

  export type GuildCreateOrConnectWithoutFeedbackInput = {
    where: GuildWhereUniqueInput
    create: XOR<GuildCreateWithoutFeedbackInput, GuildUncheckedCreateWithoutFeedbackInput>
  }

  export type TicketCreateWithoutFeedbackInput = {
    closedAt?: Date | string | null
    closedReason?: string | null
    createdAt?: Date | string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserCreateNestedManyWithoutTicketInput
    category?: CategoryCreateNestedOneWithoutTicketsInput
    claimedBy?: UserCreateNestedOneWithoutTicketsClaimedInput
    closedBy?: UserCreateNestedOneWithoutTicketsClosedInput
    createdBy: UserCreateNestedOneWithoutTicketsCreatedInput
    guild: GuildCreateNestedOneWithoutTicketsInput
    referencedBy?: TicketCreateNestedManyWithoutReferencesTicketInput
    referencesTicket?: TicketCreateNestedOneWithoutReferencedByInput
    questionAnswers?: QuestionAnswerCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutFeedbackInput = {
    categoryId?: number | null
    claimedById?: string | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelUncheckedCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageUncheckedCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleUncheckedCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserUncheckedCreateNestedManyWithoutTicketInput
    referencedBy?: TicketUncheckedCreateNestedManyWithoutReferencesTicketInput
    questionAnswers?: QuestionAnswerUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutFeedbackInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutFeedbackInput, TicketUncheckedCreateWithoutFeedbackInput>
  }

  export type UserCreateWithoutFeedbackInput = {
    createdAt?: Date | string
    id: string
    messageCount?: number
    ticketsCreated?: TicketCreateNestedManyWithoutCreatedByInput
    ticketsClosed?: TicketCreateNestedManyWithoutClosedByInput
    ticketsClaimed?: TicketCreateNestedManyWithoutClaimedByInput
    questionAnswers?: QuestionAnswerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFeedbackInput = {
    createdAt?: Date | string
    id: string
    messageCount?: number
    ticketsCreated?: TicketUncheckedCreateNestedManyWithoutCreatedByInput
    ticketsClosed?: TicketUncheckedCreateNestedManyWithoutClosedByInput
    ticketsClaimed?: TicketUncheckedCreateNestedManyWithoutClaimedByInput
    questionAnswers?: QuestionAnswerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFeedbackInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
  }

  export type GuildUpsertWithoutFeedbackInput = {
    update: XOR<GuildUpdateWithoutFeedbackInput, GuildUncheckedUpdateWithoutFeedbackInput>
    create: XOR<GuildCreateWithoutFeedbackInput, GuildUncheckedCreateWithoutFeedbackInput>
    where?: GuildWhereInput
  }

  export type GuildUpdateToOneWithWhereWithoutFeedbackInput = {
    where?: GuildWhereInput
    data: XOR<GuildUpdateWithoutFeedbackInput, GuildUncheckedUpdateWithoutFeedbackInput>
  }

  export type GuildUpdateWithoutFeedbackInput = {
    autoClose?: IntFieldUpdateOperationsInput | number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: BoolFieldUpdateOperationsInput | boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: BoolFieldUpdateOperationsInput | boolean
    closeButton?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorColour?: StringFieldUpdateOperationsInput | string
    footer?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    locale?: StringFieldUpdateOperationsInput | string
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColour?: StringFieldUpdateOperationsInput | string
    staleAfter?: NullableIntFieldUpdateOperationsInput | number | null
    successColour?: StringFieldUpdateOperationsInput | string
    workingHours?: JsonNullValueInput | InputJsonValue
    categories?: CategoryUpdateManyWithoutGuildNestedInput
    tags?: TagUpdateManyWithoutGuildNestedInput
    tickets?: TicketUpdateManyWithoutGuildNestedInput
  }

  export type GuildUncheckedUpdateWithoutFeedbackInput = {
    autoClose?: IntFieldUpdateOperationsInput | number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: BoolFieldUpdateOperationsInput | boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: BoolFieldUpdateOperationsInput | boolean
    closeButton?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorColour?: StringFieldUpdateOperationsInput | string
    footer?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    locale?: StringFieldUpdateOperationsInput | string
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColour?: StringFieldUpdateOperationsInput | string
    staleAfter?: NullableIntFieldUpdateOperationsInput | number | null
    successColour?: StringFieldUpdateOperationsInput | string
    workingHours?: JsonNullValueInput | InputJsonValue
    categories?: CategoryUncheckedUpdateManyWithoutGuildNestedInput
    tags?: TagUncheckedUpdateManyWithoutGuildNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutGuildNestedInput
  }

  export type TicketUpsertWithoutFeedbackInput = {
    update: XOR<TicketUpdateWithoutFeedbackInput, TicketUncheckedUpdateWithoutFeedbackInput>
    create: XOR<TicketCreateWithoutFeedbackInput, TicketUncheckedCreateWithoutFeedbackInput>
    where?: TicketWhereInput
  }

  export type TicketUpdateToOneWithWhereWithoutFeedbackInput = {
    where?: TicketWhereInput
    data: XOR<TicketUpdateWithoutFeedbackInput, TicketUncheckedUpdateWithoutFeedbackInput>
  }

  export type TicketUpdateWithoutFeedbackInput = {
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUpdateManyWithoutTicketNestedInput
    category?: CategoryUpdateOneWithoutTicketsNestedInput
    claimedBy?: UserUpdateOneWithoutTicketsClaimedNestedInput
    closedBy?: UserUpdateOneWithoutTicketsClosedNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTicketsCreatedNestedInput
    guild?: GuildUpdateOneRequiredWithoutTicketsNestedInput
    referencedBy?: TicketUpdateManyWithoutReferencesTicketNestedInput
    referencesTicket?: TicketUpdateOneWithoutReferencedByNestedInput
    questionAnswers?: QuestionAnswerUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutFeedbackInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUncheckedUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUncheckedUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUncheckedUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUncheckedUpdateManyWithoutTicketNestedInput
    referencedBy?: TicketUncheckedUpdateManyWithoutReferencesTicketNestedInput
    questionAnswers?: QuestionAnswerUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type UserUpsertWithoutFeedbackInput = {
    update: XOR<UserUpdateWithoutFeedbackInput, UserUncheckedUpdateWithoutFeedbackInput>
    create: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedbackInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedbackInput, UserUncheckedUpdateWithoutFeedbackInput>
  }

  export type UserUpdateWithoutFeedbackInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    messageCount?: IntFieldUpdateOperationsInput | number
    ticketsCreated?: TicketUpdateManyWithoutCreatedByNestedInput
    ticketsClosed?: TicketUpdateManyWithoutClosedByNestedInput
    ticketsClaimed?: TicketUpdateManyWithoutClaimedByNestedInput
    questionAnswers?: QuestionAnswerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedbackInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    messageCount?: IntFieldUpdateOperationsInput | number
    ticketsCreated?: TicketUncheckedUpdateManyWithoutCreatedByNestedInput
    ticketsClosed?: TicketUncheckedUpdateManyWithoutClosedByNestedInput
    ticketsClaimed?: TicketUncheckedUpdateManyWithoutClaimedByNestedInput
    questionAnswers?: QuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CategoryCreateWithoutGuildInput = {
    channelName: string
    claiming?: boolean
    createdAt?: Date | string
    cooldown?: number | null
    customTopic?: string | null
    description: string
    discordCategory: string
    emoji: string
    enableFeedback?: boolean
    image?: string | null
    memberLimit?: number
    name: string
    openingMessage: string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: boolean
    staffRoles: JsonNullValueInput | InputJsonValue
    totalLimit?: number
    questions?: QuestionCreateNestedManyWithoutCategoryInput
    tickets?: TicketCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutGuildInput = {
    channelName: string
    claiming?: boolean
    createdAt?: Date | string
    cooldown?: number | null
    customTopic?: string | null
    description: string
    discordCategory: string
    emoji: string
    enableFeedback?: boolean
    id?: number
    image?: string | null
    memberLimit?: number
    name: string
    openingMessage: string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: boolean
    staffRoles: JsonNullValueInput | InputJsonValue
    totalLimit?: number
    questions?: QuestionUncheckedCreateNestedManyWithoutCategoryInput
    tickets?: TicketUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutGuildInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutGuildInput, CategoryUncheckedCreateWithoutGuildInput>
  }

  export type CategoryCreateManyGuildInputEnvelope = {
    data: CategoryCreateManyGuildInput | CategoryCreateManyGuildInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutGuildInput = {
    comment?: string | null
    createdAt?: Date | string
    rating: number
    ticket: TicketCreateNestedOneWithoutFeedbackInput
    user?: UserCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateWithoutGuildInput = {
    comment?: string | null
    createdAt?: Date | string
    rating: number
    ticketId: string
    userId?: string | null
  }

  export type FeedbackCreateOrConnectWithoutGuildInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutGuildInput, FeedbackUncheckedCreateWithoutGuildInput>
  }

  export type FeedbackCreateManyGuildInputEnvelope = {
    data: FeedbackCreateManyGuildInput | FeedbackCreateManyGuildInput[]
    skipDuplicates?: boolean
  }

  export type TagCreateWithoutGuildInput = {
    content: string
    createdAt?: Date | string
    name: string
    regex?: string | null
  }

  export type TagUncheckedCreateWithoutGuildInput = {
    content: string
    createdAt?: Date | string
    id?: number
    name: string
    regex?: string | null
  }

  export type TagCreateOrConnectWithoutGuildInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutGuildInput, TagUncheckedCreateWithoutGuildInput>
  }

  export type TagCreateManyGuildInputEnvelope = {
    data: TagCreateManyGuildInput | TagCreateManyGuildInput[]
    skipDuplicates?: boolean
  }

  export type TicketCreateWithoutGuildInput = {
    closedAt?: Date | string | null
    closedReason?: string | null
    createdAt?: Date | string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserCreateNestedManyWithoutTicketInput
    category?: CategoryCreateNestedOneWithoutTicketsInput
    claimedBy?: UserCreateNestedOneWithoutTicketsClaimedInput
    closedBy?: UserCreateNestedOneWithoutTicketsClosedInput
    createdBy: UserCreateNestedOneWithoutTicketsCreatedInput
    feedback?: FeedbackCreateNestedOneWithoutTicketInput
    referencedBy?: TicketCreateNestedManyWithoutReferencesTicketInput
    referencesTicket?: TicketCreateNestedOneWithoutReferencedByInput
    questionAnswers?: QuestionAnswerCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutGuildInput = {
    categoryId?: number | null
    claimedById?: string | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelUncheckedCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageUncheckedCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleUncheckedCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserUncheckedCreateNestedManyWithoutTicketInput
    feedback?: FeedbackUncheckedCreateNestedOneWithoutTicketInput
    referencedBy?: TicketUncheckedCreateNestedManyWithoutReferencesTicketInput
    questionAnswers?: QuestionAnswerUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutGuildInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutGuildInput, TicketUncheckedCreateWithoutGuildInput>
  }

  export type TicketCreateManyGuildInputEnvelope = {
    data: TicketCreateManyGuildInput | TicketCreateManyGuildInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithWhereUniqueWithoutGuildInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutGuildInput, CategoryUncheckedUpdateWithoutGuildInput>
    create: XOR<CategoryCreateWithoutGuildInput, CategoryUncheckedCreateWithoutGuildInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutGuildInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutGuildInput, CategoryUncheckedUpdateWithoutGuildInput>
  }

  export type CategoryUpdateManyWithWhereWithoutGuildInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutGuildInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    channelName?: StringFilter<"Category"> | string
    claiming?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    cooldown?: IntNullableFilter<"Category"> | number | null
    customTopic?: StringNullableFilter<"Category"> | string | null
    description?: StringFilter<"Category"> | string
    discordCategory?: StringFilter<"Category"> | string
    emoji?: StringFilter<"Category"> | string
    enableFeedback?: BoolFilter<"Category"> | boolean
    guildId?: StringFilter<"Category"> | string
    id?: IntFilter<"Category"> | number
    image?: StringNullableFilter<"Category"> | string | null
    memberLimit?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    openingMessage?: StringFilter<"Category"> | string
    pingRoles?: JsonFilter<"Category">
    ratelimit?: IntNullableFilter<"Category"> | number | null
    requiredRoles?: JsonFilter<"Category">
    requireTopic?: BoolFilter<"Category"> | boolean
    staffRoles?: JsonFilter<"Category">
    totalLimit?: IntFilter<"Category"> | number
  }

  export type FeedbackUpsertWithWhereUniqueWithoutGuildInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutGuildInput, FeedbackUncheckedUpdateWithoutGuildInput>
    create: XOR<FeedbackCreateWithoutGuildInput, FeedbackUncheckedCreateWithoutGuildInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutGuildInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutGuildInput, FeedbackUncheckedUpdateWithoutGuildInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutGuildInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutGuildInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    comment?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    guildId?: StringFilter<"Feedback"> | string
    rating?: IntFilter<"Feedback"> | number
    ticketId?: StringFilter<"Feedback"> | string
    userId?: StringNullableFilter<"Feedback"> | string | null
  }

  export type TagUpsertWithWhereUniqueWithoutGuildInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutGuildInput, TagUncheckedUpdateWithoutGuildInput>
    create: XOR<TagCreateWithoutGuildInput, TagUncheckedCreateWithoutGuildInput>
  }

  export type TagUpdateWithWhereUniqueWithoutGuildInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutGuildInput, TagUncheckedUpdateWithoutGuildInput>
  }

  export type TagUpdateManyWithWhereWithoutGuildInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutGuildInput>
  }

  export type TagScalarWhereInput = {
    AND?: TagScalarWhereInput | TagScalarWhereInput[]
    OR?: TagScalarWhereInput[]
    NOT?: TagScalarWhereInput | TagScalarWhereInput[]
    content?: StringFilter<"Tag"> | string
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    guildId?: StringFilter<"Tag"> | string
    id?: IntFilter<"Tag"> | number
    name?: StringFilter<"Tag"> | string
    regex?: StringNullableFilter<"Tag"> | string | null
  }

  export type TicketUpsertWithWhereUniqueWithoutGuildInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutGuildInput, TicketUncheckedUpdateWithoutGuildInput>
    create: XOR<TicketCreateWithoutGuildInput, TicketUncheckedCreateWithoutGuildInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutGuildInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutGuildInput, TicketUncheckedUpdateWithoutGuildInput>
  }

  export type TicketUpdateManyWithWhereWithoutGuildInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutGuildInput>
  }

  export type QuestionAnswerCreateWithoutQuestionInput = {
    createdAt?: Date | string
    value?: string | null
    ticket: TicketCreateNestedOneWithoutQuestionAnswersInput
    user: UserCreateNestedOneWithoutQuestionAnswersInput
  }

  export type QuestionAnswerUncheckedCreateWithoutQuestionInput = {
    createdAt?: Date | string
    id?: number
    ticketId: string
    userId: string
    value?: string | null
  }

  export type QuestionAnswerCreateOrConnectWithoutQuestionInput = {
    where: QuestionAnswerWhereUniqueInput
    create: XOR<QuestionAnswerCreateWithoutQuestionInput, QuestionAnswerUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionAnswerCreateManyQuestionInputEnvelope = {
    data: QuestionAnswerCreateManyQuestionInput | QuestionAnswerCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutQuestionsInput = {
    channelName: string
    claiming?: boolean
    createdAt?: Date | string
    cooldown?: number | null
    customTopic?: string | null
    description: string
    discordCategory: string
    emoji: string
    enableFeedback?: boolean
    image?: string | null
    memberLimit?: number
    name: string
    openingMessage: string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: boolean
    staffRoles: JsonNullValueInput | InputJsonValue
    totalLimit?: number
    guild: GuildCreateNestedOneWithoutCategoriesInput
    tickets?: TicketCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutQuestionsInput = {
    channelName: string
    claiming?: boolean
    createdAt?: Date | string
    cooldown?: number | null
    customTopic?: string | null
    description: string
    discordCategory: string
    emoji: string
    enableFeedback?: boolean
    guildId: string
    id?: number
    image?: string | null
    memberLimit?: number
    name: string
    openingMessage: string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: boolean
    staffRoles: JsonNullValueInput | InputJsonValue
    totalLimit?: number
    tickets?: TicketUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutQuestionsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutQuestionsInput, CategoryUncheckedCreateWithoutQuestionsInput>
  }

  export type QuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput = {
    where: QuestionAnswerWhereUniqueInput
    update: XOR<QuestionAnswerUpdateWithoutQuestionInput, QuestionAnswerUncheckedUpdateWithoutQuestionInput>
    create: XOR<QuestionAnswerCreateWithoutQuestionInput, QuestionAnswerUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput = {
    where: QuestionAnswerWhereUniqueInput
    data: XOR<QuestionAnswerUpdateWithoutQuestionInput, QuestionAnswerUncheckedUpdateWithoutQuestionInput>
  }

  export type QuestionAnswerUpdateManyWithWhereWithoutQuestionInput = {
    where: QuestionAnswerScalarWhereInput
    data: XOR<QuestionAnswerUpdateManyMutationInput, QuestionAnswerUncheckedUpdateManyWithoutQuestionInput>
  }

  export type QuestionAnswerScalarWhereInput = {
    AND?: QuestionAnswerScalarWhereInput | QuestionAnswerScalarWhereInput[]
    OR?: QuestionAnswerScalarWhereInput[]
    NOT?: QuestionAnswerScalarWhereInput | QuestionAnswerScalarWhereInput[]
    createdAt?: DateTimeFilter<"QuestionAnswer"> | Date | string
    id?: IntFilter<"QuestionAnswer"> | number
    ticketId?: StringFilter<"QuestionAnswer"> | string
    questionId?: StringFilter<"QuestionAnswer"> | string
    userId?: StringFilter<"QuestionAnswer"> | string
    value?: StringNullableFilter<"QuestionAnswer"> | string | null
  }

  export type CategoryUpsertWithoutQuestionsInput = {
    update: XOR<CategoryUpdateWithoutQuestionsInput, CategoryUncheckedUpdateWithoutQuestionsInput>
    create: XOR<CategoryCreateWithoutQuestionsInput, CategoryUncheckedCreateWithoutQuestionsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutQuestionsInput, CategoryUncheckedUpdateWithoutQuestionsInput>
  }

  export type CategoryUpdateWithoutQuestionsInput = {
    channelName?: StringFieldUpdateOperationsInput | string
    claiming?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cooldown?: NullableIntFieldUpdateOperationsInput | number | null
    customTopic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    discordCategory?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    enableFeedback?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    memberLimit?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    openingMessage?: StringFieldUpdateOperationsInput | string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: NullableIntFieldUpdateOperationsInput | number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: BoolFieldUpdateOperationsInput | boolean
    staffRoles?: JsonNullValueInput | InputJsonValue
    totalLimit?: IntFieldUpdateOperationsInput | number
    guild?: GuildUpdateOneRequiredWithoutCategoriesNestedInput
    tickets?: TicketUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutQuestionsInput = {
    channelName?: StringFieldUpdateOperationsInput | string
    claiming?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cooldown?: NullableIntFieldUpdateOperationsInput | number | null
    customTopic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    discordCategory?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    enableFeedback?: BoolFieldUpdateOperationsInput | boolean
    guildId?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    memberLimit?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    openingMessage?: StringFieldUpdateOperationsInput | string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: NullableIntFieldUpdateOperationsInput | number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: BoolFieldUpdateOperationsInput | boolean
    staffRoles?: JsonNullValueInput | InputJsonValue
    totalLimit?: IntFieldUpdateOperationsInput | number
    tickets?: TicketUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type TicketCreateWithoutQuestionAnswersInput = {
    closedAt?: Date | string | null
    closedReason?: string | null
    createdAt?: Date | string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserCreateNestedManyWithoutTicketInput
    category?: CategoryCreateNestedOneWithoutTicketsInput
    claimedBy?: UserCreateNestedOneWithoutTicketsClaimedInput
    closedBy?: UserCreateNestedOneWithoutTicketsClosedInput
    createdBy: UserCreateNestedOneWithoutTicketsCreatedInput
    feedback?: FeedbackCreateNestedOneWithoutTicketInput
    guild: GuildCreateNestedOneWithoutTicketsInput
    referencedBy?: TicketCreateNestedManyWithoutReferencesTicketInput
    referencesTicket?: TicketCreateNestedOneWithoutReferencedByInput
  }

  export type TicketUncheckedCreateWithoutQuestionAnswersInput = {
    categoryId?: number | null
    claimedById?: string | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelUncheckedCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageUncheckedCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleUncheckedCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserUncheckedCreateNestedManyWithoutTicketInput
    feedback?: FeedbackUncheckedCreateNestedOneWithoutTicketInput
    referencedBy?: TicketUncheckedCreateNestedManyWithoutReferencesTicketInput
  }

  export type TicketCreateOrConnectWithoutQuestionAnswersInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutQuestionAnswersInput, TicketUncheckedCreateWithoutQuestionAnswersInput>
  }

  export type QuestionCreateWithoutAnswersInput = {
    createdAt?: Date | string
    id?: string
    label: string
    maxLength?: number | null
    minLength?: number | null
    options?: JsonNullValueInput | InputJsonValue
    order: number
    placeholder?: string | null
    required?: boolean
    style?: number
    type?: $Enums.QuestionType
    value?: string | null
    category: CategoryCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionUncheckedCreateWithoutAnswersInput = {
    createdAt?: Date | string
    id?: string
    categoryId: number
    label: string
    maxLength?: number | null
    minLength?: number | null
    options?: JsonNullValueInput | InputJsonValue
    order: number
    placeholder?: string | null
    required?: boolean
    style?: number
    type?: $Enums.QuestionType
    value?: string | null
  }

  export type QuestionCreateOrConnectWithoutAnswersInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutAnswersInput, QuestionUncheckedCreateWithoutAnswersInput>
  }

  export type UserCreateWithoutQuestionAnswersInput = {
    createdAt?: Date | string
    id: string
    messageCount?: number
    feedback?: FeedbackCreateNestedManyWithoutUserInput
    ticketsCreated?: TicketCreateNestedManyWithoutCreatedByInput
    ticketsClosed?: TicketCreateNestedManyWithoutClosedByInput
    ticketsClaimed?: TicketCreateNestedManyWithoutClaimedByInput
  }

  export type UserUncheckedCreateWithoutQuestionAnswersInput = {
    createdAt?: Date | string
    id: string
    messageCount?: number
    feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    ticketsCreated?: TicketUncheckedCreateNestedManyWithoutCreatedByInput
    ticketsClosed?: TicketUncheckedCreateNestedManyWithoutClosedByInput
    ticketsClaimed?: TicketUncheckedCreateNestedManyWithoutClaimedByInput
  }

  export type UserCreateOrConnectWithoutQuestionAnswersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQuestionAnswersInput, UserUncheckedCreateWithoutQuestionAnswersInput>
  }

  export type TicketUpsertWithoutQuestionAnswersInput = {
    update: XOR<TicketUpdateWithoutQuestionAnswersInput, TicketUncheckedUpdateWithoutQuestionAnswersInput>
    create: XOR<TicketCreateWithoutQuestionAnswersInput, TicketUncheckedCreateWithoutQuestionAnswersInput>
    where?: TicketWhereInput
  }

  export type TicketUpdateToOneWithWhereWithoutQuestionAnswersInput = {
    where?: TicketWhereInput
    data: XOR<TicketUpdateWithoutQuestionAnswersInput, TicketUncheckedUpdateWithoutQuestionAnswersInput>
  }

  export type TicketUpdateWithoutQuestionAnswersInput = {
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUpdateManyWithoutTicketNestedInput
    category?: CategoryUpdateOneWithoutTicketsNestedInput
    claimedBy?: UserUpdateOneWithoutTicketsClaimedNestedInput
    closedBy?: UserUpdateOneWithoutTicketsClosedNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTicketsCreatedNestedInput
    feedback?: FeedbackUpdateOneWithoutTicketNestedInput
    guild?: GuildUpdateOneRequiredWithoutTicketsNestedInput
    referencedBy?: TicketUpdateManyWithoutReferencesTicketNestedInput
    referencesTicket?: TicketUpdateOneWithoutReferencedByNestedInput
  }

  export type TicketUncheckedUpdateWithoutQuestionAnswersInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUncheckedUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUncheckedUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUncheckedUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUncheckedUpdateManyWithoutTicketNestedInput
    feedback?: FeedbackUncheckedUpdateOneWithoutTicketNestedInput
    referencedBy?: TicketUncheckedUpdateManyWithoutReferencesTicketNestedInput
  }

  export type QuestionUpsertWithoutAnswersInput = {
    update: XOR<QuestionUpdateWithoutAnswersInput, QuestionUncheckedUpdateWithoutAnswersInput>
    create: XOR<QuestionCreateWithoutAnswersInput, QuestionUncheckedCreateWithoutAnswersInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutAnswersInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutAnswersInput, QuestionUncheckedUpdateWithoutAnswersInput>
  }

  export type QuestionUpdateWithoutAnswersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    maxLength?: NullableIntFieldUpdateOperationsInput | number | null
    minLength?: NullableIntFieldUpdateOperationsInput | number | null
    options?: JsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    placeholder?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    style?: IntFieldUpdateOperationsInput | number
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    value?: NullableStringFieldUpdateOperationsInput | string | null
    category?: CategoryUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateWithoutAnswersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    maxLength?: NullableIntFieldUpdateOperationsInput | number | null
    minLength?: NullableIntFieldUpdateOperationsInput | number | null
    options?: JsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    placeholder?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    style?: IntFieldUpdateOperationsInput | number
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutQuestionAnswersInput = {
    update: XOR<UserUpdateWithoutQuestionAnswersInput, UserUncheckedUpdateWithoutQuestionAnswersInput>
    create: XOR<UserCreateWithoutQuestionAnswersInput, UserUncheckedCreateWithoutQuestionAnswersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQuestionAnswersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQuestionAnswersInput, UserUncheckedUpdateWithoutQuestionAnswersInput>
  }

  export type UserUpdateWithoutQuestionAnswersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    messageCount?: IntFieldUpdateOperationsInput | number
    feedback?: FeedbackUpdateManyWithoutUserNestedInput
    ticketsCreated?: TicketUpdateManyWithoutCreatedByNestedInput
    ticketsClosed?: TicketUpdateManyWithoutClosedByNestedInput
    ticketsClaimed?: TicketUpdateManyWithoutClaimedByNestedInput
  }

  export type UserUncheckedUpdateWithoutQuestionAnswersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    messageCount?: IntFieldUpdateOperationsInput | number
    feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    ticketsCreated?: TicketUncheckedUpdateManyWithoutCreatedByNestedInput
    ticketsClosed?: TicketUncheckedUpdateManyWithoutClosedByNestedInput
    ticketsClaimed?: TicketUncheckedUpdateManyWithoutClaimedByNestedInput
  }

  export type GuildCreateWithoutTagsInput = {
    autoClose?: number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: boolean
    closeButton?: boolean
    createdAt?: Date | string
    errorColour?: string
    footer?: string | null
    id: string
    locale?: string
    logChannel?: string | null
    primaryColour?: string
    staleAfter?: number | null
    successColour?: string
    workingHours?: JsonNullValueInput | InputJsonValue
    categories?: CategoryCreateNestedManyWithoutGuildInput
    feedback?: FeedbackCreateNestedManyWithoutGuildInput
    tickets?: TicketCreateNestedManyWithoutGuildInput
  }

  export type GuildUncheckedCreateWithoutTagsInput = {
    autoClose?: number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: boolean
    closeButton?: boolean
    createdAt?: Date | string
    errorColour?: string
    footer?: string | null
    id: string
    locale?: string
    logChannel?: string | null
    primaryColour?: string
    staleAfter?: number | null
    successColour?: string
    workingHours?: JsonNullValueInput | InputJsonValue
    categories?: CategoryUncheckedCreateNestedManyWithoutGuildInput
    feedback?: FeedbackUncheckedCreateNestedManyWithoutGuildInput
    tickets?: TicketUncheckedCreateNestedManyWithoutGuildInput
  }

  export type GuildCreateOrConnectWithoutTagsInput = {
    where: GuildWhereUniqueInput
    create: XOR<GuildCreateWithoutTagsInput, GuildUncheckedCreateWithoutTagsInput>
  }

  export type GuildUpsertWithoutTagsInput = {
    update: XOR<GuildUpdateWithoutTagsInput, GuildUncheckedUpdateWithoutTagsInput>
    create: XOR<GuildCreateWithoutTagsInput, GuildUncheckedCreateWithoutTagsInput>
    where?: GuildWhereInput
  }

  export type GuildUpdateToOneWithWhereWithoutTagsInput = {
    where?: GuildWhereInput
    data: XOR<GuildUpdateWithoutTagsInput, GuildUncheckedUpdateWithoutTagsInput>
  }

  export type GuildUpdateWithoutTagsInput = {
    autoClose?: IntFieldUpdateOperationsInput | number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: BoolFieldUpdateOperationsInput | boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: BoolFieldUpdateOperationsInput | boolean
    closeButton?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorColour?: StringFieldUpdateOperationsInput | string
    footer?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    locale?: StringFieldUpdateOperationsInput | string
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColour?: StringFieldUpdateOperationsInput | string
    staleAfter?: NullableIntFieldUpdateOperationsInput | number | null
    successColour?: StringFieldUpdateOperationsInput | string
    workingHours?: JsonNullValueInput | InputJsonValue
    categories?: CategoryUpdateManyWithoutGuildNestedInput
    feedback?: FeedbackUpdateManyWithoutGuildNestedInput
    tickets?: TicketUpdateManyWithoutGuildNestedInput
  }

  export type GuildUncheckedUpdateWithoutTagsInput = {
    autoClose?: IntFieldUpdateOperationsInput | number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: BoolFieldUpdateOperationsInput | boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: BoolFieldUpdateOperationsInput | boolean
    closeButton?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorColour?: StringFieldUpdateOperationsInput | string
    footer?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    locale?: StringFieldUpdateOperationsInput | string
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColour?: StringFieldUpdateOperationsInput | string
    staleAfter?: NullableIntFieldUpdateOperationsInput | number | null
    successColour?: StringFieldUpdateOperationsInput | string
    workingHours?: JsonNullValueInput | InputJsonValue
    categories?: CategoryUncheckedUpdateManyWithoutGuildNestedInput
    feedback?: FeedbackUncheckedUpdateManyWithoutGuildNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutGuildNestedInput
  }

  export type ArchivedChannelCreateWithoutTicketInput = {
    channelId: string
    createdAt?: Date | string
    name: string
  }

  export type ArchivedChannelUncheckedCreateWithoutTicketInput = {
    channelId: string
    createdAt?: Date | string
    name: string
  }

  export type ArchivedChannelCreateOrConnectWithoutTicketInput = {
    where: ArchivedChannelWhereUniqueInput
    create: XOR<ArchivedChannelCreateWithoutTicketInput, ArchivedChannelUncheckedCreateWithoutTicketInput>
  }

  export type ArchivedChannelCreateManyTicketInputEnvelope = {
    data: ArchivedChannelCreateManyTicketInput | ArchivedChannelCreateManyTicketInput[]
    skipDuplicates?: boolean
  }

  export type ArchivedMessageCreateWithoutTicketInput = {
    content: string
    createdAt?: Date | string
    deleted?: boolean
    edited?: boolean
    external?: boolean
    id: string
    author: ArchivedUserCreateNestedOneWithoutArchivedMessagesInput
  }

  export type ArchivedMessageUncheckedCreateWithoutTicketInput = {
    authorId: string
    content: string
    createdAt?: Date | string
    deleted?: boolean
    edited?: boolean
    external?: boolean
    id: string
  }

  export type ArchivedMessageCreateOrConnectWithoutTicketInput = {
    where: ArchivedMessageWhereUniqueInput
    create: XOR<ArchivedMessageCreateWithoutTicketInput, ArchivedMessageUncheckedCreateWithoutTicketInput>
  }

  export type ArchivedMessageCreateManyTicketInputEnvelope = {
    data: ArchivedMessageCreateManyTicketInput | ArchivedMessageCreateManyTicketInput[]
    skipDuplicates?: boolean
  }

  export type ArchivedRoleCreateWithoutTicketInput = {
    colour?: string
    createdAt?: Date | string
    name: string
    roleId: string
    archivedUsers?: ArchivedUserCreateNestedManyWithoutRoleInput
  }

  export type ArchivedRoleUncheckedCreateWithoutTicketInput = {
    colour?: string
    createdAt?: Date | string
    name: string
    roleId: string
    archivedUsers?: ArchivedUserUncheckedCreateNestedManyWithoutRoleInput
  }

  export type ArchivedRoleCreateOrConnectWithoutTicketInput = {
    where: ArchivedRoleWhereUniqueInput
    create: XOR<ArchivedRoleCreateWithoutTicketInput, ArchivedRoleUncheckedCreateWithoutTicketInput>
  }

  export type ArchivedRoleCreateManyTicketInputEnvelope = {
    data: ArchivedRoleCreateManyTicketInput | ArchivedRoleCreateManyTicketInput[]
    skipDuplicates?: boolean
  }

  export type ArchivedUserCreateWithoutTicketInput = {
    avatar?: string | null
    bot?: boolean
    createdAt?: Date | string
    discriminator?: string | null
    displayName?: string | null
    userId: string
    username?: string | null
    archivedMessages?: ArchivedMessageCreateNestedManyWithoutAuthorInput
    role?: ArchivedRoleCreateNestedOneWithoutArchivedUsersInput
  }

  export type ArchivedUserUncheckedCreateWithoutTicketInput = {
    avatar?: string | null
    bot?: boolean
    createdAt?: Date | string
    discriminator?: string | null
    displayName?: string | null
    roleId?: string | null
    userId: string
    username?: string | null
    archivedMessages?: ArchivedMessageUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type ArchivedUserCreateOrConnectWithoutTicketInput = {
    where: ArchivedUserWhereUniqueInput
    create: XOR<ArchivedUserCreateWithoutTicketInput, ArchivedUserUncheckedCreateWithoutTicketInput>
  }

  export type ArchivedUserCreateManyTicketInputEnvelope = {
    data: ArchivedUserCreateManyTicketInput | ArchivedUserCreateManyTicketInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutTicketsInput = {
    channelName: string
    claiming?: boolean
    createdAt?: Date | string
    cooldown?: number | null
    customTopic?: string | null
    description: string
    discordCategory: string
    emoji: string
    enableFeedback?: boolean
    image?: string | null
    memberLimit?: number
    name: string
    openingMessage: string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: boolean
    staffRoles: JsonNullValueInput | InputJsonValue
    totalLimit?: number
    guild: GuildCreateNestedOneWithoutCategoriesInput
    questions?: QuestionCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutTicketsInput = {
    channelName: string
    claiming?: boolean
    createdAt?: Date | string
    cooldown?: number | null
    customTopic?: string | null
    description: string
    discordCategory: string
    emoji: string
    enableFeedback?: boolean
    guildId: string
    id?: number
    image?: string | null
    memberLimit?: number
    name: string
    openingMessage: string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: boolean
    staffRoles: JsonNullValueInput | InputJsonValue
    totalLimit?: number
    questions?: QuestionUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutTicketsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutTicketsInput, CategoryUncheckedCreateWithoutTicketsInput>
  }

  export type UserCreateWithoutTicketsClaimedInput = {
    createdAt?: Date | string
    id: string
    messageCount?: number
    feedback?: FeedbackCreateNestedManyWithoutUserInput
    ticketsCreated?: TicketCreateNestedManyWithoutCreatedByInput
    ticketsClosed?: TicketCreateNestedManyWithoutClosedByInput
    questionAnswers?: QuestionAnswerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTicketsClaimedInput = {
    createdAt?: Date | string
    id: string
    messageCount?: number
    feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    ticketsCreated?: TicketUncheckedCreateNestedManyWithoutCreatedByInput
    ticketsClosed?: TicketUncheckedCreateNestedManyWithoutClosedByInput
    questionAnswers?: QuestionAnswerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTicketsClaimedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTicketsClaimedInput, UserUncheckedCreateWithoutTicketsClaimedInput>
  }

  export type UserCreateWithoutTicketsClosedInput = {
    createdAt?: Date | string
    id: string
    messageCount?: number
    feedback?: FeedbackCreateNestedManyWithoutUserInput
    ticketsCreated?: TicketCreateNestedManyWithoutCreatedByInput
    ticketsClaimed?: TicketCreateNestedManyWithoutClaimedByInput
    questionAnswers?: QuestionAnswerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTicketsClosedInput = {
    createdAt?: Date | string
    id: string
    messageCount?: number
    feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    ticketsCreated?: TicketUncheckedCreateNestedManyWithoutCreatedByInput
    ticketsClaimed?: TicketUncheckedCreateNestedManyWithoutClaimedByInput
    questionAnswers?: QuestionAnswerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTicketsClosedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTicketsClosedInput, UserUncheckedCreateWithoutTicketsClosedInput>
  }

  export type UserCreateWithoutTicketsCreatedInput = {
    createdAt?: Date | string
    id: string
    messageCount?: number
    feedback?: FeedbackCreateNestedManyWithoutUserInput
    ticketsClosed?: TicketCreateNestedManyWithoutClosedByInput
    ticketsClaimed?: TicketCreateNestedManyWithoutClaimedByInput
    questionAnswers?: QuestionAnswerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTicketsCreatedInput = {
    createdAt?: Date | string
    id: string
    messageCount?: number
    feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    ticketsClosed?: TicketUncheckedCreateNestedManyWithoutClosedByInput
    ticketsClaimed?: TicketUncheckedCreateNestedManyWithoutClaimedByInput
    questionAnswers?: QuestionAnswerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTicketsCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTicketsCreatedInput, UserUncheckedCreateWithoutTicketsCreatedInput>
  }

  export type FeedbackCreateWithoutTicketInput = {
    comment?: string | null
    createdAt?: Date | string
    rating: number
    guild: GuildCreateNestedOneWithoutFeedbackInput
    user?: UserCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateWithoutTicketInput = {
    comment?: string | null
    createdAt?: Date | string
    guildId: string
    rating: number
    userId?: string | null
  }

  export type FeedbackCreateOrConnectWithoutTicketInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutTicketInput, FeedbackUncheckedCreateWithoutTicketInput>
  }

  export type GuildCreateWithoutTicketsInput = {
    autoClose?: number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: boolean
    closeButton?: boolean
    createdAt?: Date | string
    errorColour?: string
    footer?: string | null
    id: string
    locale?: string
    logChannel?: string | null
    primaryColour?: string
    staleAfter?: number | null
    successColour?: string
    workingHours?: JsonNullValueInput | InputJsonValue
    categories?: CategoryCreateNestedManyWithoutGuildInput
    feedback?: FeedbackCreateNestedManyWithoutGuildInput
    tags?: TagCreateNestedManyWithoutGuildInput
  }

  export type GuildUncheckedCreateWithoutTicketsInput = {
    autoClose?: number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: boolean
    closeButton?: boolean
    createdAt?: Date | string
    errorColour?: string
    footer?: string | null
    id: string
    locale?: string
    logChannel?: string | null
    primaryColour?: string
    staleAfter?: number | null
    successColour?: string
    workingHours?: JsonNullValueInput | InputJsonValue
    categories?: CategoryUncheckedCreateNestedManyWithoutGuildInput
    feedback?: FeedbackUncheckedCreateNestedManyWithoutGuildInput
    tags?: TagUncheckedCreateNestedManyWithoutGuildInput
  }

  export type GuildCreateOrConnectWithoutTicketsInput = {
    where: GuildWhereUniqueInput
    create: XOR<GuildCreateWithoutTicketsInput, GuildUncheckedCreateWithoutTicketsInput>
  }

  export type TicketCreateWithoutReferencesTicketInput = {
    closedAt?: Date | string | null
    closedReason?: string | null
    createdAt?: Date | string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserCreateNestedManyWithoutTicketInput
    category?: CategoryCreateNestedOneWithoutTicketsInput
    claimedBy?: UserCreateNestedOneWithoutTicketsClaimedInput
    closedBy?: UserCreateNestedOneWithoutTicketsClosedInput
    createdBy: UserCreateNestedOneWithoutTicketsCreatedInput
    feedback?: FeedbackCreateNestedOneWithoutTicketInput
    guild: GuildCreateNestedOneWithoutTicketsInput
    referencedBy?: TicketCreateNestedManyWithoutReferencesTicketInput
    questionAnswers?: QuestionAnswerCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutReferencesTicketInput = {
    categoryId?: number | null
    claimedById?: string | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelUncheckedCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageUncheckedCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleUncheckedCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserUncheckedCreateNestedManyWithoutTicketInput
    feedback?: FeedbackUncheckedCreateNestedOneWithoutTicketInput
    referencedBy?: TicketUncheckedCreateNestedManyWithoutReferencesTicketInput
    questionAnswers?: QuestionAnswerUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutReferencesTicketInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutReferencesTicketInput, TicketUncheckedCreateWithoutReferencesTicketInput>
  }

  export type TicketCreateManyReferencesTicketInputEnvelope = {
    data: TicketCreateManyReferencesTicketInput | TicketCreateManyReferencesTicketInput[]
    skipDuplicates?: boolean
  }

  export type TicketCreateWithoutReferencedByInput = {
    closedAt?: Date | string | null
    closedReason?: string | null
    createdAt?: Date | string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserCreateNestedManyWithoutTicketInput
    category?: CategoryCreateNestedOneWithoutTicketsInput
    claimedBy?: UserCreateNestedOneWithoutTicketsClaimedInput
    closedBy?: UserCreateNestedOneWithoutTicketsClosedInput
    createdBy: UserCreateNestedOneWithoutTicketsCreatedInput
    feedback?: FeedbackCreateNestedOneWithoutTicketInput
    guild: GuildCreateNestedOneWithoutTicketsInput
    referencesTicket?: TicketCreateNestedOneWithoutReferencedByInput
    questionAnswers?: QuestionAnswerCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutReferencedByInput = {
    categoryId?: number | null
    claimedById?: string | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelUncheckedCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageUncheckedCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleUncheckedCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserUncheckedCreateNestedManyWithoutTicketInput
    feedback?: FeedbackUncheckedCreateNestedOneWithoutTicketInput
    questionAnswers?: QuestionAnswerUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutReferencedByInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutReferencedByInput, TicketUncheckedCreateWithoutReferencedByInput>
  }

  export type QuestionAnswerCreateWithoutTicketInput = {
    createdAt?: Date | string
    value?: string | null
    question: QuestionCreateNestedOneWithoutAnswersInput
    user: UserCreateNestedOneWithoutQuestionAnswersInput
  }

  export type QuestionAnswerUncheckedCreateWithoutTicketInput = {
    createdAt?: Date | string
    id?: number
    questionId: string
    userId: string
    value?: string | null
  }

  export type QuestionAnswerCreateOrConnectWithoutTicketInput = {
    where: QuestionAnswerWhereUniqueInput
    create: XOR<QuestionAnswerCreateWithoutTicketInput, QuestionAnswerUncheckedCreateWithoutTicketInput>
  }

  export type QuestionAnswerCreateManyTicketInputEnvelope = {
    data: QuestionAnswerCreateManyTicketInput | QuestionAnswerCreateManyTicketInput[]
    skipDuplicates?: boolean
  }

  export type ArchivedChannelUpsertWithWhereUniqueWithoutTicketInput = {
    where: ArchivedChannelWhereUniqueInput
    update: XOR<ArchivedChannelUpdateWithoutTicketInput, ArchivedChannelUncheckedUpdateWithoutTicketInput>
    create: XOR<ArchivedChannelCreateWithoutTicketInput, ArchivedChannelUncheckedCreateWithoutTicketInput>
  }

  export type ArchivedChannelUpdateWithWhereUniqueWithoutTicketInput = {
    where: ArchivedChannelWhereUniqueInput
    data: XOR<ArchivedChannelUpdateWithoutTicketInput, ArchivedChannelUncheckedUpdateWithoutTicketInput>
  }

  export type ArchivedChannelUpdateManyWithWhereWithoutTicketInput = {
    where: ArchivedChannelScalarWhereInput
    data: XOR<ArchivedChannelUpdateManyMutationInput, ArchivedChannelUncheckedUpdateManyWithoutTicketInput>
  }

  export type ArchivedChannelScalarWhereInput = {
    AND?: ArchivedChannelScalarWhereInput | ArchivedChannelScalarWhereInput[]
    OR?: ArchivedChannelScalarWhereInput[]
    NOT?: ArchivedChannelScalarWhereInput | ArchivedChannelScalarWhereInput[]
    channelId?: StringFilter<"ArchivedChannel"> | string
    createdAt?: DateTimeFilter<"ArchivedChannel"> | Date | string
    name?: StringFilter<"ArchivedChannel"> | string
    ticketId?: StringFilter<"ArchivedChannel"> | string
  }

  export type ArchivedMessageUpsertWithWhereUniqueWithoutTicketInput = {
    where: ArchivedMessageWhereUniqueInput
    update: XOR<ArchivedMessageUpdateWithoutTicketInput, ArchivedMessageUncheckedUpdateWithoutTicketInput>
    create: XOR<ArchivedMessageCreateWithoutTicketInput, ArchivedMessageUncheckedCreateWithoutTicketInput>
  }

  export type ArchivedMessageUpdateWithWhereUniqueWithoutTicketInput = {
    where: ArchivedMessageWhereUniqueInput
    data: XOR<ArchivedMessageUpdateWithoutTicketInput, ArchivedMessageUncheckedUpdateWithoutTicketInput>
  }

  export type ArchivedMessageUpdateManyWithWhereWithoutTicketInput = {
    where: ArchivedMessageScalarWhereInput
    data: XOR<ArchivedMessageUpdateManyMutationInput, ArchivedMessageUncheckedUpdateManyWithoutTicketInput>
  }

  export type ArchivedRoleUpsertWithWhereUniqueWithoutTicketInput = {
    where: ArchivedRoleWhereUniqueInput
    update: XOR<ArchivedRoleUpdateWithoutTicketInput, ArchivedRoleUncheckedUpdateWithoutTicketInput>
    create: XOR<ArchivedRoleCreateWithoutTicketInput, ArchivedRoleUncheckedCreateWithoutTicketInput>
  }

  export type ArchivedRoleUpdateWithWhereUniqueWithoutTicketInput = {
    where: ArchivedRoleWhereUniqueInput
    data: XOR<ArchivedRoleUpdateWithoutTicketInput, ArchivedRoleUncheckedUpdateWithoutTicketInput>
  }

  export type ArchivedRoleUpdateManyWithWhereWithoutTicketInput = {
    where: ArchivedRoleScalarWhereInput
    data: XOR<ArchivedRoleUpdateManyMutationInput, ArchivedRoleUncheckedUpdateManyWithoutTicketInput>
  }

  export type ArchivedRoleScalarWhereInput = {
    AND?: ArchivedRoleScalarWhereInput | ArchivedRoleScalarWhereInput[]
    OR?: ArchivedRoleScalarWhereInput[]
    NOT?: ArchivedRoleScalarWhereInput | ArchivedRoleScalarWhereInput[]
    colour?: StringFilter<"ArchivedRole"> | string
    createdAt?: DateTimeFilter<"ArchivedRole"> | Date | string
    name?: StringFilter<"ArchivedRole"> | string
    roleId?: StringFilter<"ArchivedRole"> | string
    ticketId?: StringFilter<"ArchivedRole"> | string
  }

  export type ArchivedUserUpsertWithWhereUniqueWithoutTicketInput = {
    where: ArchivedUserWhereUniqueInput
    update: XOR<ArchivedUserUpdateWithoutTicketInput, ArchivedUserUncheckedUpdateWithoutTicketInput>
    create: XOR<ArchivedUserCreateWithoutTicketInput, ArchivedUserUncheckedCreateWithoutTicketInput>
  }

  export type ArchivedUserUpdateWithWhereUniqueWithoutTicketInput = {
    where: ArchivedUserWhereUniqueInput
    data: XOR<ArchivedUserUpdateWithoutTicketInput, ArchivedUserUncheckedUpdateWithoutTicketInput>
  }

  export type ArchivedUserUpdateManyWithWhereWithoutTicketInput = {
    where: ArchivedUserScalarWhereInput
    data: XOR<ArchivedUserUpdateManyMutationInput, ArchivedUserUncheckedUpdateManyWithoutTicketInput>
  }

  export type CategoryUpsertWithoutTicketsInput = {
    update: XOR<CategoryUpdateWithoutTicketsInput, CategoryUncheckedUpdateWithoutTicketsInput>
    create: XOR<CategoryCreateWithoutTicketsInput, CategoryUncheckedCreateWithoutTicketsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutTicketsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutTicketsInput, CategoryUncheckedUpdateWithoutTicketsInput>
  }

  export type CategoryUpdateWithoutTicketsInput = {
    channelName?: StringFieldUpdateOperationsInput | string
    claiming?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cooldown?: NullableIntFieldUpdateOperationsInput | number | null
    customTopic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    discordCategory?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    enableFeedback?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    memberLimit?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    openingMessage?: StringFieldUpdateOperationsInput | string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: NullableIntFieldUpdateOperationsInput | number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: BoolFieldUpdateOperationsInput | boolean
    staffRoles?: JsonNullValueInput | InputJsonValue
    totalLimit?: IntFieldUpdateOperationsInput | number
    guild?: GuildUpdateOneRequiredWithoutCategoriesNestedInput
    questions?: QuestionUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutTicketsInput = {
    channelName?: StringFieldUpdateOperationsInput | string
    claiming?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cooldown?: NullableIntFieldUpdateOperationsInput | number | null
    customTopic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    discordCategory?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    enableFeedback?: BoolFieldUpdateOperationsInput | boolean
    guildId?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    memberLimit?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    openingMessage?: StringFieldUpdateOperationsInput | string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: NullableIntFieldUpdateOperationsInput | number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: BoolFieldUpdateOperationsInput | boolean
    staffRoles?: JsonNullValueInput | InputJsonValue
    totalLimit?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type UserUpsertWithoutTicketsClaimedInput = {
    update: XOR<UserUpdateWithoutTicketsClaimedInput, UserUncheckedUpdateWithoutTicketsClaimedInput>
    create: XOR<UserCreateWithoutTicketsClaimedInput, UserUncheckedCreateWithoutTicketsClaimedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTicketsClaimedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTicketsClaimedInput, UserUncheckedUpdateWithoutTicketsClaimedInput>
  }

  export type UserUpdateWithoutTicketsClaimedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    messageCount?: IntFieldUpdateOperationsInput | number
    feedback?: FeedbackUpdateManyWithoutUserNestedInput
    ticketsCreated?: TicketUpdateManyWithoutCreatedByNestedInput
    ticketsClosed?: TicketUpdateManyWithoutClosedByNestedInput
    questionAnswers?: QuestionAnswerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTicketsClaimedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    messageCount?: IntFieldUpdateOperationsInput | number
    feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    ticketsCreated?: TicketUncheckedUpdateManyWithoutCreatedByNestedInput
    ticketsClosed?: TicketUncheckedUpdateManyWithoutClosedByNestedInput
    questionAnswers?: QuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutTicketsClosedInput = {
    update: XOR<UserUpdateWithoutTicketsClosedInput, UserUncheckedUpdateWithoutTicketsClosedInput>
    create: XOR<UserCreateWithoutTicketsClosedInput, UserUncheckedCreateWithoutTicketsClosedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTicketsClosedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTicketsClosedInput, UserUncheckedUpdateWithoutTicketsClosedInput>
  }

  export type UserUpdateWithoutTicketsClosedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    messageCount?: IntFieldUpdateOperationsInput | number
    feedback?: FeedbackUpdateManyWithoutUserNestedInput
    ticketsCreated?: TicketUpdateManyWithoutCreatedByNestedInput
    ticketsClaimed?: TicketUpdateManyWithoutClaimedByNestedInput
    questionAnswers?: QuestionAnswerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTicketsClosedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    messageCount?: IntFieldUpdateOperationsInput | number
    feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    ticketsCreated?: TicketUncheckedUpdateManyWithoutCreatedByNestedInput
    ticketsClaimed?: TicketUncheckedUpdateManyWithoutClaimedByNestedInput
    questionAnswers?: QuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutTicketsCreatedInput = {
    update: XOR<UserUpdateWithoutTicketsCreatedInput, UserUncheckedUpdateWithoutTicketsCreatedInput>
    create: XOR<UserCreateWithoutTicketsCreatedInput, UserUncheckedCreateWithoutTicketsCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTicketsCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTicketsCreatedInput, UserUncheckedUpdateWithoutTicketsCreatedInput>
  }

  export type UserUpdateWithoutTicketsCreatedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    messageCount?: IntFieldUpdateOperationsInput | number
    feedback?: FeedbackUpdateManyWithoutUserNestedInput
    ticketsClosed?: TicketUpdateManyWithoutClosedByNestedInput
    ticketsClaimed?: TicketUpdateManyWithoutClaimedByNestedInput
    questionAnswers?: QuestionAnswerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTicketsCreatedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    messageCount?: IntFieldUpdateOperationsInput | number
    feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    ticketsClosed?: TicketUncheckedUpdateManyWithoutClosedByNestedInput
    ticketsClaimed?: TicketUncheckedUpdateManyWithoutClaimedByNestedInput
    questionAnswers?: QuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FeedbackUpsertWithoutTicketInput = {
    update: XOR<FeedbackUpdateWithoutTicketInput, FeedbackUncheckedUpdateWithoutTicketInput>
    create: XOR<FeedbackCreateWithoutTicketInput, FeedbackUncheckedCreateWithoutTicketInput>
    where?: FeedbackWhereInput
  }

  export type FeedbackUpdateToOneWithWhereWithoutTicketInput = {
    where?: FeedbackWhereInput
    data: XOR<FeedbackUpdateWithoutTicketInput, FeedbackUncheckedUpdateWithoutTicketInput>
  }

  export type FeedbackUpdateWithoutTicketInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    guild?: GuildUpdateOneRequiredWithoutFeedbackNestedInput
    user?: UserUpdateOneWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutTicketInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guildId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GuildUpsertWithoutTicketsInput = {
    update: XOR<GuildUpdateWithoutTicketsInput, GuildUncheckedUpdateWithoutTicketsInput>
    create: XOR<GuildCreateWithoutTicketsInput, GuildUncheckedCreateWithoutTicketsInput>
    where?: GuildWhereInput
  }

  export type GuildUpdateToOneWithWhereWithoutTicketsInput = {
    where?: GuildWhereInput
    data: XOR<GuildUpdateWithoutTicketsInput, GuildUncheckedUpdateWithoutTicketsInput>
  }

  export type GuildUpdateWithoutTicketsInput = {
    autoClose?: IntFieldUpdateOperationsInput | number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: BoolFieldUpdateOperationsInput | boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: BoolFieldUpdateOperationsInput | boolean
    closeButton?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorColour?: StringFieldUpdateOperationsInput | string
    footer?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    locale?: StringFieldUpdateOperationsInput | string
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColour?: StringFieldUpdateOperationsInput | string
    staleAfter?: NullableIntFieldUpdateOperationsInput | number | null
    successColour?: StringFieldUpdateOperationsInput | string
    workingHours?: JsonNullValueInput | InputJsonValue
    categories?: CategoryUpdateManyWithoutGuildNestedInput
    feedback?: FeedbackUpdateManyWithoutGuildNestedInput
    tags?: TagUpdateManyWithoutGuildNestedInput
  }

  export type GuildUncheckedUpdateWithoutTicketsInput = {
    autoClose?: IntFieldUpdateOperationsInput | number
    autoTag?: JsonNullValueInput | InputJsonValue
    archive?: BoolFieldUpdateOperationsInput | boolean
    blocklist?: JsonNullValueInput | InputJsonValue
    claimButton?: BoolFieldUpdateOperationsInput | boolean
    closeButton?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorColour?: StringFieldUpdateOperationsInput | string
    footer?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    locale?: StringFieldUpdateOperationsInput | string
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColour?: StringFieldUpdateOperationsInput | string
    staleAfter?: NullableIntFieldUpdateOperationsInput | number | null
    successColour?: StringFieldUpdateOperationsInput | string
    workingHours?: JsonNullValueInput | InputJsonValue
    categories?: CategoryUncheckedUpdateManyWithoutGuildNestedInput
    feedback?: FeedbackUncheckedUpdateManyWithoutGuildNestedInput
    tags?: TagUncheckedUpdateManyWithoutGuildNestedInput
  }

  export type TicketUpsertWithWhereUniqueWithoutReferencesTicketInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutReferencesTicketInput, TicketUncheckedUpdateWithoutReferencesTicketInput>
    create: XOR<TicketCreateWithoutReferencesTicketInput, TicketUncheckedCreateWithoutReferencesTicketInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutReferencesTicketInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutReferencesTicketInput, TicketUncheckedUpdateWithoutReferencesTicketInput>
  }

  export type TicketUpdateManyWithWhereWithoutReferencesTicketInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutReferencesTicketInput>
  }

  export type TicketUpsertWithoutReferencedByInput = {
    update: XOR<TicketUpdateWithoutReferencedByInput, TicketUncheckedUpdateWithoutReferencedByInput>
    create: XOR<TicketCreateWithoutReferencedByInput, TicketUncheckedCreateWithoutReferencedByInput>
    where?: TicketWhereInput
  }

  export type TicketUpdateToOneWithWhereWithoutReferencedByInput = {
    where?: TicketWhereInput
    data: XOR<TicketUpdateWithoutReferencedByInput, TicketUncheckedUpdateWithoutReferencedByInput>
  }

  export type TicketUpdateWithoutReferencedByInput = {
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUpdateManyWithoutTicketNestedInput
    category?: CategoryUpdateOneWithoutTicketsNestedInput
    claimedBy?: UserUpdateOneWithoutTicketsClaimedNestedInput
    closedBy?: UserUpdateOneWithoutTicketsClosedNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTicketsCreatedNestedInput
    feedback?: FeedbackUpdateOneWithoutTicketNestedInput
    guild?: GuildUpdateOneRequiredWithoutTicketsNestedInput
    referencesTicket?: TicketUpdateOneWithoutReferencedByNestedInput
    questionAnswers?: QuestionAnswerUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutReferencedByInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUncheckedUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUncheckedUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUncheckedUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUncheckedUpdateManyWithoutTicketNestedInput
    feedback?: FeedbackUncheckedUpdateOneWithoutTicketNestedInput
    questionAnswers?: QuestionAnswerUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type QuestionAnswerUpsertWithWhereUniqueWithoutTicketInput = {
    where: QuestionAnswerWhereUniqueInput
    update: XOR<QuestionAnswerUpdateWithoutTicketInput, QuestionAnswerUncheckedUpdateWithoutTicketInput>
    create: XOR<QuestionAnswerCreateWithoutTicketInput, QuestionAnswerUncheckedCreateWithoutTicketInput>
  }

  export type QuestionAnswerUpdateWithWhereUniqueWithoutTicketInput = {
    where: QuestionAnswerWhereUniqueInput
    data: XOR<QuestionAnswerUpdateWithoutTicketInput, QuestionAnswerUncheckedUpdateWithoutTicketInput>
  }

  export type QuestionAnswerUpdateManyWithWhereWithoutTicketInput = {
    where: QuestionAnswerScalarWhereInput
    data: XOR<QuestionAnswerUpdateManyMutationInput, QuestionAnswerUncheckedUpdateManyWithoutTicketInput>
  }

  export type FeedbackCreateWithoutUserInput = {
    comment?: string | null
    createdAt?: Date | string
    rating: number
    guild: GuildCreateNestedOneWithoutFeedbackInput
    ticket: TicketCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateWithoutUserInput = {
    comment?: string | null
    createdAt?: Date | string
    guildId: string
    rating: number
    ticketId: string
  }

  export type FeedbackCreateOrConnectWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackCreateManyUserInputEnvelope = {
    data: FeedbackCreateManyUserInput | FeedbackCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TicketCreateWithoutCreatedByInput = {
    closedAt?: Date | string | null
    closedReason?: string | null
    createdAt?: Date | string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserCreateNestedManyWithoutTicketInput
    category?: CategoryCreateNestedOneWithoutTicketsInput
    claimedBy?: UserCreateNestedOneWithoutTicketsClaimedInput
    closedBy?: UserCreateNestedOneWithoutTicketsClosedInput
    feedback?: FeedbackCreateNestedOneWithoutTicketInput
    guild: GuildCreateNestedOneWithoutTicketsInput
    referencedBy?: TicketCreateNestedManyWithoutReferencesTicketInput
    referencesTicket?: TicketCreateNestedOneWithoutReferencedByInput
    questionAnswers?: QuestionAnswerCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutCreatedByInput = {
    categoryId?: number | null
    claimedById?: string | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelUncheckedCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageUncheckedCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleUncheckedCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserUncheckedCreateNestedManyWithoutTicketInput
    feedback?: FeedbackUncheckedCreateNestedOneWithoutTicketInput
    referencedBy?: TicketUncheckedCreateNestedManyWithoutReferencesTicketInput
    questionAnswers?: QuestionAnswerUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutCreatedByInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutCreatedByInput, TicketUncheckedCreateWithoutCreatedByInput>
  }

  export type TicketCreateManyCreatedByInputEnvelope = {
    data: TicketCreateManyCreatedByInput | TicketCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type TicketCreateWithoutClosedByInput = {
    closedAt?: Date | string | null
    closedReason?: string | null
    createdAt?: Date | string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserCreateNestedManyWithoutTicketInput
    category?: CategoryCreateNestedOneWithoutTicketsInput
    claimedBy?: UserCreateNestedOneWithoutTicketsClaimedInput
    createdBy: UserCreateNestedOneWithoutTicketsCreatedInput
    feedback?: FeedbackCreateNestedOneWithoutTicketInput
    guild: GuildCreateNestedOneWithoutTicketsInput
    referencedBy?: TicketCreateNestedManyWithoutReferencesTicketInput
    referencesTicket?: TicketCreateNestedOneWithoutReferencedByInput
    questionAnswers?: QuestionAnswerCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutClosedByInput = {
    categoryId?: number | null
    claimedById?: string | null
    closedAt?: Date | string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelUncheckedCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageUncheckedCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleUncheckedCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserUncheckedCreateNestedManyWithoutTicketInput
    feedback?: FeedbackUncheckedCreateNestedOneWithoutTicketInput
    referencedBy?: TicketUncheckedCreateNestedManyWithoutReferencesTicketInput
    questionAnswers?: QuestionAnswerUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutClosedByInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutClosedByInput, TicketUncheckedCreateWithoutClosedByInput>
  }

  export type TicketCreateManyClosedByInputEnvelope = {
    data: TicketCreateManyClosedByInput | TicketCreateManyClosedByInput[]
    skipDuplicates?: boolean
  }

  export type TicketCreateWithoutClaimedByInput = {
    closedAt?: Date | string | null
    closedReason?: string | null
    createdAt?: Date | string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserCreateNestedManyWithoutTicketInput
    category?: CategoryCreateNestedOneWithoutTicketsInput
    closedBy?: UserCreateNestedOneWithoutTicketsClosedInput
    createdBy: UserCreateNestedOneWithoutTicketsCreatedInput
    feedback?: FeedbackCreateNestedOneWithoutTicketInput
    guild: GuildCreateNestedOneWithoutTicketsInput
    referencedBy?: TicketCreateNestedManyWithoutReferencesTicketInput
    referencesTicket?: TicketCreateNestedOneWithoutReferencedByInput
    questionAnswers?: QuestionAnswerCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutClaimedByInput = {
    categoryId?: number | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
    archivedChannels?: ArchivedChannelUncheckedCreateNestedManyWithoutTicketInput
    archivedMessages?: ArchivedMessageUncheckedCreateNestedManyWithoutTicketInput
    archivedRoles?: ArchivedRoleUncheckedCreateNestedManyWithoutTicketInput
    archivedUsers?: ArchivedUserUncheckedCreateNestedManyWithoutTicketInput
    feedback?: FeedbackUncheckedCreateNestedOneWithoutTicketInput
    referencedBy?: TicketUncheckedCreateNestedManyWithoutReferencesTicketInput
    questionAnswers?: QuestionAnswerUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutClaimedByInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutClaimedByInput, TicketUncheckedCreateWithoutClaimedByInput>
  }

  export type TicketCreateManyClaimedByInputEnvelope = {
    data: TicketCreateManyClaimedByInput | TicketCreateManyClaimedByInput[]
    skipDuplicates?: boolean
  }

  export type QuestionAnswerCreateWithoutUserInput = {
    createdAt?: Date | string
    value?: string | null
    ticket: TicketCreateNestedOneWithoutQuestionAnswersInput
    question: QuestionCreateNestedOneWithoutAnswersInput
  }

  export type QuestionAnswerUncheckedCreateWithoutUserInput = {
    createdAt?: Date | string
    id?: number
    ticketId: string
    questionId: string
    value?: string | null
  }

  export type QuestionAnswerCreateOrConnectWithoutUserInput = {
    where: QuestionAnswerWhereUniqueInput
    create: XOR<QuestionAnswerCreateWithoutUserInput, QuestionAnswerUncheckedCreateWithoutUserInput>
  }

  export type QuestionAnswerCreateManyUserInputEnvelope = {
    data: QuestionAnswerCreateManyUserInput | QuestionAnswerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutUserInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutUserInput>
  }

  export type TicketUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutCreatedByInput, TicketUncheckedUpdateWithoutCreatedByInput>
    create: XOR<TicketCreateWithoutCreatedByInput, TicketUncheckedCreateWithoutCreatedByInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutCreatedByInput, TicketUncheckedUpdateWithoutCreatedByInput>
  }

  export type TicketUpdateManyWithWhereWithoutCreatedByInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type TicketUpsertWithWhereUniqueWithoutClosedByInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutClosedByInput, TicketUncheckedUpdateWithoutClosedByInput>
    create: XOR<TicketCreateWithoutClosedByInput, TicketUncheckedCreateWithoutClosedByInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutClosedByInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutClosedByInput, TicketUncheckedUpdateWithoutClosedByInput>
  }

  export type TicketUpdateManyWithWhereWithoutClosedByInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutClosedByInput>
  }

  export type TicketUpsertWithWhereUniqueWithoutClaimedByInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutClaimedByInput, TicketUncheckedUpdateWithoutClaimedByInput>
    create: XOR<TicketCreateWithoutClaimedByInput, TicketUncheckedCreateWithoutClaimedByInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutClaimedByInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutClaimedByInput, TicketUncheckedUpdateWithoutClaimedByInput>
  }

  export type TicketUpdateManyWithWhereWithoutClaimedByInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutClaimedByInput>
  }

  export type QuestionAnswerUpsertWithWhereUniqueWithoutUserInput = {
    where: QuestionAnswerWhereUniqueInput
    update: XOR<QuestionAnswerUpdateWithoutUserInput, QuestionAnswerUncheckedUpdateWithoutUserInput>
    create: XOR<QuestionAnswerCreateWithoutUserInput, QuestionAnswerUncheckedCreateWithoutUserInput>
  }

  export type QuestionAnswerUpdateWithWhereUniqueWithoutUserInput = {
    where: QuestionAnswerWhereUniqueInput
    data: XOR<QuestionAnswerUpdateWithoutUserInput, QuestionAnswerUncheckedUpdateWithoutUserInput>
  }

  export type QuestionAnswerUpdateManyWithWhereWithoutUserInput = {
    where: QuestionAnswerScalarWhereInput
    data: XOR<QuestionAnswerUpdateManyMutationInput, QuestionAnswerUncheckedUpdateManyWithoutUserInput>
  }

  export type ArchivedUserCreateManyRoleInput = {
    avatar?: string | null
    bot?: boolean
    createdAt?: Date | string
    discriminator?: string | null
    displayName?: string | null
    userId: string
    username?: string | null
  }

  export type ArchivedUserUpdateWithoutRoleInput = {
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discriminator?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    archivedMessages?: ArchivedMessageUpdateManyWithoutAuthorNestedInput
    ticket?: TicketUpdateOneRequiredWithoutArchivedUsersNestedInput
  }

  export type ArchivedUserUncheckedUpdateWithoutRoleInput = {
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discriminator?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    archivedMessages?: ArchivedMessageUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type ArchivedUserUncheckedUpdateManyWithoutRoleInput = {
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discriminator?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ArchivedMessageCreateManyAuthorInput = {
    content: string
    createdAt?: Date | string
    deleted?: boolean
    edited?: boolean
    external?: boolean
    id: string
  }

  export type ArchivedMessageUpdateWithoutAuthorInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    edited?: BoolFieldUpdateOperationsInput | boolean
    external?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    ticket?: TicketUpdateOneRequiredWithoutArchivedMessagesNestedInput
  }

  export type ArchivedMessageUncheckedUpdateWithoutAuthorInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    edited?: BoolFieldUpdateOperationsInput | boolean
    external?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ArchivedMessageUncheckedUpdateManyWithoutAuthorInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    edited?: BoolFieldUpdateOperationsInput | boolean
    external?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionCreateManyCategoryInput = {
    createdAt?: Date | string
    id?: string
    label: string
    maxLength?: number | null
    minLength?: number | null
    options?: JsonNullValueInput | InputJsonValue
    order: number
    placeholder?: string | null
    required?: boolean
    style?: number
    type?: $Enums.QuestionType
    value?: string | null
  }

  export type TicketCreateManyCategoryInput = {
    claimedById?: string | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
  }

  export type QuestionUpdateWithoutCategoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    maxLength?: NullableIntFieldUpdateOperationsInput | number | null
    minLength?: NullableIntFieldUpdateOperationsInput | number | null
    options?: JsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    placeholder?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    style?: IntFieldUpdateOperationsInput | number
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    value?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: QuestionAnswerUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutCategoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    maxLength?: NullableIntFieldUpdateOperationsInput | number | null
    minLength?: NullableIntFieldUpdateOperationsInput | number | null
    options?: JsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    placeholder?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    style?: IntFieldUpdateOperationsInput | number
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    value?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: QuestionAnswerUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutCategoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    maxLength?: NullableIntFieldUpdateOperationsInput | number | null
    minLength?: NullableIntFieldUpdateOperationsInput | number | null
    options?: JsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    placeholder?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    style?: IntFieldUpdateOperationsInput | number
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TicketUpdateWithoutCategoryInput = {
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUpdateManyWithoutTicketNestedInput
    claimedBy?: UserUpdateOneWithoutTicketsClaimedNestedInput
    closedBy?: UserUpdateOneWithoutTicketsClosedNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTicketsCreatedNestedInput
    feedback?: FeedbackUpdateOneWithoutTicketNestedInput
    guild?: GuildUpdateOneRequiredWithoutTicketsNestedInput
    referencedBy?: TicketUpdateManyWithoutReferencesTicketNestedInput
    referencesTicket?: TicketUpdateOneWithoutReferencedByNestedInput
    questionAnswers?: QuestionAnswerUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutCategoryInput = {
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUncheckedUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUncheckedUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUncheckedUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUncheckedUpdateManyWithoutTicketNestedInput
    feedback?: FeedbackUncheckedUpdateOneWithoutTicketNestedInput
    referencedBy?: TicketUncheckedUpdateManyWithoutReferencesTicketNestedInput
    questionAnswers?: QuestionAnswerUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateManyWithoutCategoryInput = {
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryCreateManyGuildInput = {
    channelName: string
    claiming?: boolean
    createdAt?: Date | string
    cooldown?: number | null
    customTopic?: string | null
    description: string
    discordCategory: string
    emoji: string
    enableFeedback?: boolean
    id?: number
    image?: string | null
    memberLimit?: number
    name: string
    openingMessage: string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: boolean
    staffRoles: JsonNullValueInput | InputJsonValue
    totalLimit?: number
  }

  export type FeedbackCreateManyGuildInput = {
    comment?: string | null
    createdAt?: Date | string
    rating: number
    ticketId: string
    userId?: string | null
  }

  export type TagCreateManyGuildInput = {
    content: string
    createdAt?: Date | string
    id?: number
    name: string
    regex?: string | null
  }

  export type TicketCreateManyGuildInput = {
    categoryId?: number | null
    claimedById?: string | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
  }

  export type CategoryUpdateWithoutGuildInput = {
    channelName?: StringFieldUpdateOperationsInput | string
    claiming?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cooldown?: NullableIntFieldUpdateOperationsInput | number | null
    customTopic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    discordCategory?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    enableFeedback?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    memberLimit?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    openingMessage?: StringFieldUpdateOperationsInput | string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: NullableIntFieldUpdateOperationsInput | number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: BoolFieldUpdateOperationsInput | boolean
    staffRoles?: JsonNullValueInput | InputJsonValue
    totalLimit?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUpdateManyWithoutCategoryNestedInput
    tickets?: TicketUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutGuildInput = {
    channelName?: StringFieldUpdateOperationsInput | string
    claiming?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cooldown?: NullableIntFieldUpdateOperationsInput | number | null
    customTopic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    discordCategory?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    enableFeedback?: BoolFieldUpdateOperationsInput | boolean
    id?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    memberLimit?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    openingMessage?: StringFieldUpdateOperationsInput | string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: NullableIntFieldUpdateOperationsInput | number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: BoolFieldUpdateOperationsInput | boolean
    staffRoles?: JsonNullValueInput | InputJsonValue
    totalLimit?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUncheckedUpdateManyWithoutCategoryNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutGuildInput = {
    channelName?: StringFieldUpdateOperationsInput | string
    claiming?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cooldown?: NullableIntFieldUpdateOperationsInput | number | null
    customTopic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    discordCategory?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    enableFeedback?: BoolFieldUpdateOperationsInput | boolean
    id?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    memberLimit?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    openingMessage?: StringFieldUpdateOperationsInput | string
    pingRoles?: JsonNullValueInput | InputJsonValue
    ratelimit?: NullableIntFieldUpdateOperationsInput | number | null
    requiredRoles?: JsonNullValueInput | InputJsonValue
    requireTopic?: BoolFieldUpdateOperationsInput | boolean
    staffRoles?: JsonNullValueInput | InputJsonValue
    totalLimit?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackUpdateWithoutGuildInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    ticket?: TicketUpdateOneRequiredWithoutFeedbackNestedInput
    user?: UserUpdateOneWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutGuildInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    ticketId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackUncheckedUpdateManyWithoutGuildInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    ticketId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagUpdateWithoutGuildInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    regex?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagUncheckedUpdateWithoutGuildInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    regex?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagUncheckedUpdateManyWithoutGuildInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    regex?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TicketUpdateWithoutGuildInput = {
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUpdateManyWithoutTicketNestedInput
    category?: CategoryUpdateOneWithoutTicketsNestedInput
    claimedBy?: UserUpdateOneWithoutTicketsClaimedNestedInput
    closedBy?: UserUpdateOneWithoutTicketsClosedNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTicketsCreatedNestedInput
    feedback?: FeedbackUpdateOneWithoutTicketNestedInput
    referencedBy?: TicketUpdateManyWithoutReferencesTicketNestedInput
    referencesTicket?: TicketUpdateOneWithoutReferencedByNestedInput
    questionAnswers?: QuestionAnswerUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutGuildInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUncheckedUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUncheckedUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUncheckedUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUncheckedUpdateManyWithoutTicketNestedInput
    feedback?: FeedbackUncheckedUpdateOneWithoutTicketNestedInput
    referencedBy?: TicketUncheckedUpdateManyWithoutReferencesTicketNestedInput
    questionAnswers?: QuestionAnswerUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateManyWithoutGuildInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionAnswerCreateManyQuestionInput = {
    createdAt?: Date | string
    id?: number
    ticketId: string
    userId: string
    value?: string | null
  }

  export type QuestionAnswerUpdateWithoutQuestionInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    ticket?: TicketUpdateOneRequiredWithoutQuestionAnswersNestedInput
    user?: UserUpdateOneRequiredWithoutQuestionAnswersNestedInput
  }

  export type QuestionAnswerUncheckedUpdateWithoutQuestionInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    ticketId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionAnswerUncheckedUpdateManyWithoutQuestionInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    ticketId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ArchivedChannelCreateManyTicketInput = {
    channelId: string
    createdAt?: Date | string
    name: string
  }

  export type ArchivedMessageCreateManyTicketInput = {
    authorId: string
    content: string
    createdAt?: Date | string
    deleted?: boolean
    edited?: boolean
    external?: boolean
    id: string
  }

  export type ArchivedRoleCreateManyTicketInput = {
    colour?: string
    createdAt?: Date | string
    name: string
    roleId: string
  }

  export type ArchivedUserCreateManyTicketInput = {
    avatar?: string | null
    bot?: boolean
    createdAt?: Date | string
    discriminator?: string | null
    displayName?: string | null
    roleId?: string | null
    userId: string
    username?: string | null
  }

  export type TicketCreateManyReferencesTicketInput = {
    categoryId?: number | null
    claimedById?: string | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    topic?: string | null
  }

  export type QuestionAnswerCreateManyTicketInput = {
    createdAt?: Date | string
    id?: number
    questionId: string
    userId: string
    value?: string | null
  }

  export type ArchivedChannelUpdateWithoutTicketInput = {
    channelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ArchivedChannelUncheckedUpdateWithoutTicketInput = {
    channelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ArchivedChannelUncheckedUpdateManyWithoutTicketInput = {
    channelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ArchivedMessageUpdateWithoutTicketInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    edited?: BoolFieldUpdateOperationsInput | boolean
    external?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    author?: ArchivedUserUpdateOneRequiredWithoutArchivedMessagesNestedInput
  }

  export type ArchivedMessageUncheckedUpdateWithoutTicketInput = {
    authorId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    edited?: BoolFieldUpdateOperationsInput | boolean
    external?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ArchivedMessageUncheckedUpdateManyWithoutTicketInput = {
    authorId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    edited?: BoolFieldUpdateOperationsInput | boolean
    external?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ArchivedRoleUpdateWithoutTicketInput = {
    colour?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    archivedUsers?: ArchivedUserUpdateManyWithoutRoleNestedInput
  }

  export type ArchivedRoleUncheckedUpdateWithoutTicketInput = {
    colour?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    archivedUsers?: ArchivedUserUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type ArchivedRoleUncheckedUpdateManyWithoutTicketInput = {
    colour?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type ArchivedUserUpdateWithoutTicketInput = {
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discriminator?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    archivedMessages?: ArchivedMessageUpdateManyWithoutAuthorNestedInput
    role?: ArchivedRoleUpdateOneWithoutArchivedUsersNestedInput
  }

  export type ArchivedUserUncheckedUpdateWithoutTicketInput = {
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discriminator?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    archivedMessages?: ArchivedMessageUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type ArchivedUserUncheckedUpdateManyWithoutTicketInput = {
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discriminator?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TicketUpdateWithoutReferencesTicketInput = {
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUpdateManyWithoutTicketNestedInput
    category?: CategoryUpdateOneWithoutTicketsNestedInput
    claimedBy?: UserUpdateOneWithoutTicketsClaimedNestedInput
    closedBy?: UserUpdateOneWithoutTicketsClosedNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTicketsCreatedNestedInput
    feedback?: FeedbackUpdateOneWithoutTicketNestedInput
    guild?: GuildUpdateOneRequiredWithoutTicketsNestedInput
    referencedBy?: TicketUpdateManyWithoutReferencesTicketNestedInput
    questionAnswers?: QuestionAnswerUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutReferencesTicketInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUncheckedUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUncheckedUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUncheckedUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUncheckedUpdateManyWithoutTicketNestedInput
    feedback?: FeedbackUncheckedUpdateOneWithoutTicketNestedInput
    referencedBy?: TicketUncheckedUpdateManyWithoutReferencesTicketNestedInput
    questionAnswers?: QuestionAnswerUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateManyWithoutReferencesTicketInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionAnswerUpdateWithoutTicketInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    question?: QuestionUpdateOneRequiredWithoutAnswersNestedInput
    user?: UserUpdateOneRequiredWithoutQuestionAnswersNestedInput
  }

  export type QuestionAnswerUncheckedUpdateWithoutTicketInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    questionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionAnswerUncheckedUpdateManyWithoutTicketInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    questionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackCreateManyUserInput = {
    comment?: string | null
    createdAt?: Date | string
    guildId: string
    rating: number
    ticketId: string
  }

  export type TicketCreateManyCreatedByInput = {
    categoryId?: number | null
    claimedById?: string | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
  }

  export type TicketCreateManyClosedByInput = {
    categoryId?: number | null
    claimedById?: string | null
    closedAt?: Date | string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
  }

  export type TicketCreateManyClaimedByInput = {
    categoryId?: number | null
    closedAt?: Date | string | null
    closedById?: string | null
    closedReason?: string | null
    createdAt?: Date | string
    createdById: string
    deleted?: boolean
    firstResponseAt?: Date | string | null
    guildId: string
    id: string
    lastMessageAt?: Date | string | null
    messageCount?: number | null
    number: number
    open?: boolean
    openingMessageId: string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: $Enums.TicketPriority | null
    referencesMessageId?: string | null
    referencesTicketId?: string | null
    topic?: string | null
  }

  export type QuestionAnswerCreateManyUserInput = {
    createdAt?: Date | string
    id?: number
    ticketId: string
    questionId: string
    value?: string | null
  }

  export type FeedbackUpdateWithoutUserInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    guild?: GuildUpdateOneRequiredWithoutFeedbackNestedInput
    ticket?: TicketUpdateOneRequiredWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutUserInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guildId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    ticketId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUncheckedUpdateManyWithoutUserInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guildId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    ticketId?: StringFieldUpdateOperationsInput | string
  }

  export type TicketUpdateWithoutCreatedByInput = {
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUpdateManyWithoutTicketNestedInput
    category?: CategoryUpdateOneWithoutTicketsNestedInput
    claimedBy?: UserUpdateOneWithoutTicketsClaimedNestedInput
    closedBy?: UserUpdateOneWithoutTicketsClosedNestedInput
    feedback?: FeedbackUpdateOneWithoutTicketNestedInput
    guild?: GuildUpdateOneRequiredWithoutTicketsNestedInput
    referencedBy?: TicketUpdateManyWithoutReferencesTicketNestedInput
    referencesTicket?: TicketUpdateOneWithoutReferencedByNestedInput
    questionAnswers?: QuestionAnswerUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutCreatedByInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUncheckedUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUncheckedUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUncheckedUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUncheckedUpdateManyWithoutTicketNestedInput
    feedback?: FeedbackUncheckedUpdateOneWithoutTicketNestedInput
    referencedBy?: TicketUncheckedUpdateManyWithoutReferencesTicketNestedInput
    questionAnswers?: QuestionAnswerUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateManyWithoutCreatedByInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TicketUpdateWithoutClosedByInput = {
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUpdateManyWithoutTicketNestedInput
    category?: CategoryUpdateOneWithoutTicketsNestedInput
    claimedBy?: UserUpdateOneWithoutTicketsClaimedNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTicketsCreatedNestedInput
    feedback?: FeedbackUpdateOneWithoutTicketNestedInput
    guild?: GuildUpdateOneRequiredWithoutTicketsNestedInput
    referencedBy?: TicketUpdateManyWithoutReferencesTicketNestedInput
    referencesTicket?: TicketUpdateOneWithoutReferencedByNestedInput
    questionAnswers?: QuestionAnswerUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutClosedByInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUncheckedUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUncheckedUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUncheckedUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUncheckedUpdateManyWithoutTicketNestedInput
    feedback?: FeedbackUncheckedUpdateOneWithoutTicketNestedInput
    referencedBy?: TicketUncheckedUpdateManyWithoutReferencesTicketNestedInput
    questionAnswers?: QuestionAnswerUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateManyWithoutClosedByInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TicketUpdateWithoutClaimedByInput = {
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUpdateManyWithoutTicketNestedInput
    category?: CategoryUpdateOneWithoutTicketsNestedInput
    closedBy?: UserUpdateOneWithoutTicketsClosedNestedInput
    createdBy?: UserUpdateOneRequiredWithoutTicketsCreatedNestedInput
    feedback?: FeedbackUpdateOneWithoutTicketNestedInput
    guild?: GuildUpdateOneRequiredWithoutTicketsNestedInput
    referencedBy?: TicketUpdateManyWithoutReferencesTicketNestedInput
    referencesTicket?: TicketUpdateOneWithoutReferencedByNestedInput
    questionAnswers?: QuestionAnswerUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutClaimedByInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    archivedChannels?: ArchivedChannelUncheckedUpdateManyWithoutTicketNestedInput
    archivedMessages?: ArchivedMessageUncheckedUpdateManyWithoutTicketNestedInput
    archivedRoles?: ArchivedRoleUncheckedUpdateManyWithoutTicketNestedInput
    archivedUsers?: ArchivedUserUncheckedUpdateManyWithoutTicketNestedInput
    feedback?: FeedbackUncheckedUpdateOneWithoutTicketNestedInput
    referencedBy?: TicketUncheckedUpdateManyWithoutReferencesTicketNestedInput
    questionAnswers?: QuestionAnswerUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateManyWithoutClaimedByInput = {
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedById?: NullableStringFieldUpdateOperationsInput | string | null
    closedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    firstResponseAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    guildId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageCount?: NullableIntFieldUpdateOperationsInput | number | null
    number?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    openingMessageId?: StringFieldUpdateOperationsInput | string
    pinnedMessageIds?: JsonNullValueInput | InputJsonValue
    priority?: NullableEnumTicketPriorityFieldUpdateOperationsInput | $Enums.TicketPriority | null
    referencesMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    referencesTicketId?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionAnswerUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    ticket?: TicketUpdateOneRequiredWithoutQuestionAnswersNestedInput
    question?: QuestionUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type QuestionAnswerUncheckedUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    ticketId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionAnswerUncheckedUpdateManyWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    ticketId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ArchivedRoleCountOutputTypeDefaultArgs instead
     */
    export type ArchivedRoleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArchivedRoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArchivedUserCountOutputTypeDefaultArgs instead
     */
    export type ArchivedUserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArchivedUserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GuildCountOutputTypeDefaultArgs instead
     */
    export type GuildCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GuildCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionCountOutputTypeDefaultArgs instead
     */
    export type QuestionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketCountOutputTypeDefaultArgs instead
     */
    export type TicketCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArchivedChannelDefaultArgs instead
     */
    export type ArchivedChannelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArchivedChannelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArchivedMessageDefaultArgs instead
     */
    export type ArchivedMessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArchivedMessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArchivedRoleDefaultArgs instead
     */
    export type ArchivedRoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArchivedRoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArchivedUserDefaultArgs instead
     */
    export type ArchivedUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArchivedUserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeedbackDefaultArgs instead
     */
    export type FeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeedbackDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GuildDefaultArgs instead
     */
    export type GuildArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GuildDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionDefaultArgs instead
     */
    export type QuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionAnswerDefaultArgs instead
     */
    export type QuestionAnswerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionAnswerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagDefaultArgs instead
     */
    export type TagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketDefaultArgs instead
     */
    export type TicketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}