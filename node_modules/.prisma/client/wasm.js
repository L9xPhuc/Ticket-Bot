
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ArchivedChannelScalarFieldEnum = {
  channelId: 'channelId',
  createdAt: 'createdAt',
  name: 'name',
  ticketId: 'ticketId'
};

exports.Prisma.ArchivedMessageScalarFieldEnum = {
  authorId: 'authorId',
  content: 'content',
  createdAt: 'createdAt',
  deleted: 'deleted',
  edited: 'edited',
  external: 'external',
  id: 'id',
  ticketId: 'ticketId'
};

exports.Prisma.ArchivedRoleScalarFieldEnum = {
  colour: 'colour',
  createdAt: 'createdAt',
  name: 'name',
  roleId: 'roleId',
  ticketId: 'ticketId'
};

exports.Prisma.ArchivedUserScalarFieldEnum = {
  avatar: 'avatar',
  bot: 'bot',
  createdAt: 'createdAt',
  discriminator: 'discriminator',
  displayName: 'displayName',
  roleId: 'roleId',
  ticketId: 'ticketId',
  userId: 'userId',
  username: 'username'
};

exports.Prisma.CategoryScalarFieldEnum = {
  channelName: 'channelName',
  claiming: 'claiming',
  createdAt: 'createdAt',
  cooldown: 'cooldown',
  customTopic: 'customTopic',
  description: 'description',
  discordCategory: 'discordCategory',
  emoji: 'emoji',
  enableFeedback: 'enableFeedback',
  guildId: 'guildId',
  id: 'id',
  image: 'image',
  memberLimit: 'memberLimit',
  name: 'name',
  openingMessage: 'openingMessage',
  pingRoles: 'pingRoles',
  ratelimit: 'ratelimit',
  requiredRoles: 'requiredRoles',
  requireTopic: 'requireTopic',
  staffRoles: 'staffRoles',
  totalLimit: 'totalLimit'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  comment: 'comment',
  createdAt: 'createdAt',
  guildId: 'guildId',
  rating: 'rating',
  ticketId: 'ticketId',
  userId: 'userId'
};

exports.Prisma.GuildScalarFieldEnum = {
  autoClose: 'autoClose',
  autoTag: 'autoTag',
  archive: 'archive',
  blocklist: 'blocklist',
  claimButton: 'claimButton',
  closeButton: 'closeButton',
  createdAt: 'createdAt',
  errorColour: 'errorColour',
  footer: 'footer',
  id: 'id',
  locale: 'locale',
  logChannel: 'logChannel',
  primaryColour: 'primaryColour',
  staleAfter: 'staleAfter',
  successColour: 'successColour',
  workingHours: 'workingHours'
};

exports.Prisma.QuestionScalarFieldEnum = {
  createdAt: 'createdAt',
  id: 'id',
  categoryId: 'categoryId',
  label: 'label',
  maxLength: 'maxLength',
  minLength: 'minLength',
  options: 'options',
  order: 'order',
  placeholder: 'placeholder',
  required: 'required',
  style: 'style',
  type: 'type',
  value: 'value'
};

exports.Prisma.QuestionAnswerScalarFieldEnum = {
  createdAt: 'createdAt',
  id: 'id',
  ticketId: 'ticketId',
  questionId: 'questionId',
  userId: 'userId',
  value: 'value'
};

exports.Prisma.TagScalarFieldEnum = {
  content: 'content',
  createdAt: 'createdAt',
  guildId: 'guildId',
  id: 'id',
  name: 'name',
  regex: 'regex'
};

exports.Prisma.TicketScalarFieldEnum = {
  categoryId: 'categoryId',
  claimedById: 'claimedById',
  closedAt: 'closedAt',
  closedById: 'closedById',
  closedReason: 'closedReason',
  createdAt: 'createdAt',
  createdById: 'createdById',
  deleted: 'deleted',
  firstResponseAt: 'firstResponseAt',
  guildId: 'guildId',
  id: 'id',
  lastMessageAt: 'lastMessageAt',
  messageCount: 'messageCount',
  number: 'number',
  open: 'open',
  openingMessageId: 'openingMessageId',
  pinnedMessageIds: 'pinnedMessageIds',
  priority: 'priority',
  referencesMessageId: 'referencesMessageId',
  referencesTicketId: 'referencesTicketId',
  topic: 'topic'
};

exports.Prisma.UserScalarFieldEnum = {
  createdAt: 'createdAt',
  id: 'id',
  messageCount: 'messageCount'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.QuestionType = exports.$Enums.QuestionType = {
  MENU: 'MENU',
  TEXT: 'TEXT'
};

exports.TicketPriority = exports.$Enums.TicketPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

exports.Prisma.ModelName = {
  ArchivedChannel: 'ArchivedChannel',
  ArchivedMessage: 'ArchivedMessage',
  ArchivedRole: 'ArchivedRole',
  ArchivedUser: 'ArchivedUser',
  Category: 'Category',
  Feedback: 'Feedback',
  Guild: 'Guild',
  Question: 'Question',
  QuestionAnswer: 'QuestionAnswer',
  Tag: 'Tag',
  Ticket: 'Ticket',
  User: 'User'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
